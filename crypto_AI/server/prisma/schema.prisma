// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  name                  String
  passwordHash          String
  hasCompletedOnboarding Boolean @default(false)
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  lastLoginAt           DateTime?

  // Relations
  sessions              Session[]
  userAssets            UserAsset[]
  userContentTypes      UserContentType[]
  investorProfile       UserInvestorProfile?
  votes                 Vote[]
  interactions          Interaction[]
  recommendationProfile RecommendationProfile?
  userRecommendations   UserRecommendation[]
  recommendationEvents  RecommendationEvent[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String
  expiresAt DateTime
  isActive  Boolean  @default(true)
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  lastUsedAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Asset {
  id        String   @id @default(cuid())
  symbol    String   @unique
  name      String
  icon      String?
  isActive  Boolean  @default(true)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userAssets      UserAsset[]
  priceSnapshots  PriceSnapshot[]

  @@map("assets")
}

model UserAsset {
  id      String   @id @default(cuid())
  userId  String
  assetId String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([userId, assetId])
  @@map("user_assets")
}

model ContentType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userContentTypes UserContentType[]

  @@map("content_types")
}

model UserContentType {
  id            String   @id @default(cuid())
  userId        String
  contentTypeId String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentType ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, contentTypeId])
  @@map("user_content_types")
}

model UserInvestorProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  investorType      String
  riskTolerance     String?
  investmentHorizon String?
  experienceLevel   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_investor_profile")
}

model NewsItem {
  id              String   @id @default(cuid())
  title           String
  summary         String
  url             String
  source          String
  publishedAt     DateTime
  category        String?
  sentiment       String?
  relevanceScore  Float?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  votes Vote[]

  @@map("news_items")
}

model Meme {
  id          String   @id @default(cuid())
  title       String
  imageUrl    String
  caption     String
  source      String
  tags        String[]
  isActive    Boolean  @default(true)
  featuredDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  votes Vote[]

  @@map("memes")
}

model PriceSnapshot {
  id                      String   @id @default(cuid())
  assetId                 String
  symbol                  String
  currentPrice            Float
  priceChange24h          Float
  priceChangePercentage24h Float
  volume24h               Float?
  marketCap               Float?
  sparkline               Float[]
  snapshotAt              DateTime
  createdAt               DateTime @default(now())

  // Relations
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("price_snapshots")
}

model AIInsight {
  id            String   @id @default(cuid())
  title         String
  content       String
  type          String
  confidence    Float
  targetAssets  String[]
  sentiment     String?
  generatedAt   DateTime
  expiresAt     DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  votes Vote[]

  @@map("ai_insights")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  section   String
  itemId    String
  vote      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, section, itemId])
  @@map("votes")
}

model Interaction {
  id        String   @id @default(cuid())
  userId    String
  type      String
  section   String
  itemId    String?
  metadata  Json?
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("interactions")
}

model RecommendationProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  algorithm         String
  preferences       Json
  filters           Json?
  isActive          Boolean  @default(true)
  lastTrainedAt     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recommendation_profile")
}

model UserRecommendation {
  id              String   @id @default(cuid())
  userId          String
  type            String
  itemId          String
  title           String
  description     String?
  relevanceScore  Float
  reason          String?
  priority        String
  isRead          Boolean  @default(false)
  isDismissed     Boolean  @default(false)
  expiresAt       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_recommendations")
}

model RecommendationEvent {
  id               String   @id @default(cuid())
  userId           String
  recommendationId String
  eventType        String
  context          Json?
  feedback         Json?
  createdAt        DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recommendation_events")
}
