
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Asset
 * 
 */
export type Asset = $Result.DefaultSelection<Prisma.$AssetPayload>
/**
 * Model UserAsset
 * 
 */
export type UserAsset = $Result.DefaultSelection<Prisma.$UserAssetPayload>
/**
 * Model ContentType
 * 
 */
export type ContentType = $Result.DefaultSelection<Prisma.$ContentTypePayload>
/**
 * Model UserContentType
 * 
 */
export type UserContentType = $Result.DefaultSelection<Prisma.$UserContentTypePayload>
/**
 * Model UserInvestorProfile
 * 
 */
export type UserInvestorProfile = $Result.DefaultSelection<Prisma.$UserInvestorProfilePayload>
/**
 * Model NewsItem
 * 
 */
export type NewsItem = $Result.DefaultSelection<Prisma.$NewsItemPayload>
/**
 * Model Meme
 * 
 */
export type Meme = $Result.DefaultSelection<Prisma.$MemePayload>
/**
 * Model PriceSnapshot
 * 
 */
export type PriceSnapshot = $Result.DefaultSelection<Prisma.$PriceSnapshotPayload>
/**
 * Model AIInsight
 * 
 */
export type AIInsight = $Result.DefaultSelection<Prisma.$AIInsightPayload>
/**
 * Model Vote
 * 
 */
export type Vote = $Result.DefaultSelection<Prisma.$VotePayload>
/**
 * Model Interaction
 * 
 */
export type Interaction = $Result.DefaultSelection<Prisma.$InteractionPayload>
/**
 * Model RecommendationProfile
 * 
 */
export type RecommendationProfile = $Result.DefaultSelection<Prisma.$RecommendationProfilePayload>
/**
 * Model UserRecommendation
 * 
 */
export type UserRecommendation = $Result.DefaultSelection<Prisma.$UserRecommendationPayload>
/**
 * Model RecommendationEvent
 * 
 */
export type RecommendationEvent = $Result.DefaultSelection<Prisma.$RecommendationEventPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.asset`: Exposes CRUD operations for the **Asset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assets
    * const assets = await prisma.asset.findMany()
    * ```
    */
  get asset(): Prisma.AssetDelegate<ExtArgs>;

  /**
   * `prisma.userAsset`: Exposes CRUD operations for the **UserAsset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAssets
    * const userAssets = await prisma.userAsset.findMany()
    * ```
    */
  get userAsset(): Prisma.UserAssetDelegate<ExtArgs>;

  /**
   * `prisma.contentType`: Exposes CRUD operations for the **ContentType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContentTypes
    * const contentTypes = await prisma.contentType.findMany()
    * ```
    */
  get contentType(): Prisma.ContentTypeDelegate<ExtArgs>;

  /**
   * `prisma.userContentType`: Exposes CRUD operations for the **UserContentType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserContentTypes
    * const userContentTypes = await prisma.userContentType.findMany()
    * ```
    */
  get userContentType(): Prisma.UserContentTypeDelegate<ExtArgs>;

  /**
   * `prisma.userInvestorProfile`: Exposes CRUD operations for the **UserInvestorProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserInvestorProfiles
    * const userInvestorProfiles = await prisma.userInvestorProfile.findMany()
    * ```
    */
  get userInvestorProfile(): Prisma.UserInvestorProfileDelegate<ExtArgs>;

  /**
   * `prisma.newsItem`: Exposes CRUD operations for the **NewsItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NewsItems
    * const newsItems = await prisma.newsItem.findMany()
    * ```
    */
  get newsItem(): Prisma.NewsItemDelegate<ExtArgs>;

  /**
   * `prisma.meme`: Exposes CRUD operations for the **Meme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Memes
    * const memes = await prisma.meme.findMany()
    * ```
    */
  get meme(): Prisma.MemeDelegate<ExtArgs>;

  /**
   * `prisma.priceSnapshot`: Exposes CRUD operations for the **PriceSnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PriceSnapshots
    * const priceSnapshots = await prisma.priceSnapshot.findMany()
    * ```
    */
  get priceSnapshot(): Prisma.PriceSnapshotDelegate<ExtArgs>;

  /**
   * `prisma.aIInsight`: Exposes CRUD operations for the **AIInsight** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AIInsights
    * const aIInsights = await prisma.aIInsight.findMany()
    * ```
    */
  get aIInsight(): Prisma.AIInsightDelegate<ExtArgs>;

  /**
   * `prisma.vote`: Exposes CRUD operations for the **Vote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.vote.findMany()
    * ```
    */
  get vote(): Prisma.VoteDelegate<ExtArgs>;

  /**
   * `prisma.interaction`: Exposes CRUD operations for the **Interaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Interactions
    * const interactions = await prisma.interaction.findMany()
    * ```
    */
  get interaction(): Prisma.InteractionDelegate<ExtArgs>;

  /**
   * `prisma.recommendationProfile`: Exposes CRUD operations for the **RecommendationProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecommendationProfiles
    * const recommendationProfiles = await prisma.recommendationProfile.findMany()
    * ```
    */
  get recommendationProfile(): Prisma.RecommendationProfileDelegate<ExtArgs>;

  /**
   * `prisma.userRecommendation`: Exposes CRUD operations for the **UserRecommendation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRecommendations
    * const userRecommendations = await prisma.userRecommendation.findMany()
    * ```
    */
  get userRecommendation(): Prisma.UserRecommendationDelegate<ExtArgs>;

  /**
   * `prisma.recommendationEvent`: Exposes CRUD operations for the **RecommendationEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecommendationEvents
    * const recommendationEvents = await prisma.recommendationEvent.findMany()
    * ```
    */
  get recommendationEvent(): Prisma.RecommendationEventDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Asset: 'Asset',
    UserAsset: 'UserAsset',
    ContentType: 'ContentType',
    UserContentType: 'UserContentType',
    UserInvestorProfile: 'UserInvestorProfile',
    NewsItem: 'NewsItem',
    Meme: 'Meme',
    PriceSnapshot: 'PriceSnapshot',
    AIInsight: 'AIInsight',
    Vote: 'Vote',
    Interaction: 'Interaction',
    RecommendationProfile: 'RecommendationProfile',
    UserRecommendation: 'UserRecommendation',
    RecommendationEvent: 'RecommendationEvent'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "session" | "asset" | "userAsset" | "contentType" | "userContentType" | "userInvestorProfile" | "newsItem" | "meme" | "priceSnapshot" | "aIInsight" | "vote" | "interaction" | "recommendationProfile" | "userRecommendation" | "recommendationEvent"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Asset: {
        payload: Prisma.$AssetPayload<ExtArgs>
        fields: Prisma.AssetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findFirst: {
            args: Prisma.AssetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findMany: {
            args: Prisma.AssetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          create: {
            args: Prisma.AssetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          createMany: {
            args: Prisma.AssetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          delete: {
            args: Prisma.AssetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          update: {
            args: Prisma.AssetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          deleteMany: {
            args: Prisma.AssetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          aggregate: {
            args: Prisma.AssetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAsset>
          }
          groupBy: {
            args: Prisma.AssetGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetCountArgs<ExtArgs>
            result: $Utils.Optional<AssetCountAggregateOutputType> | number
          }
        }
      }
      UserAsset: {
        payload: Prisma.$UserAssetPayload<ExtArgs>
        fields: Prisma.UserAssetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAssetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAssetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetPayload>
          }
          findFirst: {
            args: Prisma.UserAssetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAssetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetPayload>
          }
          findMany: {
            args: Prisma.UserAssetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetPayload>[]
          }
          create: {
            args: Prisma.UserAssetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetPayload>
          }
          createMany: {
            args: Prisma.UserAssetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAssetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetPayload>[]
          }
          delete: {
            args: Prisma.UserAssetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetPayload>
          }
          update: {
            args: Prisma.UserAssetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetPayload>
          }
          deleteMany: {
            args: Prisma.UserAssetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAssetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserAssetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetPayload>
          }
          aggregate: {
            args: Prisma.UserAssetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAsset>
          }
          groupBy: {
            args: Prisma.UserAssetGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAssetGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAssetCountArgs<ExtArgs>
            result: $Utils.Optional<UserAssetCountAggregateOutputType> | number
          }
        }
      }
      ContentType: {
        payload: Prisma.$ContentTypePayload<ExtArgs>
        fields: Prisma.ContentTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContentTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContentTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentTypePayload>
          }
          findFirst: {
            args: Prisma.ContentTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContentTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentTypePayload>
          }
          findMany: {
            args: Prisma.ContentTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentTypePayload>[]
          }
          create: {
            args: Prisma.ContentTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentTypePayload>
          }
          createMany: {
            args: Prisma.ContentTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContentTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentTypePayload>[]
          }
          delete: {
            args: Prisma.ContentTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentTypePayload>
          }
          update: {
            args: Prisma.ContentTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentTypePayload>
          }
          deleteMany: {
            args: Prisma.ContentTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContentTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContentTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentTypePayload>
          }
          aggregate: {
            args: Prisma.ContentTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContentType>
          }
          groupBy: {
            args: Prisma.ContentTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContentTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContentTypeCountArgs<ExtArgs>
            result: $Utils.Optional<ContentTypeCountAggregateOutputType> | number
          }
        }
      }
      UserContentType: {
        payload: Prisma.$UserContentTypePayload<ExtArgs>
        fields: Prisma.UserContentTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserContentTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserContentTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserContentTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserContentTypePayload>
          }
          findFirst: {
            args: Prisma.UserContentTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserContentTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserContentTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserContentTypePayload>
          }
          findMany: {
            args: Prisma.UserContentTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserContentTypePayload>[]
          }
          create: {
            args: Prisma.UserContentTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserContentTypePayload>
          }
          createMany: {
            args: Prisma.UserContentTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserContentTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserContentTypePayload>[]
          }
          delete: {
            args: Prisma.UserContentTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserContentTypePayload>
          }
          update: {
            args: Prisma.UserContentTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserContentTypePayload>
          }
          deleteMany: {
            args: Prisma.UserContentTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserContentTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserContentTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserContentTypePayload>
          }
          aggregate: {
            args: Prisma.UserContentTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserContentType>
          }
          groupBy: {
            args: Prisma.UserContentTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserContentTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserContentTypeCountArgs<ExtArgs>
            result: $Utils.Optional<UserContentTypeCountAggregateOutputType> | number
          }
        }
      }
      UserInvestorProfile: {
        payload: Prisma.$UserInvestorProfilePayload<ExtArgs>
        fields: Prisma.UserInvestorProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserInvestorProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvestorProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserInvestorProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvestorProfilePayload>
          }
          findFirst: {
            args: Prisma.UserInvestorProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvestorProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserInvestorProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvestorProfilePayload>
          }
          findMany: {
            args: Prisma.UserInvestorProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvestorProfilePayload>[]
          }
          create: {
            args: Prisma.UserInvestorProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvestorProfilePayload>
          }
          createMany: {
            args: Prisma.UserInvestorProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserInvestorProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvestorProfilePayload>[]
          }
          delete: {
            args: Prisma.UserInvestorProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvestorProfilePayload>
          }
          update: {
            args: Prisma.UserInvestorProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvestorProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserInvestorProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserInvestorProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserInvestorProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvestorProfilePayload>
          }
          aggregate: {
            args: Prisma.UserInvestorProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserInvestorProfile>
          }
          groupBy: {
            args: Prisma.UserInvestorProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserInvestorProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserInvestorProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserInvestorProfileCountAggregateOutputType> | number
          }
        }
      }
      NewsItem: {
        payload: Prisma.$NewsItemPayload<ExtArgs>
        fields: Prisma.NewsItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewsItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewsItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsItemPayload>
          }
          findFirst: {
            args: Prisma.NewsItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewsItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsItemPayload>
          }
          findMany: {
            args: Prisma.NewsItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsItemPayload>[]
          }
          create: {
            args: Prisma.NewsItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsItemPayload>
          }
          createMany: {
            args: Prisma.NewsItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NewsItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsItemPayload>[]
          }
          delete: {
            args: Prisma.NewsItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsItemPayload>
          }
          update: {
            args: Prisma.NewsItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsItemPayload>
          }
          deleteMany: {
            args: Prisma.NewsItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NewsItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NewsItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsItemPayload>
          }
          aggregate: {
            args: Prisma.NewsItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNewsItem>
          }
          groupBy: {
            args: Prisma.NewsItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<NewsItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewsItemCountArgs<ExtArgs>
            result: $Utils.Optional<NewsItemCountAggregateOutputType> | number
          }
        }
      }
      Meme: {
        payload: Prisma.$MemePayload<ExtArgs>
        fields: Prisma.MemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemePayload>
          }
          findFirst: {
            args: Prisma.MemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemePayload>
          }
          findMany: {
            args: Prisma.MemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemePayload>[]
          }
          create: {
            args: Prisma.MemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemePayload>
          }
          createMany: {
            args: Prisma.MemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemePayload>[]
          }
          delete: {
            args: Prisma.MemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemePayload>
          }
          update: {
            args: Prisma.MemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemePayload>
          }
          deleteMany: {
            args: Prisma.MemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemePayload>
          }
          aggregate: {
            args: Prisma.MemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeme>
          }
          groupBy: {
            args: Prisma.MemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<MemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemeCountArgs<ExtArgs>
            result: $Utils.Optional<MemeCountAggregateOutputType> | number
          }
        }
      }
      PriceSnapshot: {
        payload: Prisma.$PriceSnapshotPayload<ExtArgs>
        fields: Prisma.PriceSnapshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PriceSnapshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceSnapshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PriceSnapshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceSnapshotPayload>
          }
          findFirst: {
            args: Prisma.PriceSnapshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceSnapshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PriceSnapshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceSnapshotPayload>
          }
          findMany: {
            args: Prisma.PriceSnapshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceSnapshotPayload>[]
          }
          create: {
            args: Prisma.PriceSnapshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceSnapshotPayload>
          }
          createMany: {
            args: Prisma.PriceSnapshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PriceSnapshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceSnapshotPayload>[]
          }
          delete: {
            args: Prisma.PriceSnapshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceSnapshotPayload>
          }
          update: {
            args: Prisma.PriceSnapshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceSnapshotPayload>
          }
          deleteMany: {
            args: Prisma.PriceSnapshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PriceSnapshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PriceSnapshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceSnapshotPayload>
          }
          aggregate: {
            args: Prisma.PriceSnapshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePriceSnapshot>
          }
          groupBy: {
            args: Prisma.PriceSnapshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<PriceSnapshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.PriceSnapshotCountArgs<ExtArgs>
            result: $Utils.Optional<PriceSnapshotCountAggregateOutputType> | number
          }
        }
      }
      AIInsight: {
        payload: Prisma.$AIInsightPayload<ExtArgs>
        fields: Prisma.AIInsightFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AIInsightFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInsightPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AIInsightFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInsightPayload>
          }
          findFirst: {
            args: Prisma.AIInsightFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInsightPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AIInsightFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInsightPayload>
          }
          findMany: {
            args: Prisma.AIInsightFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInsightPayload>[]
          }
          create: {
            args: Prisma.AIInsightCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInsightPayload>
          }
          createMany: {
            args: Prisma.AIInsightCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AIInsightCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInsightPayload>[]
          }
          delete: {
            args: Prisma.AIInsightDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInsightPayload>
          }
          update: {
            args: Prisma.AIInsightUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInsightPayload>
          }
          deleteMany: {
            args: Prisma.AIInsightDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AIInsightUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AIInsightUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInsightPayload>
          }
          aggregate: {
            args: Prisma.AIInsightAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAIInsight>
          }
          groupBy: {
            args: Prisma.AIInsightGroupByArgs<ExtArgs>
            result: $Utils.Optional<AIInsightGroupByOutputType>[]
          }
          count: {
            args: Prisma.AIInsightCountArgs<ExtArgs>
            result: $Utils.Optional<AIInsightCountAggregateOutputType> | number
          }
        }
      }
      Vote: {
        payload: Prisma.$VotePayload<ExtArgs>
        fields: Prisma.VoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          findFirst: {
            args: Prisma.VoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          findMany: {
            args: Prisma.VoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>[]
          }
          create: {
            args: Prisma.VoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          createMany: {
            args: Prisma.VoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>[]
          }
          delete: {
            args: Prisma.VoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          update: {
            args: Prisma.VoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          deleteMany: {
            args: Prisma.VoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          aggregate: {
            args: Prisma.VoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVote>
          }
          groupBy: {
            args: Prisma.VoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<VoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoteCountArgs<ExtArgs>
            result: $Utils.Optional<VoteCountAggregateOutputType> | number
          }
        }
      }
      Interaction: {
        payload: Prisma.$InteractionPayload<ExtArgs>
        fields: Prisma.InteractionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InteractionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InteractionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          findFirst: {
            args: Prisma.InteractionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InteractionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          findMany: {
            args: Prisma.InteractionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>[]
          }
          create: {
            args: Prisma.InteractionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          createMany: {
            args: Prisma.InteractionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InteractionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>[]
          }
          delete: {
            args: Prisma.InteractionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          update: {
            args: Prisma.InteractionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          deleteMany: {
            args: Prisma.InteractionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InteractionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InteractionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          aggregate: {
            args: Prisma.InteractionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInteraction>
          }
          groupBy: {
            args: Prisma.InteractionGroupByArgs<ExtArgs>
            result: $Utils.Optional<InteractionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InteractionCountArgs<ExtArgs>
            result: $Utils.Optional<InteractionCountAggregateOutputType> | number
          }
        }
      }
      RecommendationProfile: {
        payload: Prisma.$RecommendationProfilePayload<ExtArgs>
        fields: Prisma.RecommendationProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecommendationProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecommendationProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationProfilePayload>
          }
          findFirst: {
            args: Prisma.RecommendationProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecommendationProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationProfilePayload>
          }
          findMany: {
            args: Prisma.RecommendationProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationProfilePayload>[]
          }
          create: {
            args: Prisma.RecommendationProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationProfilePayload>
          }
          createMany: {
            args: Prisma.RecommendationProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecommendationProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationProfilePayload>[]
          }
          delete: {
            args: Prisma.RecommendationProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationProfilePayload>
          }
          update: {
            args: Prisma.RecommendationProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationProfilePayload>
          }
          deleteMany: {
            args: Prisma.RecommendationProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecommendationProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecommendationProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationProfilePayload>
          }
          aggregate: {
            args: Prisma.RecommendationProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecommendationProfile>
          }
          groupBy: {
            args: Prisma.RecommendationProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecommendationProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecommendationProfileCountArgs<ExtArgs>
            result: $Utils.Optional<RecommendationProfileCountAggregateOutputType> | number
          }
        }
      }
      UserRecommendation: {
        payload: Prisma.$UserRecommendationPayload<ExtArgs>
        fields: Prisma.UserRecommendationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRecommendationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecommendationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRecommendationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecommendationPayload>
          }
          findFirst: {
            args: Prisma.UserRecommendationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecommendationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRecommendationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecommendationPayload>
          }
          findMany: {
            args: Prisma.UserRecommendationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecommendationPayload>[]
          }
          create: {
            args: Prisma.UserRecommendationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecommendationPayload>
          }
          createMany: {
            args: Prisma.UserRecommendationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRecommendationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecommendationPayload>[]
          }
          delete: {
            args: Prisma.UserRecommendationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecommendationPayload>
          }
          update: {
            args: Prisma.UserRecommendationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecommendationPayload>
          }
          deleteMany: {
            args: Prisma.UserRecommendationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRecommendationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserRecommendationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecommendationPayload>
          }
          aggregate: {
            args: Prisma.UserRecommendationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRecommendation>
          }
          groupBy: {
            args: Prisma.UserRecommendationGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRecommendationGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRecommendationCountArgs<ExtArgs>
            result: $Utils.Optional<UserRecommendationCountAggregateOutputType> | number
          }
        }
      }
      RecommendationEvent: {
        payload: Prisma.$RecommendationEventPayload<ExtArgs>
        fields: Prisma.RecommendationEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecommendationEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecommendationEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationEventPayload>
          }
          findFirst: {
            args: Prisma.RecommendationEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecommendationEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationEventPayload>
          }
          findMany: {
            args: Prisma.RecommendationEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationEventPayload>[]
          }
          create: {
            args: Prisma.RecommendationEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationEventPayload>
          }
          createMany: {
            args: Prisma.RecommendationEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecommendationEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationEventPayload>[]
          }
          delete: {
            args: Prisma.RecommendationEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationEventPayload>
          }
          update: {
            args: Prisma.RecommendationEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationEventPayload>
          }
          deleteMany: {
            args: Prisma.RecommendationEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecommendationEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecommendationEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationEventPayload>
          }
          aggregate: {
            args: Prisma.RecommendationEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecommendationEvent>
          }
          groupBy: {
            args: Prisma.RecommendationEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecommendationEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecommendationEventCountArgs<ExtArgs>
            result: $Utils.Optional<RecommendationEventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    userAssets: number
    userContentTypes: number
    votes: number
    interactions: number
    userRecommendations: number
    recommendationEvents: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    userAssets?: boolean | UserCountOutputTypeCountUserAssetsArgs
    userContentTypes?: boolean | UserCountOutputTypeCountUserContentTypesArgs
    votes?: boolean | UserCountOutputTypeCountVotesArgs
    interactions?: boolean | UserCountOutputTypeCountInteractionsArgs
    userRecommendations?: boolean | UserCountOutputTypeCountUserRecommendationsArgs
    recommendationEvents?: boolean | UserCountOutputTypeCountRecommendationEventsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAssetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserContentTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserContentTypeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InteractionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserRecommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRecommendationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRecommendationEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationEventWhereInput
  }


  /**
   * Count Type AssetCountOutputType
   */

  export type AssetCountOutputType = {
    userAssets: number
    priceSnapshots: number
  }

  export type AssetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userAssets?: boolean | AssetCountOutputTypeCountUserAssetsArgs
    priceSnapshots?: boolean | AssetCountOutputTypeCountPriceSnapshotsArgs
  }

  // Custom InputTypes
  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCountOutputType
     */
    select?: AssetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountUserAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAssetWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountPriceSnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceSnapshotWhereInput
  }


  /**
   * Count Type ContentTypeCountOutputType
   */

  export type ContentTypeCountOutputType = {
    userContentTypes: number
  }

  export type ContentTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userContentTypes?: boolean | ContentTypeCountOutputTypeCountUserContentTypesArgs
  }

  // Custom InputTypes
  /**
   * ContentTypeCountOutputType without action
   */
  export type ContentTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentTypeCountOutputType
     */
    select?: ContentTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContentTypeCountOutputType without action
   */
  export type ContentTypeCountOutputTypeCountUserContentTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserContentTypeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    passwordHash: string | null
    hasCompletedOnboarding: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    passwordHash: string | null
    hasCompletedOnboarding: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    passwordHash: number
    hasCompletedOnboarding: number
    isActive: number
    createdAt: number
    updatedAt: number
    lastLoginAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    passwordHash?: true
    hasCompletedOnboarding?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    passwordHash?: true
    hasCompletedOnboarding?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    passwordHash?: true
    hasCompletedOnboarding?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding: boolean
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    lastLoginAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    passwordHash?: boolean
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    userAssets?: boolean | User$userAssetsArgs<ExtArgs>
    userContentTypes?: boolean | User$userContentTypesArgs<ExtArgs>
    investorProfile?: boolean | User$investorProfileArgs<ExtArgs>
    votes?: boolean | User$votesArgs<ExtArgs>
    interactions?: boolean | User$interactionsArgs<ExtArgs>
    recommendationProfile?: boolean | User$recommendationProfileArgs<ExtArgs>
    userRecommendations?: boolean | User$userRecommendationsArgs<ExtArgs>
    recommendationEvents?: boolean | User$recommendationEventsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    passwordHash?: boolean
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    passwordHash?: boolean
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    userAssets?: boolean | User$userAssetsArgs<ExtArgs>
    userContentTypes?: boolean | User$userContentTypesArgs<ExtArgs>
    investorProfile?: boolean | User$investorProfileArgs<ExtArgs>
    votes?: boolean | User$votesArgs<ExtArgs>
    interactions?: boolean | User$interactionsArgs<ExtArgs>
    recommendationProfile?: boolean | User$recommendationProfileArgs<ExtArgs>
    userRecommendations?: boolean | User$userRecommendationsArgs<ExtArgs>
    recommendationEvents?: boolean | User$recommendationEventsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      userAssets: Prisma.$UserAssetPayload<ExtArgs>[]
      userContentTypes: Prisma.$UserContentTypePayload<ExtArgs>[]
      investorProfile: Prisma.$UserInvestorProfilePayload<ExtArgs> | null
      votes: Prisma.$VotePayload<ExtArgs>[]
      interactions: Prisma.$InteractionPayload<ExtArgs>[]
      recommendationProfile: Prisma.$RecommendationProfilePayload<ExtArgs> | null
      userRecommendations: Prisma.$UserRecommendationPayload<ExtArgs>[]
      recommendationEvents: Prisma.$RecommendationEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      passwordHash: string
      hasCompletedOnboarding: boolean
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      lastLoginAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    userAssets<T extends User$userAssetsArgs<ExtArgs> = {}>(args?: Subset<T, User$userAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssetPayload<ExtArgs>, T, "findMany"> | Null>
    userContentTypes<T extends User$userContentTypesArgs<ExtArgs> = {}>(args?: Subset<T, User$userContentTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserContentTypePayload<ExtArgs>, T, "findMany"> | Null>
    investorProfile<T extends User$investorProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$investorProfileArgs<ExtArgs>>): Prisma__UserInvestorProfileClient<$Result.GetResult<Prisma.$UserInvestorProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    votes<T extends User$votesArgs<ExtArgs> = {}>(args?: Subset<T, User$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany"> | Null>
    interactions<T extends User$interactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$interactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findMany"> | Null>
    recommendationProfile<T extends User$recommendationProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$recommendationProfileArgs<ExtArgs>>): Prisma__RecommendationProfileClient<$Result.GetResult<Prisma.$RecommendationProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    userRecommendations<T extends User$userRecommendationsArgs<ExtArgs> = {}>(args?: Subset<T, User$userRecommendationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRecommendationPayload<ExtArgs>, T, "findMany"> | Null>
    recommendationEvents<T extends User$recommendationEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$recommendationEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly hasCompletedOnboarding: FieldRef<"User", 'Boolean'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.userAssets
   */
  export type User$userAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInclude<ExtArgs> | null
    where?: UserAssetWhereInput
    orderBy?: UserAssetOrderByWithRelationInput | UserAssetOrderByWithRelationInput[]
    cursor?: UserAssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAssetScalarFieldEnum | UserAssetScalarFieldEnum[]
  }

  /**
   * User.userContentTypes
   */
  export type User$userContentTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeInclude<ExtArgs> | null
    where?: UserContentTypeWhereInput
    orderBy?: UserContentTypeOrderByWithRelationInput | UserContentTypeOrderByWithRelationInput[]
    cursor?: UserContentTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserContentTypeScalarFieldEnum | UserContentTypeScalarFieldEnum[]
  }

  /**
   * User.investorProfile
   */
  export type User$investorProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvestorProfile
     */
    select?: UserInvestorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvestorProfileInclude<ExtArgs> | null
    where?: UserInvestorProfileWhereInput
  }

  /**
   * User.votes
   */
  export type User$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * User.interactions
   */
  export type User$interactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    where?: InteractionWhereInput
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    cursor?: InteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InteractionScalarFieldEnum | InteractionScalarFieldEnum[]
  }

  /**
   * User.recommendationProfile
   */
  export type User$recommendationProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationProfile
     */
    select?: RecommendationProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationProfileInclude<ExtArgs> | null
    where?: RecommendationProfileWhereInput
  }

  /**
   * User.userRecommendations
   */
  export type User$userRecommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecommendation
     */
    select?: UserRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecommendationInclude<ExtArgs> | null
    where?: UserRecommendationWhereInput
    orderBy?: UserRecommendationOrderByWithRelationInput | UserRecommendationOrderByWithRelationInput[]
    cursor?: UserRecommendationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRecommendationScalarFieldEnum | UserRecommendationScalarFieldEnum[]
  }

  /**
   * User.recommendationEvents
   */
  export type User$recommendationEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationEvent
     */
    select?: RecommendationEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationEventInclude<ExtArgs> | null
    where?: RecommendationEventWhereInput
    orderBy?: RecommendationEventOrderByWithRelationInput | RecommendationEventOrderByWithRelationInput[]
    cursor?: RecommendationEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecommendationEventScalarFieldEnum | RecommendationEventScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    tokenHash: string | null
    expiresAt: Date | null
    isActive: boolean | null
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date | null
    lastUsedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    tokenHash: string | null
    expiresAt: Date | null
    isActive: boolean | null
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date | null
    lastUsedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    tokenHash: number
    expiresAt: number
    isActive: number
    userAgent: number
    ipAddress: number
    createdAt: number
    lastUsedAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    tokenHash?: true
    expiresAt?: true
    isActive?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
    lastUsedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    tokenHash?: true
    expiresAt?: true
    isActive?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
    lastUsedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    tokenHash?: true
    expiresAt?: true
    isActive?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
    lastUsedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    tokenHash: string
    expiresAt: Date
    isActive: boolean
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date
    lastUsedAt: Date | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tokenHash?: boolean
    expiresAt?: boolean
    isActive?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    lastUsedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tokenHash?: boolean
    expiresAt?: boolean
    isActive?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    lastUsedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    tokenHash?: boolean
    expiresAt?: boolean
    isActive?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    lastUsedAt?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      tokenHash: string
      expiresAt: Date
      isActive: boolean
      userAgent: string | null
      ipAddress: string | null
      createdAt: Date
      lastUsedAt: Date | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly tokenHash: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly isActive: FieldRef<"Session", 'Boolean'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly lastUsedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Asset
   */

  export type AggregateAsset = {
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  export type AssetAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type AssetSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type AssetMinAggregateOutputType = {
    id: string | null
    symbol: string | null
    name: string | null
    icon: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetMaxAggregateOutputType = {
    id: string | null
    symbol: string | null
    name: string | null
    icon: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetCountAggregateOutputType = {
    id: number
    symbol: number
    name: number
    icon: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssetAvgAggregateInputType = {
    sortOrder?: true
  }

  export type AssetSumAggregateInputType = {
    sortOrder?: true
  }

  export type AssetMinAggregateInputType = {
    id?: true
    symbol?: true
    name?: true
    icon?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetMaxAggregateInputType = {
    id?: true
    symbol?: true
    name?: true
    icon?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetCountAggregateInputType = {
    id?: true
    symbol?: true
    name?: true
    icon?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asset to aggregate.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assets
    **/
    _count?: true | AssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetMaxAggregateInputType
  }

  export type GetAssetAggregateType<T extends AssetAggregateArgs> = {
        [P in keyof T & keyof AggregateAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsset[P]>
      : GetScalarType<T[P], AggregateAsset[P]>
  }




  export type AssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithAggregationInput | AssetOrderByWithAggregationInput[]
    by: AssetScalarFieldEnum[] | AssetScalarFieldEnum
    having?: AssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetCountAggregateInputType | true
    _avg?: AssetAvgAggregateInputType
    _sum?: AssetSumAggregateInputType
    _min?: AssetMinAggregateInputType
    _max?: AssetMaxAggregateInputType
  }

  export type AssetGroupByOutputType = {
    id: string
    symbol: string
    name: string
    icon: string | null
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  type GetAssetGroupByPayload<T extends AssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetGroupByOutputType[P]>
            : GetScalarType<T[P], AssetGroupByOutputType[P]>
        }
      >
    >


  export type AssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    name?: boolean
    icon?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userAssets?: boolean | Asset$userAssetsArgs<ExtArgs>
    priceSnapshots?: boolean | Asset$priceSnapshotsArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    name?: boolean
    icon?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectScalar = {
    id?: boolean
    symbol?: boolean
    name?: boolean
    icon?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userAssets?: boolean | Asset$userAssetsArgs<ExtArgs>
    priceSnapshots?: boolean | Asset$priceSnapshotsArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Asset"
    objects: {
      userAssets: Prisma.$UserAssetPayload<ExtArgs>[]
      priceSnapshots: Prisma.$PriceSnapshotPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      symbol: string
      name: string
      icon: string | null
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["asset"]>
    composites: {}
  }

  type AssetGetPayload<S extends boolean | null | undefined | AssetDefaultArgs> = $Result.GetResult<Prisma.$AssetPayload, S>

  type AssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssetCountAggregateInputType | true
    }

  export interface AssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Asset'], meta: { name: 'Asset' } }
    /**
     * Find zero or one Asset that matches the filter.
     * @param {AssetFindUniqueArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetFindUniqueArgs>(args: SelectSubset<T, AssetFindUniqueArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Asset that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssetFindUniqueOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Asset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetFindFirstArgs>(args?: SelectSubset<T, AssetFindFirstArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Asset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Assets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assets
     * const assets = await prisma.asset.findMany()
     * 
     * // Get first 10 Assets
     * const assets = await prisma.asset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetWithIdOnly = await prisma.asset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Asset.
     * @param {AssetCreateArgs} args - Arguments to create a Asset.
     * @example
     * // Create one Asset
     * const Asset = await prisma.asset.create({
     *   data: {
     *     // ... data to create a Asset
     *   }
     * })
     * 
     */
    create<T extends AssetCreateArgs>(args: SelectSubset<T, AssetCreateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Assets.
     * @param {AssetCreateManyArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetCreateManyArgs>(args?: SelectSubset<T, AssetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assets and returns the data saved in the database.
     * @param {AssetCreateManyAndReturnArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assets and only return the `id`
     * const assetWithIdOnly = await prisma.asset.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Asset.
     * @param {AssetDeleteArgs} args - Arguments to delete one Asset.
     * @example
     * // Delete one Asset
     * const Asset = await prisma.asset.delete({
     *   where: {
     *     // ... filter to delete one Asset
     *   }
     * })
     * 
     */
    delete<T extends AssetDeleteArgs>(args: SelectSubset<T, AssetDeleteArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Asset.
     * @param {AssetUpdateArgs} args - Arguments to update one Asset.
     * @example
     * // Update one Asset
     * const asset = await prisma.asset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetUpdateArgs>(args: SelectSubset<T, AssetUpdateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Assets.
     * @param {AssetDeleteManyArgs} args - Arguments to filter Assets to delete.
     * @example
     * // Delete a few Assets
     * const { count } = await prisma.asset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetDeleteManyArgs>(args?: SelectSubset<T, AssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetUpdateManyArgs>(args: SelectSubset<T, AssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Asset.
     * @param {AssetUpsertArgs} args - Arguments to update or create a Asset.
     * @example
     * // Update or create a Asset
     * const asset = await prisma.asset.upsert({
     *   create: {
     *     // ... data to create a Asset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Asset we want to update
     *   }
     * })
     */
    upsert<T extends AssetUpsertArgs>(args: SelectSubset<T, AssetUpsertArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCountArgs} args - Arguments to filter Assets to count.
     * @example
     * // Count the number of Assets
     * const count = await prisma.asset.count({
     *   where: {
     *     // ... the filter for the Assets we want to count
     *   }
     * })
    **/
    count<T extends AssetCountArgs>(
      args?: Subset<T, AssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs>): Prisma.PrismaPromise<GetAssetAggregateType<T>>

    /**
     * Group by Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetGroupByArgs['orderBy'] }
        : { orderBy?: AssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Asset model
   */
  readonly fields: AssetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Asset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userAssets<T extends Asset$userAssetsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$userAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssetPayload<ExtArgs>, T, "findMany"> | Null>
    priceSnapshots<T extends Asset$priceSnapshotsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$priceSnapshotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceSnapshotPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Asset model
   */ 
  interface AssetFieldRefs {
    readonly id: FieldRef<"Asset", 'String'>
    readonly symbol: FieldRef<"Asset", 'String'>
    readonly name: FieldRef<"Asset", 'String'>
    readonly icon: FieldRef<"Asset", 'String'>
    readonly isActive: FieldRef<"Asset", 'Boolean'>
    readonly sortOrder: FieldRef<"Asset", 'Int'>
    readonly createdAt: FieldRef<"Asset", 'DateTime'>
    readonly updatedAt: FieldRef<"Asset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Asset findUnique
   */
  export type AssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findUniqueOrThrow
   */
  export type AssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findFirst
   */
  export type AssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findFirstOrThrow
   */
  export type AssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findMany
   */
  export type AssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Assets to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset create
   */
  export type AssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to create a Asset.
     */
    data: XOR<AssetCreateInput, AssetUncheckedCreateInput>
  }

  /**
   * Asset createMany
   */
  export type AssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Asset createManyAndReturn
   */
  export type AssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Asset update
   */
  export type AssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to update a Asset.
     */
    data: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
    /**
     * Choose, which Asset to update.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset updateMany
   */
  export type AssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assets.
     */
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     */
    where?: AssetWhereInput
  }

  /**
   * Asset upsert
   */
  export type AssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The filter to search for the Asset to update in case it exists.
     */
    where: AssetWhereUniqueInput
    /**
     * In case the Asset found by the `where` argument doesn't exist, create a new Asset with this data.
     */
    create: XOR<AssetCreateInput, AssetUncheckedCreateInput>
    /**
     * In case the Asset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
  }

  /**
   * Asset delete
   */
  export type AssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter which Asset to delete.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset deleteMany
   */
  export type AssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assets to delete
     */
    where?: AssetWhereInput
  }

  /**
   * Asset.userAssets
   */
  export type Asset$userAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInclude<ExtArgs> | null
    where?: UserAssetWhereInput
    orderBy?: UserAssetOrderByWithRelationInput | UserAssetOrderByWithRelationInput[]
    cursor?: UserAssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAssetScalarFieldEnum | UserAssetScalarFieldEnum[]
  }

  /**
   * Asset.priceSnapshots
   */
  export type Asset$priceSnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceSnapshot
     */
    select?: PriceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceSnapshotInclude<ExtArgs> | null
    where?: PriceSnapshotWhereInput
    orderBy?: PriceSnapshotOrderByWithRelationInput | PriceSnapshotOrderByWithRelationInput[]
    cursor?: PriceSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PriceSnapshotScalarFieldEnum | PriceSnapshotScalarFieldEnum[]
  }

  /**
   * Asset without action
   */
  export type AssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
  }


  /**
   * Model UserAsset
   */

  export type AggregateUserAsset = {
    _count: UserAssetCountAggregateOutputType | null
    _min: UserAssetMinAggregateOutputType | null
    _max: UserAssetMaxAggregateOutputType | null
  }

  export type UserAssetMinAggregateOutputType = {
    id: string | null
    userId: string | null
    assetId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserAssetMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    assetId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserAssetCountAggregateOutputType = {
    id: number
    userId: number
    assetId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAssetMinAggregateInputType = {
    id?: true
    userId?: true
    assetId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserAssetMaxAggregateInputType = {
    id?: true
    userId?: true
    assetId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserAssetCountAggregateInputType = {
    id?: true
    userId?: true
    assetId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAsset to aggregate.
     */
    where?: UserAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAssets to fetch.
     */
    orderBy?: UserAssetOrderByWithRelationInput | UserAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAssets
    **/
    _count?: true | UserAssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAssetMaxAggregateInputType
  }

  export type GetUserAssetAggregateType<T extends UserAssetAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAsset[P]>
      : GetScalarType<T[P], AggregateUserAsset[P]>
  }




  export type UserAssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAssetWhereInput
    orderBy?: UserAssetOrderByWithAggregationInput | UserAssetOrderByWithAggregationInput[]
    by: UserAssetScalarFieldEnum[] | UserAssetScalarFieldEnum
    having?: UserAssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAssetCountAggregateInputType | true
    _min?: UserAssetMinAggregateInputType
    _max?: UserAssetMaxAggregateInputType
  }

  export type UserAssetGroupByOutputType = {
    id: string
    userId: string
    assetId: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserAssetCountAggregateOutputType | null
    _min: UserAssetMinAggregateOutputType | null
    _max: UserAssetMaxAggregateOutputType | null
  }

  type GetUserAssetGroupByPayload<T extends UserAssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAssetGroupByOutputType[P]>
            : GetScalarType<T[P], UserAssetGroupByOutputType[P]>
        }
      >
    >


  export type UserAssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    assetId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAsset"]>

  export type UserAssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    assetId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAsset"]>

  export type UserAssetSelectScalar = {
    id?: boolean
    userId?: boolean
    assetId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserAssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type UserAssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }

  export type $UserAssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAsset"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      assetId: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userAsset"]>
    composites: {}
  }

  type UserAssetGetPayload<S extends boolean | null | undefined | UserAssetDefaultArgs> = $Result.GetResult<Prisma.$UserAssetPayload, S>

  type UserAssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserAssetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserAssetCountAggregateInputType | true
    }

  export interface UserAssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAsset'], meta: { name: 'UserAsset' } }
    /**
     * Find zero or one UserAsset that matches the filter.
     * @param {UserAssetFindUniqueArgs} args - Arguments to find a UserAsset
     * @example
     * // Get one UserAsset
     * const userAsset = await prisma.userAsset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAssetFindUniqueArgs>(args: SelectSubset<T, UserAssetFindUniqueArgs<ExtArgs>>): Prisma__UserAssetClient<$Result.GetResult<Prisma.$UserAssetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserAsset that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserAssetFindUniqueOrThrowArgs} args - Arguments to find a UserAsset
     * @example
     * // Get one UserAsset
     * const userAsset = await prisma.userAsset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAssetFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAssetClient<$Result.GetResult<Prisma.$UserAssetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserAsset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetFindFirstArgs} args - Arguments to find a UserAsset
     * @example
     * // Get one UserAsset
     * const userAsset = await prisma.userAsset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAssetFindFirstArgs>(args?: SelectSubset<T, UserAssetFindFirstArgs<ExtArgs>>): Prisma__UserAssetClient<$Result.GetResult<Prisma.$UserAssetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserAsset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetFindFirstOrThrowArgs} args - Arguments to find a UserAsset
     * @example
     * // Get one UserAsset
     * const userAsset = await prisma.userAsset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAssetFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAssetClient<$Result.GetResult<Prisma.$UserAssetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserAssets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAssets
     * const userAssets = await prisma.userAsset.findMany()
     * 
     * // Get first 10 UserAssets
     * const userAssets = await prisma.userAsset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAssetWithIdOnly = await prisma.userAsset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAssetFindManyArgs>(args?: SelectSubset<T, UserAssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserAsset.
     * @param {UserAssetCreateArgs} args - Arguments to create a UserAsset.
     * @example
     * // Create one UserAsset
     * const UserAsset = await prisma.userAsset.create({
     *   data: {
     *     // ... data to create a UserAsset
     *   }
     * })
     * 
     */
    create<T extends UserAssetCreateArgs>(args: SelectSubset<T, UserAssetCreateArgs<ExtArgs>>): Prisma__UserAssetClient<$Result.GetResult<Prisma.$UserAssetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserAssets.
     * @param {UserAssetCreateManyArgs} args - Arguments to create many UserAssets.
     * @example
     * // Create many UserAssets
     * const userAsset = await prisma.userAsset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAssetCreateManyArgs>(args?: SelectSubset<T, UserAssetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAssets and returns the data saved in the database.
     * @param {UserAssetCreateManyAndReturnArgs} args - Arguments to create many UserAssets.
     * @example
     * // Create many UserAssets
     * const userAsset = await prisma.userAsset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAssets and only return the `id`
     * const userAssetWithIdOnly = await prisma.userAsset.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAssetCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAssetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserAsset.
     * @param {UserAssetDeleteArgs} args - Arguments to delete one UserAsset.
     * @example
     * // Delete one UserAsset
     * const UserAsset = await prisma.userAsset.delete({
     *   where: {
     *     // ... filter to delete one UserAsset
     *   }
     * })
     * 
     */
    delete<T extends UserAssetDeleteArgs>(args: SelectSubset<T, UserAssetDeleteArgs<ExtArgs>>): Prisma__UserAssetClient<$Result.GetResult<Prisma.$UserAssetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserAsset.
     * @param {UserAssetUpdateArgs} args - Arguments to update one UserAsset.
     * @example
     * // Update one UserAsset
     * const userAsset = await prisma.userAsset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAssetUpdateArgs>(args: SelectSubset<T, UserAssetUpdateArgs<ExtArgs>>): Prisma__UserAssetClient<$Result.GetResult<Prisma.$UserAssetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserAssets.
     * @param {UserAssetDeleteManyArgs} args - Arguments to filter UserAssets to delete.
     * @example
     * // Delete a few UserAssets
     * const { count } = await prisma.userAsset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAssetDeleteManyArgs>(args?: SelectSubset<T, UserAssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAssets
     * const userAsset = await prisma.userAsset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAssetUpdateManyArgs>(args: SelectSubset<T, UserAssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAsset.
     * @param {UserAssetUpsertArgs} args - Arguments to update or create a UserAsset.
     * @example
     * // Update or create a UserAsset
     * const userAsset = await prisma.userAsset.upsert({
     *   create: {
     *     // ... data to create a UserAsset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAsset we want to update
     *   }
     * })
     */
    upsert<T extends UserAssetUpsertArgs>(args: SelectSubset<T, UserAssetUpsertArgs<ExtArgs>>): Prisma__UserAssetClient<$Result.GetResult<Prisma.$UserAssetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetCountArgs} args - Arguments to filter UserAssets to count.
     * @example
     * // Count the number of UserAssets
     * const count = await prisma.userAsset.count({
     *   where: {
     *     // ... the filter for the UserAssets we want to count
     *   }
     * })
    **/
    count<T extends UserAssetCountArgs>(
      args?: Subset<T, UserAssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAsset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAssetAggregateArgs>(args: Subset<T, UserAssetAggregateArgs>): Prisma.PrismaPromise<GetUserAssetAggregateType<T>>

    /**
     * Group by UserAsset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAssetGroupByArgs['orderBy'] }
        : { orderBy?: UserAssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAsset model
   */
  readonly fields: UserAssetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAsset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAsset model
   */ 
  interface UserAssetFieldRefs {
    readonly id: FieldRef<"UserAsset", 'String'>
    readonly userId: FieldRef<"UserAsset", 'String'>
    readonly assetId: FieldRef<"UserAsset", 'String'>
    readonly isActive: FieldRef<"UserAsset", 'Boolean'>
    readonly createdAt: FieldRef<"UserAsset", 'DateTime'>
    readonly updatedAt: FieldRef<"UserAsset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserAsset findUnique
   */
  export type UserAssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInclude<ExtArgs> | null
    /**
     * Filter, which UserAsset to fetch.
     */
    where: UserAssetWhereUniqueInput
  }

  /**
   * UserAsset findUniqueOrThrow
   */
  export type UserAssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInclude<ExtArgs> | null
    /**
     * Filter, which UserAsset to fetch.
     */
    where: UserAssetWhereUniqueInput
  }

  /**
   * UserAsset findFirst
   */
  export type UserAssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInclude<ExtArgs> | null
    /**
     * Filter, which UserAsset to fetch.
     */
    where?: UserAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAssets to fetch.
     */
    orderBy?: UserAssetOrderByWithRelationInput | UserAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAssets.
     */
    cursor?: UserAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAssets.
     */
    distinct?: UserAssetScalarFieldEnum | UserAssetScalarFieldEnum[]
  }

  /**
   * UserAsset findFirstOrThrow
   */
  export type UserAssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInclude<ExtArgs> | null
    /**
     * Filter, which UserAsset to fetch.
     */
    where?: UserAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAssets to fetch.
     */
    orderBy?: UserAssetOrderByWithRelationInput | UserAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAssets.
     */
    cursor?: UserAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAssets.
     */
    distinct?: UserAssetScalarFieldEnum | UserAssetScalarFieldEnum[]
  }

  /**
   * UserAsset findMany
   */
  export type UserAssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInclude<ExtArgs> | null
    /**
     * Filter, which UserAssets to fetch.
     */
    where?: UserAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAssets to fetch.
     */
    orderBy?: UserAssetOrderByWithRelationInput | UserAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAssets.
     */
    cursor?: UserAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAssets.
     */
    skip?: number
    distinct?: UserAssetScalarFieldEnum | UserAssetScalarFieldEnum[]
  }

  /**
   * UserAsset create
   */
  export type UserAssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAsset.
     */
    data: XOR<UserAssetCreateInput, UserAssetUncheckedCreateInput>
  }

  /**
   * UserAsset createMany
   */
  export type UserAssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAssets.
     */
    data: UserAssetCreateManyInput | UserAssetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAsset createManyAndReturn
   */
  export type UserAssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserAssets.
     */
    data: UserAssetCreateManyInput | UserAssetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAsset update
   */
  export type UserAssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAsset.
     */
    data: XOR<UserAssetUpdateInput, UserAssetUncheckedUpdateInput>
    /**
     * Choose, which UserAsset to update.
     */
    where: UserAssetWhereUniqueInput
  }

  /**
   * UserAsset updateMany
   */
  export type UserAssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAssets.
     */
    data: XOR<UserAssetUpdateManyMutationInput, UserAssetUncheckedUpdateManyInput>
    /**
     * Filter which UserAssets to update
     */
    where?: UserAssetWhereInput
  }

  /**
   * UserAsset upsert
   */
  export type UserAssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAsset to update in case it exists.
     */
    where: UserAssetWhereUniqueInput
    /**
     * In case the UserAsset found by the `where` argument doesn't exist, create a new UserAsset with this data.
     */
    create: XOR<UserAssetCreateInput, UserAssetUncheckedCreateInput>
    /**
     * In case the UserAsset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAssetUpdateInput, UserAssetUncheckedUpdateInput>
  }

  /**
   * UserAsset delete
   */
  export type UserAssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInclude<ExtArgs> | null
    /**
     * Filter which UserAsset to delete.
     */
    where: UserAssetWhereUniqueInput
  }

  /**
   * UserAsset deleteMany
   */
  export type UserAssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAssets to delete
     */
    where?: UserAssetWhereInput
  }

  /**
   * UserAsset without action
   */
  export type UserAssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAsset
     */
    select?: UserAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInclude<ExtArgs> | null
  }


  /**
   * Model ContentType
   */

  export type AggregateContentType = {
    _count: ContentTypeCountAggregateOutputType | null
    _avg: ContentTypeAvgAggregateOutputType | null
    _sum: ContentTypeSumAggregateOutputType | null
    _min: ContentTypeMinAggregateOutputType | null
    _max: ContentTypeMaxAggregateOutputType | null
  }

  export type ContentTypeAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type ContentTypeSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type ContentTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContentTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContentTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    icon: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContentTypeAvgAggregateInputType = {
    sortOrder?: true
  }

  export type ContentTypeSumAggregateInputType = {
    sortOrder?: true
  }

  export type ContentTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContentTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContentTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContentTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContentType to aggregate.
     */
    where?: ContentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentTypes to fetch.
     */
    orderBy?: ContentTypeOrderByWithRelationInput | ContentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContentTypes
    **/
    _count?: true | ContentTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContentTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContentTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentTypeMaxAggregateInputType
  }

  export type GetContentTypeAggregateType<T extends ContentTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateContentType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContentType[P]>
      : GetScalarType<T[P], AggregateContentType[P]>
  }




  export type ContentTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentTypeWhereInput
    orderBy?: ContentTypeOrderByWithAggregationInput | ContentTypeOrderByWithAggregationInput[]
    by: ContentTypeScalarFieldEnum[] | ContentTypeScalarFieldEnum
    having?: ContentTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentTypeCountAggregateInputType | true
    _avg?: ContentTypeAvgAggregateInputType
    _sum?: ContentTypeSumAggregateInputType
    _min?: ContentTypeMinAggregateInputType
    _max?: ContentTypeMaxAggregateInputType
  }

  export type ContentTypeGroupByOutputType = {
    id: string
    name: string
    description: string
    icon: string | null
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: ContentTypeCountAggregateOutputType | null
    _avg: ContentTypeAvgAggregateOutputType | null
    _sum: ContentTypeSumAggregateOutputType | null
    _min: ContentTypeMinAggregateOutputType | null
    _max: ContentTypeMaxAggregateOutputType | null
  }

  type GetContentTypeGroupByPayload<T extends ContentTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContentTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ContentTypeGroupByOutputType[P]>
        }
      >
    >


  export type ContentTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userContentTypes?: boolean | ContentType$userContentTypesArgs<ExtArgs>
    _count?: boolean | ContentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contentType"]>

  export type ContentTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["contentType"]>

  export type ContentTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContentTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userContentTypes?: boolean | ContentType$userContentTypesArgs<ExtArgs>
    _count?: boolean | ContentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContentTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ContentTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContentType"
    objects: {
      userContentTypes: Prisma.$UserContentTypePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      icon: string | null
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contentType"]>
    composites: {}
  }

  type ContentTypeGetPayload<S extends boolean | null | undefined | ContentTypeDefaultArgs> = $Result.GetResult<Prisma.$ContentTypePayload, S>

  type ContentTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContentTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContentTypeCountAggregateInputType | true
    }

  export interface ContentTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContentType'], meta: { name: 'ContentType' } }
    /**
     * Find zero or one ContentType that matches the filter.
     * @param {ContentTypeFindUniqueArgs} args - Arguments to find a ContentType
     * @example
     * // Get one ContentType
     * const contentType = await prisma.contentType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContentTypeFindUniqueArgs>(args: SelectSubset<T, ContentTypeFindUniqueArgs<ExtArgs>>): Prisma__ContentTypeClient<$Result.GetResult<Prisma.$ContentTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ContentType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContentTypeFindUniqueOrThrowArgs} args - Arguments to find a ContentType
     * @example
     * // Get one ContentType
     * const contentType = await prisma.contentType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContentTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ContentTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContentTypeClient<$Result.GetResult<Prisma.$ContentTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ContentType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentTypeFindFirstArgs} args - Arguments to find a ContentType
     * @example
     * // Get one ContentType
     * const contentType = await prisma.contentType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContentTypeFindFirstArgs>(args?: SelectSubset<T, ContentTypeFindFirstArgs<ExtArgs>>): Prisma__ContentTypeClient<$Result.GetResult<Prisma.$ContentTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ContentType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentTypeFindFirstOrThrowArgs} args - Arguments to find a ContentType
     * @example
     * // Get one ContentType
     * const contentType = await prisma.contentType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContentTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ContentTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContentTypeClient<$Result.GetResult<Prisma.$ContentTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ContentTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContentTypes
     * const contentTypes = await prisma.contentType.findMany()
     * 
     * // Get first 10 ContentTypes
     * const contentTypes = await prisma.contentType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentTypeWithIdOnly = await prisma.contentType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContentTypeFindManyArgs>(args?: SelectSubset<T, ContentTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ContentType.
     * @param {ContentTypeCreateArgs} args - Arguments to create a ContentType.
     * @example
     * // Create one ContentType
     * const ContentType = await prisma.contentType.create({
     *   data: {
     *     // ... data to create a ContentType
     *   }
     * })
     * 
     */
    create<T extends ContentTypeCreateArgs>(args: SelectSubset<T, ContentTypeCreateArgs<ExtArgs>>): Prisma__ContentTypeClient<$Result.GetResult<Prisma.$ContentTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ContentTypes.
     * @param {ContentTypeCreateManyArgs} args - Arguments to create many ContentTypes.
     * @example
     * // Create many ContentTypes
     * const contentType = await prisma.contentType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContentTypeCreateManyArgs>(args?: SelectSubset<T, ContentTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContentTypes and returns the data saved in the database.
     * @param {ContentTypeCreateManyAndReturnArgs} args - Arguments to create many ContentTypes.
     * @example
     * // Create many ContentTypes
     * const contentType = await prisma.contentType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContentTypes and only return the `id`
     * const contentTypeWithIdOnly = await prisma.contentType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContentTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, ContentTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ContentType.
     * @param {ContentTypeDeleteArgs} args - Arguments to delete one ContentType.
     * @example
     * // Delete one ContentType
     * const ContentType = await prisma.contentType.delete({
     *   where: {
     *     // ... filter to delete one ContentType
     *   }
     * })
     * 
     */
    delete<T extends ContentTypeDeleteArgs>(args: SelectSubset<T, ContentTypeDeleteArgs<ExtArgs>>): Prisma__ContentTypeClient<$Result.GetResult<Prisma.$ContentTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ContentType.
     * @param {ContentTypeUpdateArgs} args - Arguments to update one ContentType.
     * @example
     * // Update one ContentType
     * const contentType = await prisma.contentType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContentTypeUpdateArgs>(args: SelectSubset<T, ContentTypeUpdateArgs<ExtArgs>>): Prisma__ContentTypeClient<$Result.GetResult<Prisma.$ContentTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ContentTypes.
     * @param {ContentTypeDeleteManyArgs} args - Arguments to filter ContentTypes to delete.
     * @example
     * // Delete a few ContentTypes
     * const { count } = await prisma.contentType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContentTypeDeleteManyArgs>(args?: SelectSubset<T, ContentTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContentTypes
     * const contentType = await prisma.contentType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContentTypeUpdateManyArgs>(args: SelectSubset<T, ContentTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContentType.
     * @param {ContentTypeUpsertArgs} args - Arguments to update or create a ContentType.
     * @example
     * // Update or create a ContentType
     * const contentType = await prisma.contentType.upsert({
     *   create: {
     *     // ... data to create a ContentType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContentType we want to update
     *   }
     * })
     */
    upsert<T extends ContentTypeUpsertArgs>(args: SelectSubset<T, ContentTypeUpsertArgs<ExtArgs>>): Prisma__ContentTypeClient<$Result.GetResult<Prisma.$ContentTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ContentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentTypeCountArgs} args - Arguments to filter ContentTypes to count.
     * @example
     * // Count the number of ContentTypes
     * const count = await prisma.contentType.count({
     *   where: {
     *     // ... the filter for the ContentTypes we want to count
     *   }
     * })
    **/
    count<T extends ContentTypeCountArgs>(
      args?: Subset<T, ContentTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentTypeAggregateArgs>(args: Subset<T, ContentTypeAggregateArgs>): Prisma.PrismaPromise<GetContentTypeAggregateType<T>>

    /**
     * Group by ContentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContentTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContentTypeGroupByArgs['orderBy'] }
        : { orderBy?: ContentTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContentTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContentType model
   */
  readonly fields: ContentTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContentType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContentTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userContentTypes<T extends ContentType$userContentTypesArgs<ExtArgs> = {}>(args?: Subset<T, ContentType$userContentTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserContentTypePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContentType model
   */ 
  interface ContentTypeFieldRefs {
    readonly id: FieldRef<"ContentType", 'String'>
    readonly name: FieldRef<"ContentType", 'String'>
    readonly description: FieldRef<"ContentType", 'String'>
    readonly icon: FieldRef<"ContentType", 'String'>
    readonly isActive: FieldRef<"ContentType", 'Boolean'>
    readonly sortOrder: FieldRef<"ContentType", 'Int'>
    readonly createdAt: FieldRef<"ContentType", 'DateTime'>
    readonly updatedAt: FieldRef<"ContentType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContentType findUnique
   */
  export type ContentTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentType
     */
    select?: ContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContentType to fetch.
     */
    where: ContentTypeWhereUniqueInput
  }

  /**
   * ContentType findUniqueOrThrow
   */
  export type ContentTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentType
     */
    select?: ContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContentType to fetch.
     */
    where: ContentTypeWhereUniqueInput
  }

  /**
   * ContentType findFirst
   */
  export type ContentTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentType
     */
    select?: ContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContentType to fetch.
     */
    where?: ContentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentTypes to fetch.
     */
    orderBy?: ContentTypeOrderByWithRelationInput | ContentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentTypes.
     */
    cursor?: ContentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentTypes.
     */
    distinct?: ContentTypeScalarFieldEnum | ContentTypeScalarFieldEnum[]
  }

  /**
   * ContentType findFirstOrThrow
   */
  export type ContentTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentType
     */
    select?: ContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContentType to fetch.
     */
    where?: ContentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentTypes to fetch.
     */
    orderBy?: ContentTypeOrderByWithRelationInput | ContentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentTypes.
     */
    cursor?: ContentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentTypes.
     */
    distinct?: ContentTypeScalarFieldEnum | ContentTypeScalarFieldEnum[]
  }

  /**
   * ContentType findMany
   */
  export type ContentTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentType
     */
    select?: ContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContentTypes to fetch.
     */
    where?: ContentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentTypes to fetch.
     */
    orderBy?: ContentTypeOrderByWithRelationInput | ContentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContentTypes.
     */
    cursor?: ContentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentTypes.
     */
    skip?: number
    distinct?: ContentTypeScalarFieldEnum | ContentTypeScalarFieldEnum[]
  }

  /**
   * ContentType create
   */
  export type ContentTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentType
     */
    select?: ContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ContentType.
     */
    data: XOR<ContentTypeCreateInput, ContentTypeUncheckedCreateInput>
  }

  /**
   * ContentType createMany
   */
  export type ContentTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContentTypes.
     */
    data: ContentTypeCreateManyInput | ContentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContentType createManyAndReturn
   */
  export type ContentTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentType
     */
    select?: ContentTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ContentTypes.
     */
    data: ContentTypeCreateManyInput | ContentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContentType update
   */
  export type ContentTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentType
     */
    select?: ContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ContentType.
     */
    data: XOR<ContentTypeUpdateInput, ContentTypeUncheckedUpdateInput>
    /**
     * Choose, which ContentType to update.
     */
    where: ContentTypeWhereUniqueInput
  }

  /**
   * ContentType updateMany
   */
  export type ContentTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContentTypes.
     */
    data: XOR<ContentTypeUpdateManyMutationInput, ContentTypeUncheckedUpdateManyInput>
    /**
     * Filter which ContentTypes to update
     */
    where?: ContentTypeWhereInput
  }

  /**
   * ContentType upsert
   */
  export type ContentTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentType
     */
    select?: ContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ContentType to update in case it exists.
     */
    where: ContentTypeWhereUniqueInput
    /**
     * In case the ContentType found by the `where` argument doesn't exist, create a new ContentType with this data.
     */
    create: XOR<ContentTypeCreateInput, ContentTypeUncheckedCreateInput>
    /**
     * In case the ContentType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContentTypeUpdateInput, ContentTypeUncheckedUpdateInput>
  }

  /**
   * ContentType delete
   */
  export type ContentTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentType
     */
    select?: ContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentTypeInclude<ExtArgs> | null
    /**
     * Filter which ContentType to delete.
     */
    where: ContentTypeWhereUniqueInput
  }

  /**
   * ContentType deleteMany
   */
  export type ContentTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContentTypes to delete
     */
    where?: ContentTypeWhereInput
  }

  /**
   * ContentType.userContentTypes
   */
  export type ContentType$userContentTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeInclude<ExtArgs> | null
    where?: UserContentTypeWhereInput
    orderBy?: UserContentTypeOrderByWithRelationInput | UserContentTypeOrderByWithRelationInput[]
    cursor?: UserContentTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserContentTypeScalarFieldEnum | UserContentTypeScalarFieldEnum[]
  }

  /**
   * ContentType without action
   */
  export type ContentTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentType
     */
    select?: ContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentTypeInclude<ExtArgs> | null
  }


  /**
   * Model UserContentType
   */

  export type AggregateUserContentType = {
    _count: UserContentTypeCountAggregateOutputType | null
    _min: UserContentTypeMinAggregateOutputType | null
    _max: UserContentTypeMaxAggregateOutputType | null
  }

  export type UserContentTypeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    contentTypeId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserContentTypeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    contentTypeId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserContentTypeCountAggregateOutputType = {
    id: number
    userId: number
    contentTypeId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserContentTypeMinAggregateInputType = {
    id?: true
    userId?: true
    contentTypeId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserContentTypeMaxAggregateInputType = {
    id?: true
    userId?: true
    contentTypeId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserContentTypeCountAggregateInputType = {
    id?: true
    userId?: true
    contentTypeId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserContentTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserContentType to aggregate.
     */
    where?: UserContentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserContentTypes to fetch.
     */
    orderBy?: UserContentTypeOrderByWithRelationInput | UserContentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserContentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserContentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserContentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserContentTypes
    **/
    _count?: true | UserContentTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserContentTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserContentTypeMaxAggregateInputType
  }

  export type GetUserContentTypeAggregateType<T extends UserContentTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserContentType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserContentType[P]>
      : GetScalarType<T[P], AggregateUserContentType[P]>
  }




  export type UserContentTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserContentTypeWhereInput
    orderBy?: UserContentTypeOrderByWithAggregationInput | UserContentTypeOrderByWithAggregationInput[]
    by: UserContentTypeScalarFieldEnum[] | UserContentTypeScalarFieldEnum
    having?: UserContentTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserContentTypeCountAggregateInputType | true
    _min?: UserContentTypeMinAggregateInputType
    _max?: UserContentTypeMaxAggregateInputType
  }

  export type UserContentTypeGroupByOutputType = {
    id: string
    userId: string
    contentTypeId: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserContentTypeCountAggregateOutputType | null
    _min: UserContentTypeMinAggregateOutputType | null
    _max: UserContentTypeMaxAggregateOutputType | null
  }

  type GetUserContentTypeGroupByPayload<T extends UserContentTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserContentTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserContentTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserContentTypeGroupByOutputType[P]>
            : GetScalarType<T[P], UserContentTypeGroupByOutputType[P]>
        }
      >
    >


  export type UserContentTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    contentTypeId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    contentType?: boolean | ContentTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userContentType"]>

  export type UserContentTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    contentTypeId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    contentType?: boolean | ContentTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userContentType"]>

  export type UserContentTypeSelectScalar = {
    id?: boolean
    userId?: boolean
    contentTypeId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserContentTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    contentType?: boolean | ContentTypeDefaultArgs<ExtArgs>
  }
  export type UserContentTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    contentType?: boolean | ContentTypeDefaultArgs<ExtArgs>
  }

  export type $UserContentTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserContentType"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      contentType: Prisma.$ContentTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      contentTypeId: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userContentType"]>
    composites: {}
  }

  type UserContentTypeGetPayload<S extends boolean | null | undefined | UserContentTypeDefaultArgs> = $Result.GetResult<Prisma.$UserContentTypePayload, S>

  type UserContentTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserContentTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserContentTypeCountAggregateInputType | true
    }

  export interface UserContentTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserContentType'], meta: { name: 'UserContentType' } }
    /**
     * Find zero or one UserContentType that matches the filter.
     * @param {UserContentTypeFindUniqueArgs} args - Arguments to find a UserContentType
     * @example
     * // Get one UserContentType
     * const userContentType = await prisma.userContentType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserContentTypeFindUniqueArgs>(args: SelectSubset<T, UserContentTypeFindUniqueArgs<ExtArgs>>): Prisma__UserContentTypeClient<$Result.GetResult<Prisma.$UserContentTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserContentType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserContentTypeFindUniqueOrThrowArgs} args - Arguments to find a UserContentType
     * @example
     * // Get one UserContentType
     * const userContentType = await prisma.userContentType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserContentTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserContentTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserContentTypeClient<$Result.GetResult<Prisma.$UserContentTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserContentType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserContentTypeFindFirstArgs} args - Arguments to find a UserContentType
     * @example
     * // Get one UserContentType
     * const userContentType = await prisma.userContentType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserContentTypeFindFirstArgs>(args?: SelectSubset<T, UserContentTypeFindFirstArgs<ExtArgs>>): Prisma__UserContentTypeClient<$Result.GetResult<Prisma.$UserContentTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserContentType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserContentTypeFindFirstOrThrowArgs} args - Arguments to find a UserContentType
     * @example
     * // Get one UserContentType
     * const userContentType = await prisma.userContentType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserContentTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserContentTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserContentTypeClient<$Result.GetResult<Prisma.$UserContentTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserContentTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserContentTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserContentTypes
     * const userContentTypes = await prisma.userContentType.findMany()
     * 
     * // Get first 10 UserContentTypes
     * const userContentTypes = await prisma.userContentType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userContentTypeWithIdOnly = await prisma.userContentType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserContentTypeFindManyArgs>(args?: SelectSubset<T, UserContentTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserContentTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserContentType.
     * @param {UserContentTypeCreateArgs} args - Arguments to create a UserContentType.
     * @example
     * // Create one UserContentType
     * const UserContentType = await prisma.userContentType.create({
     *   data: {
     *     // ... data to create a UserContentType
     *   }
     * })
     * 
     */
    create<T extends UserContentTypeCreateArgs>(args: SelectSubset<T, UserContentTypeCreateArgs<ExtArgs>>): Prisma__UserContentTypeClient<$Result.GetResult<Prisma.$UserContentTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserContentTypes.
     * @param {UserContentTypeCreateManyArgs} args - Arguments to create many UserContentTypes.
     * @example
     * // Create many UserContentTypes
     * const userContentType = await prisma.userContentType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserContentTypeCreateManyArgs>(args?: SelectSubset<T, UserContentTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserContentTypes and returns the data saved in the database.
     * @param {UserContentTypeCreateManyAndReturnArgs} args - Arguments to create many UserContentTypes.
     * @example
     * // Create many UserContentTypes
     * const userContentType = await prisma.userContentType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserContentTypes and only return the `id`
     * const userContentTypeWithIdOnly = await prisma.userContentType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserContentTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserContentTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserContentTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserContentType.
     * @param {UserContentTypeDeleteArgs} args - Arguments to delete one UserContentType.
     * @example
     * // Delete one UserContentType
     * const UserContentType = await prisma.userContentType.delete({
     *   where: {
     *     // ... filter to delete one UserContentType
     *   }
     * })
     * 
     */
    delete<T extends UserContentTypeDeleteArgs>(args: SelectSubset<T, UserContentTypeDeleteArgs<ExtArgs>>): Prisma__UserContentTypeClient<$Result.GetResult<Prisma.$UserContentTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserContentType.
     * @param {UserContentTypeUpdateArgs} args - Arguments to update one UserContentType.
     * @example
     * // Update one UserContentType
     * const userContentType = await prisma.userContentType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserContentTypeUpdateArgs>(args: SelectSubset<T, UserContentTypeUpdateArgs<ExtArgs>>): Prisma__UserContentTypeClient<$Result.GetResult<Prisma.$UserContentTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserContentTypes.
     * @param {UserContentTypeDeleteManyArgs} args - Arguments to filter UserContentTypes to delete.
     * @example
     * // Delete a few UserContentTypes
     * const { count } = await prisma.userContentType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserContentTypeDeleteManyArgs>(args?: SelectSubset<T, UserContentTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserContentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserContentTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserContentTypes
     * const userContentType = await prisma.userContentType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserContentTypeUpdateManyArgs>(args: SelectSubset<T, UserContentTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserContentType.
     * @param {UserContentTypeUpsertArgs} args - Arguments to update or create a UserContentType.
     * @example
     * // Update or create a UserContentType
     * const userContentType = await prisma.userContentType.upsert({
     *   create: {
     *     // ... data to create a UserContentType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserContentType we want to update
     *   }
     * })
     */
    upsert<T extends UserContentTypeUpsertArgs>(args: SelectSubset<T, UserContentTypeUpsertArgs<ExtArgs>>): Prisma__UserContentTypeClient<$Result.GetResult<Prisma.$UserContentTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserContentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserContentTypeCountArgs} args - Arguments to filter UserContentTypes to count.
     * @example
     * // Count the number of UserContentTypes
     * const count = await prisma.userContentType.count({
     *   where: {
     *     // ... the filter for the UserContentTypes we want to count
     *   }
     * })
    **/
    count<T extends UserContentTypeCountArgs>(
      args?: Subset<T, UserContentTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserContentTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserContentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserContentTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserContentTypeAggregateArgs>(args: Subset<T, UserContentTypeAggregateArgs>): Prisma.PrismaPromise<GetUserContentTypeAggregateType<T>>

    /**
     * Group by UserContentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserContentTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserContentTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserContentTypeGroupByArgs['orderBy'] }
        : { orderBy?: UserContentTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserContentTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserContentTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserContentType model
   */
  readonly fields: UserContentTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserContentType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserContentTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    contentType<T extends ContentTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContentTypeDefaultArgs<ExtArgs>>): Prisma__ContentTypeClient<$Result.GetResult<Prisma.$ContentTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserContentType model
   */ 
  interface UserContentTypeFieldRefs {
    readonly id: FieldRef<"UserContentType", 'String'>
    readonly userId: FieldRef<"UserContentType", 'String'>
    readonly contentTypeId: FieldRef<"UserContentType", 'String'>
    readonly isActive: FieldRef<"UserContentType", 'Boolean'>
    readonly createdAt: FieldRef<"UserContentType", 'DateTime'>
    readonly updatedAt: FieldRef<"UserContentType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserContentType findUnique
   */
  export type UserContentTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which UserContentType to fetch.
     */
    where: UserContentTypeWhereUniqueInput
  }

  /**
   * UserContentType findUniqueOrThrow
   */
  export type UserContentTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which UserContentType to fetch.
     */
    where: UserContentTypeWhereUniqueInput
  }

  /**
   * UserContentType findFirst
   */
  export type UserContentTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which UserContentType to fetch.
     */
    where?: UserContentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserContentTypes to fetch.
     */
    orderBy?: UserContentTypeOrderByWithRelationInput | UserContentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserContentTypes.
     */
    cursor?: UserContentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserContentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserContentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserContentTypes.
     */
    distinct?: UserContentTypeScalarFieldEnum | UserContentTypeScalarFieldEnum[]
  }

  /**
   * UserContentType findFirstOrThrow
   */
  export type UserContentTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which UserContentType to fetch.
     */
    where?: UserContentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserContentTypes to fetch.
     */
    orderBy?: UserContentTypeOrderByWithRelationInput | UserContentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserContentTypes.
     */
    cursor?: UserContentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserContentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserContentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserContentTypes.
     */
    distinct?: UserContentTypeScalarFieldEnum | UserContentTypeScalarFieldEnum[]
  }

  /**
   * UserContentType findMany
   */
  export type UserContentTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which UserContentTypes to fetch.
     */
    where?: UserContentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserContentTypes to fetch.
     */
    orderBy?: UserContentTypeOrderByWithRelationInput | UserContentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserContentTypes.
     */
    cursor?: UserContentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserContentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserContentTypes.
     */
    skip?: number
    distinct?: UserContentTypeScalarFieldEnum | UserContentTypeScalarFieldEnum[]
  }

  /**
   * UserContentType create
   */
  export type UserContentTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserContentType.
     */
    data: XOR<UserContentTypeCreateInput, UserContentTypeUncheckedCreateInput>
  }

  /**
   * UserContentType createMany
   */
  export type UserContentTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserContentTypes.
     */
    data: UserContentTypeCreateManyInput | UserContentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserContentType createManyAndReturn
   */
  export type UserContentTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserContentTypes.
     */
    data: UserContentTypeCreateManyInput | UserContentTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserContentType update
   */
  export type UserContentTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserContentType.
     */
    data: XOR<UserContentTypeUpdateInput, UserContentTypeUncheckedUpdateInput>
    /**
     * Choose, which UserContentType to update.
     */
    where: UserContentTypeWhereUniqueInput
  }

  /**
   * UserContentType updateMany
   */
  export type UserContentTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserContentTypes.
     */
    data: XOR<UserContentTypeUpdateManyMutationInput, UserContentTypeUncheckedUpdateManyInput>
    /**
     * Filter which UserContentTypes to update
     */
    where?: UserContentTypeWhereInput
  }

  /**
   * UserContentType upsert
   */
  export type UserContentTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserContentType to update in case it exists.
     */
    where: UserContentTypeWhereUniqueInput
    /**
     * In case the UserContentType found by the `where` argument doesn't exist, create a new UserContentType with this data.
     */
    create: XOR<UserContentTypeCreateInput, UserContentTypeUncheckedCreateInput>
    /**
     * In case the UserContentType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserContentTypeUpdateInput, UserContentTypeUncheckedUpdateInput>
  }

  /**
   * UserContentType delete
   */
  export type UserContentTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeInclude<ExtArgs> | null
    /**
     * Filter which UserContentType to delete.
     */
    where: UserContentTypeWhereUniqueInput
  }

  /**
   * UserContentType deleteMany
   */
  export type UserContentTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserContentTypes to delete
     */
    where?: UserContentTypeWhereInput
  }

  /**
   * UserContentType without action
   */
  export type UserContentTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserContentType
     */
    select?: UserContentTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserContentTypeInclude<ExtArgs> | null
  }


  /**
   * Model UserInvestorProfile
   */

  export type AggregateUserInvestorProfile = {
    _count: UserInvestorProfileCountAggregateOutputType | null
    _min: UserInvestorProfileMinAggregateOutputType | null
    _max: UserInvestorProfileMaxAggregateOutputType | null
  }

  export type UserInvestorProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    investorType: string | null
    riskTolerance: string | null
    investmentHorizon: string | null
    experienceLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserInvestorProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    investorType: string | null
    riskTolerance: string | null
    investmentHorizon: string | null
    experienceLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserInvestorProfileCountAggregateOutputType = {
    id: number
    userId: number
    investorType: number
    riskTolerance: number
    investmentHorizon: number
    experienceLevel: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserInvestorProfileMinAggregateInputType = {
    id?: true
    userId?: true
    investorType?: true
    riskTolerance?: true
    investmentHorizon?: true
    experienceLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserInvestorProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    investorType?: true
    riskTolerance?: true
    investmentHorizon?: true
    experienceLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserInvestorProfileCountAggregateInputType = {
    id?: true
    userId?: true
    investorType?: true
    riskTolerance?: true
    investmentHorizon?: true
    experienceLevel?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserInvestorProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInvestorProfile to aggregate.
     */
    where?: UserInvestorProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvestorProfiles to fetch.
     */
    orderBy?: UserInvestorProfileOrderByWithRelationInput | UserInvestorProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserInvestorProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvestorProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvestorProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserInvestorProfiles
    **/
    _count?: true | UserInvestorProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserInvestorProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserInvestorProfileMaxAggregateInputType
  }

  export type GetUserInvestorProfileAggregateType<T extends UserInvestorProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserInvestorProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserInvestorProfile[P]>
      : GetScalarType<T[P], AggregateUserInvestorProfile[P]>
  }




  export type UserInvestorProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInvestorProfileWhereInput
    orderBy?: UserInvestorProfileOrderByWithAggregationInput | UserInvestorProfileOrderByWithAggregationInput[]
    by: UserInvestorProfileScalarFieldEnum[] | UserInvestorProfileScalarFieldEnum
    having?: UserInvestorProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserInvestorProfileCountAggregateInputType | true
    _min?: UserInvestorProfileMinAggregateInputType
    _max?: UserInvestorProfileMaxAggregateInputType
  }

  export type UserInvestorProfileGroupByOutputType = {
    id: string
    userId: string
    investorType: string
    riskTolerance: string | null
    investmentHorizon: string | null
    experienceLevel: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserInvestorProfileCountAggregateOutputType | null
    _min: UserInvestorProfileMinAggregateOutputType | null
    _max: UserInvestorProfileMaxAggregateOutputType | null
  }

  type GetUserInvestorProfileGroupByPayload<T extends UserInvestorProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserInvestorProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserInvestorProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserInvestorProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserInvestorProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserInvestorProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    investorType?: boolean
    riskTolerance?: boolean
    investmentHorizon?: boolean
    experienceLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userInvestorProfile"]>

  export type UserInvestorProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    investorType?: boolean
    riskTolerance?: boolean
    investmentHorizon?: boolean
    experienceLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userInvestorProfile"]>

  export type UserInvestorProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    investorType?: boolean
    riskTolerance?: boolean
    investmentHorizon?: boolean
    experienceLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInvestorProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserInvestorProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserInvestorProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserInvestorProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      investorType: string
      riskTolerance: string | null
      investmentHorizon: string | null
      experienceLevel: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userInvestorProfile"]>
    composites: {}
  }

  type UserInvestorProfileGetPayload<S extends boolean | null | undefined | UserInvestorProfileDefaultArgs> = $Result.GetResult<Prisma.$UserInvestorProfilePayload, S>

  type UserInvestorProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserInvestorProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserInvestorProfileCountAggregateInputType | true
    }

  export interface UserInvestorProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserInvestorProfile'], meta: { name: 'UserInvestorProfile' } }
    /**
     * Find zero or one UserInvestorProfile that matches the filter.
     * @param {UserInvestorProfileFindUniqueArgs} args - Arguments to find a UserInvestorProfile
     * @example
     * // Get one UserInvestorProfile
     * const userInvestorProfile = await prisma.userInvestorProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserInvestorProfileFindUniqueArgs>(args: SelectSubset<T, UserInvestorProfileFindUniqueArgs<ExtArgs>>): Prisma__UserInvestorProfileClient<$Result.GetResult<Prisma.$UserInvestorProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserInvestorProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserInvestorProfileFindUniqueOrThrowArgs} args - Arguments to find a UserInvestorProfile
     * @example
     * // Get one UserInvestorProfile
     * const userInvestorProfile = await prisma.userInvestorProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserInvestorProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserInvestorProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserInvestorProfileClient<$Result.GetResult<Prisma.$UserInvestorProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserInvestorProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvestorProfileFindFirstArgs} args - Arguments to find a UserInvestorProfile
     * @example
     * // Get one UserInvestorProfile
     * const userInvestorProfile = await prisma.userInvestorProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserInvestorProfileFindFirstArgs>(args?: SelectSubset<T, UserInvestorProfileFindFirstArgs<ExtArgs>>): Prisma__UserInvestorProfileClient<$Result.GetResult<Prisma.$UserInvestorProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserInvestorProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvestorProfileFindFirstOrThrowArgs} args - Arguments to find a UserInvestorProfile
     * @example
     * // Get one UserInvestorProfile
     * const userInvestorProfile = await prisma.userInvestorProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserInvestorProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserInvestorProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserInvestorProfileClient<$Result.GetResult<Prisma.$UserInvestorProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserInvestorProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvestorProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserInvestorProfiles
     * const userInvestorProfiles = await prisma.userInvestorProfile.findMany()
     * 
     * // Get first 10 UserInvestorProfiles
     * const userInvestorProfiles = await prisma.userInvestorProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userInvestorProfileWithIdOnly = await prisma.userInvestorProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserInvestorProfileFindManyArgs>(args?: SelectSubset<T, UserInvestorProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvestorProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserInvestorProfile.
     * @param {UserInvestorProfileCreateArgs} args - Arguments to create a UserInvestorProfile.
     * @example
     * // Create one UserInvestorProfile
     * const UserInvestorProfile = await prisma.userInvestorProfile.create({
     *   data: {
     *     // ... data to create a UserInvestorProfile
     *   }
     * })
     * 
     */
    create<T extends UserInvestorProfileCreateArgs>(args: SelectSubset<T, UserInvestorProfileCreateArgs<ExtArgs>>): Prisma__UserInvestorProfileClient<$Result.GetResult<Prisma.$UserInvestorProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserInvestorProfiles.
     * @param {UserInvestorProfileCreateManyArgs} args - Arguments to create many UserInvestorProfiles.
     * @example
     * // Create many UserInvestorProfiles
     * const userInvestorProfile = await prisma.userInvestorProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserInvestorProfileCreateManyArgs>(args?: SelectSubset<T, UserInvestorProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserInvestorProfiles and returns the data saved in the database.
     * @param {UserInvestorProfileCreateManyAndReturnArgs} args - Arguments to create many UserInvestorProfiles.
     * @example
     * // Create many UserInvestorProfiles
     * const userInvestorProfile = await prisma.userInvestorProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserInvestorProfiles and only return the `id`
     * const userInvestorProfileWithIdOnly = await prisma.userInvestorProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserInvestorProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserInvestorProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvestorProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserInvestorProfile.
     * @param {UserInvestorProfileDeleteArgs} args - Arguments to delete one UserInvestorProfile.
     * @example
     * // Delete one UserInvestorProfile
     * const UserInvestorProfile = await prisma.userInvestorProfile.delete({
     *   where: {
     *     // ... filter to delete one UserInvestorProfile
     *   }
     * })
     * 
     */
    delete<T extends UserInvestorProfileDeleteArgs>(args: SelectSubset<T, UserInvestorProfileDeleteArgs<ExtArgs>>): Prisma__UserInvestorProfileClient<$Result.GetResult<Prisma.$UserInvestorProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserInvestorProfile.
     * @param {UserInvestorProfileUpdateArgs} args - Arguments to update one UserInvestorProfile.
     * @example
     * // Update one UserInvestorProfile
     * const userInvestorProfile = await prisma.userInvestorProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserInvestorProfileUpdateArgs>(args: SelectSubset<T, UserInvestorProfileUpdateArgs<ExtArgs>>): Prisma__UserInvestorProfileClient<$Result.GetResult<Prisma.$UserInvestorProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserInvestorProfiles.
     * @param {UserInvestorProfileDeleteManyArgs} args - Arguments to filter UserInvestorProfiles to delete.
     * @example
     * // Delete a few UserInvestorProfiles
     * const { count } = await prisma.userInvestorProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserInvestorProfileDeleteManyArgs>(args?: SelectSubset<T, UserInvestorProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserInvestorProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvestorProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserInvestorProfiles
     * const userInvestorProfile = await prisma.userInvestorProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserInvestorProfileUpdateManyArgs>(args: SelectSubset<T, UserInvestorProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserInvestorProfile.
     * @param {UserInvestorProfileUpsertArgs} args - Arguments to update or create a UserInvestorProfile.
     * @example
     * // Update or create a UserInvestorProfile
     * const userInvestorProfile = await prisma.userInvestorProfile.upsert({
     *   create: {
     *     // ... data to create a UserInvestorProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserInvestorProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserInvestorProfileUpsertArgs>(args: SelectSubset<T, UserInvestorProfileUpsertArgs<ExtArgs>>): Prisma__UserInvestorProfileClient<$Result.GetResult<Prisma.$UserInvestorProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserInvestorProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvestorProfileCountArgs} args - Arguments to filter UserInvestorProfiles to count.
     * @example
     * // Count the number of UserInvestorProfiles
     * const count = await prisma.userInvestorProfile.count({
     *   where: {
     *     // ... the filter for the UserInvestorProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserInvestorProfileCountArgs>(
      args?: Subset<T, UserInvestorProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserInvestorProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserInvestorProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvestorProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserInvestorProfileAggregateArgs>(args: Subset<T, UserInvestorProfileAggregateArgs>): Prisma.PrismaPromise<GetUserInvestorProfileAggregateType<T>>

    /**
     * Group by UserInvestorProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvestorProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserInvestorProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserInvestorProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserInvestorProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserInvestorProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserInvestorProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserInvestorProfile model
   */
  readonly fields: UserInvestorProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserInvestorProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserInvestorProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserInvestorProfile model
   */ 
  interface UserInvestorProfileFieldRefs {
    readonly id: FieldRef<"UserInvestorProfile", 'String'>
    readonly userId: FieldRef<"UserInvestorProfile", 'String'>
    readonly investorType: FieldRef<"UserInvestorProfile", 'String'>
    readonly riskTolerance: FieldRef<"UserInvestorProfile", 'String'>
    readonly investmentHorizon: FieldRef<"UserInvestorProfile", 'String'>
    readonly experienceLevel: FieldRef<"UserInvestorProfile", 'String'>
    readonly createdAt: FieldRef<"UserInvestorProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserInvestorProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserInvestorProfile findUnique
   */
  export type UserInvestorProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvestorProfile
     */
    select?: UserInvestorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvestorProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserInvestorProfile to fetch.
     */
    where: UserInvestorProfileWhereUniqueInput
  }

  /**
   * UserInvestorProfile findUniqueOrThrow
   */
  export type UserInvestorProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvestorProfile
     */
    select?: UserInvestorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvestorProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserInvestorProfile to fetch.
     */
    where: UserInvestorProfileWhereUniqueInput
  }

  /**
   * UserInvestorProfile findFirst
   */
  export type UserInvestorProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvestorProfile
     */
    select?: UserInvestorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvestorProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserInvestorProfile to fetch.
     */
    where?: UserInvestorProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvestorProfiles to fetch.
     */
    orderBy?: UserInvestorProfileOrderByWithRelationInput | UserInvestorProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInvestorProfiles.
     */
    cursor?: UserInvestorProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvestorProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvestorProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInvestorProfiles.
     */
    distinct?: UserInvestorProfileScalarFieldEnum | UserInvestorProfileScalarFieldEnum[]
  }

  /**
   * UserInvestorProfile findFirstOrThrow
   */
  export type UserInvestorProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvestorProfile
     */
    select?: UserInvestorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvestorProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserInvestorProfile to fetch.
     */
    where?: UserInvestorProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvestorProfiles to fetch.
     */
    orderBy?: UserInvestorProfileOrderByWithRelationInput | UserInvestorProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInvestorProfiles.
     */
    cursor?: UserInvestorProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvestorProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvestorProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInvestorProfiles.
     */
    distinct?: UserInvestorProfileScalarFieldEnum | UserInvestorProfileScalarFieldEnum[]
  }

  /**
   * UserInvestorProfile findMany
   */
  export type UserInvestorProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvestorProfile
     */
    select?: UserInvestorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvestorProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserInvestorProfiles to fetch.
     */
    where?: UserInvestorProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvestorProfiles to fetch.
     */
    orderBy?: UserInvestorProfileOrderByWithRelationInput | UserInvestorProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserInvestorProfiles.
     */
    cursor?: UserInvestorProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvestorProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvestorProfiles.
     */
    skip?: number
    distinct?: UserInvestorProfileScalarFieldEnum | UserInvestorProfileScalarFieldEnum[]
  }

  /**
   * UserInvestorProfile create
   */
  export type UserInvestorProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvestorProfile
     */
    select?: UserInvestorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvestorProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserInvestorProfile.
     */
    data: XOR<UserInvestorProfileCreateInput, UserInvestorProfileUncheckedCreateInput>
  }

  /**
   * UserInvestorProfile createMany
   */
  export type UserInvestorProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserInvestorProfiles.
     */
    data: UserInvestorProfileCreateManyInput | UserInvestorProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserInvestorProfile createManyAndReturn
   */
  export type UserInvestorProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvestorProfile
     */
    select?: UserInvestorProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserInvestorProfiles.
     */
    data: UserInvestorProfileCreateManyInput | UserInvestorProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvestorProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserInvestorProfile update
   */
  export type UserInvestorProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvestorProfile
     */
    select?: UserInvestorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvestorProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserInvestorProfile.
     */
    data: XOR<UserInvestorProfileUpdateInput, UserInvestorProfileUncheckedUpdateInput>
    /**
     * Choose, which UserInvestorProfile to update.
     */
    where: UserInvestorProfileWhereUniqueInput
  }

  /**
   * UserInvestorProfile updateMany
   */
  export type UserInvestorProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserInvestorProfiles.
     */
    data: XOR<UserInvestorProfileUpdateManyMutationInput, UserInvestorProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserInvestorProfiles to update
     */
    where?: UserInvestorProfileWhereInput
  }

  /**
   * UserInvestorProfile upsert
   */
  export type UserInvestorProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvestorProfile
     */
    select?: UserInvestorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvestorProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserInvestorProfile to update in case it exists.
     */
    where: UserInvestorProfileWhereUniqueInput
    /**
     * In case the UserInvestorProfile found by the `where` argument doesn't exist, create a new UserInvestorProfile with this data.
     */
    create: XOR<UserInvestorProfileCreateInput, UserInvestorProfileUncheckedCreateInput>
    /**
     * In case the UserInvestorProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserInvestorProfileUpdateInput, UserInvestorProfileUncheckedUpdateInput>
  }

  /**
   * UserInvestorProfile delete
   */
  export type UserInvestorProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvestorProfile
     */
    select?: UserInvestorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvestorProfileInclude<ExtArgs> | null
    /**
     * Filter which UserInvestorProfile to delete.
     */
    where: UserInvestorProfileWhereUniqueInput
  }

  /**
   * UserInvestorProfile deleteMany
   */
  export type UserInvestorProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInvestorProfiles to delete
     */
    where?: UserInvestorProfileWhereInput
  }

  /**
   * UserInvestorProfile without action
   */
  export type UserInvestorProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvestorProfile
     */
    select?: UserInvestorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvestorProfileInclude<ExtArgs> | null
  }


  /**
   * Model NewsItem
   */

  export type AggregateNewsItem = {
    _count: NewsItemCountAggregateOutputType | null
    _avg: NewsItemAvgAggregateOutputType | null
    _sum: NewsItemSumAggregateOutputType | null
    _min: NewsItemMinAggregateOutputType | null
    _max: NewsItemMaxAggregateOutputType | null
  }

  export type NewsItemAvgAggregateOutputType = {
    relevanceScore: number | null
  }

  export type NewsItemSumAggregateOutputType = {
    relevanceScore: number | null
  }

  export type NewsItemMinAggregateOutputType = {
    id: string | null
    title: string | null
    summary: string | null
    url: string | null
    source: string | null
    publishedAt: Date | null
    category: string | null
    sentiment: string | null
    relevanceScore: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NewsItemMaxAggregateOutputType = {
    id: string | null
    title: string | null
    summary: string | null
    url: string | null
    source: string | null
    publishedAt: Date | null
    category: string | null
    sentiment: string | null
    relevanceScore: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NewsItemCountAggregateOutputType = {
    id: number
    title: number
    summary: number
    url: number
    source: number
    publishedAt: number
    category: number
    sentiment: number
    relevanceScore: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NewsItemAvgAggregateInputType = {
    relevanceScore?: true
  }

  export type NewsItemSumAggregateInputType = {
    relevanceScore?: true
  }

  export type NewsItemMinAggregateInputType = {
    id?: true
    title?: true
    summary?: true
    url?: true
    source?: true
    publishedAt?: true
    category?: true
    sentiment?: true
    relevanceScore?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NewsItemMaxAggregateInputType = {
    id?: true
    title?: true
    summary?: true
    url?: true
    source?: true
    publishedAt?: true
    category?: true
    sentiment?: true
    relevanceScore?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NewsItemCountAggregateInputType = {
    id?: true
    title?: true
    summary?: true
    url?: true
    source?: true
    publishedAt?: true
    category?: true
    sentiment?: true
    relevanceScore?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NewsItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewsItem to aggregate.
     */
    where?: NewsItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsItems to fetch.
     */
    orderBy?: NewsItemOrderByWithRelationInput | NewsItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NewsItems
    **/
    _count?: true | NewsItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsItemMaxAggregateInputType
  }

  export type GetNewsItemAggregateType<T extends NewsItemAggregateArgs> = {
        [P in keyof T & keyof AggregateNewsItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewsItem[P]>
      : GetScalarType<T[P], AggregateNewsItem[P]>
  }




  export type NewsItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsItemWhereInput
    orderBy?: NewsItemOrderByWithAggregationInput | NewsItemOrderByWithAggregationInput[]
    by: NewsItemScalarFieldEnum[] | NewsItemScalarFieldEnum
    having?: NewsItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsItemCountAggregateInputType | true
    _avg?: NewsItemAvgAggregateInputType
    _sum?: NewsItemSumAggregateInputType
    _min?: NewsItemMinAggregateInputType
    _max?: NewsItemMaxAggregateInputType
  }

  export type NewsItemGroupByOutputType = {
    id: string
    title: string
    summary: string
    url: string
    source: string
    publishedAt: Date
    category: string | null
    sentiment: string | null
    relevanceScore: number | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: NewsItemCountAggregateOutputType | null
    _avg: NewsItemAvgAggregateOutputType | null
    _sum: NewsItemSumAggregateOutputType | null
    _min: NewsItemMinAggregateOutputType | null
    _max: NewsItemMaxAggregateOutputType | null
  }

  type GetNewsItemGroupByPayload<T extends NewsItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsItemGroupByOutputType[P]>
            : GetScalarType<T[P], NewsItemGroupByOutputType[P]>
        }
      >
    >


  export type NewsItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    summary?: boolean
    url?: boolean
    source?: boolean
    publishedAt?: boolean
    category?: boolean
    sentiment?: boolean
    relevanceScore?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["newsItem"]>

  export type NewsItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    summary?: boolean
    url?: boolean
    source?: boolean
    publishedAt?: boolean
    category?: boolean
    sentiment?: boolean
    relevanceScore?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["newsItem"]>

  export type NewsItemSelectScalar = {
    id?: boolean
    title?: boolean
    summary?: boolean
    url?: boolean
    source?: boolean
    publishedAt?: boolean
    category?: boolean
    sentiment?: boolean
    relevanceScore?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $NewsItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NewsItem"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      summary: string
      url: string
      source: string
      publishedAt: Date
      category: string | null
      sentiment: string | null
      relevanceScore: number | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["newsItem"]>
    composites: {}
  }

  type NewsItemGetPayload<S extends boolean | null | undefined | NewsItemDefaultArgs> = $Result.GetResult<Prisma.$NewsItemPayload, S>

  type NewsItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NewsItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NewsItemCountAggregateInputType | true
    }

  export interface NewsItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NewsItem'], meta: { name: 'NewsItem' } }
    /**
     * Find zero or one NewsItem that matches the filter.
     * @param {NewsItemFindUniqueArgs} args - Arguments to find a NewsItem
     * @example
     * // Get one NewsItem
     * const newsItem = await prisma.newsItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NewsItemFindUniqueArgs>(args: SelectSubset<T, NewsItemFindUniqueArgs<ExtArgs>>): Prisma__NewsItemClient<$Result.GetResult<Prisma.$NewsItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NewsItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NewsItemFindUniqueOrThrowArgs} args - Arguments to find a NewsItem
     * @example
     * // Get one NewsItem
     * const newsItem = await prisma.newsItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NewsItemFindUniqueOrThrowArgs>(args: SelectSubset<T, NewsItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NewsItemClient<$Result.GetResult<Prisma.$NewsItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NewsItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsItemFindFirstArgs} args - Arguments to find a NewsItem
     * @example
     * // Get one NewsItem
     * const newsItem = await prisma.newsItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NewsItemFindFirstArgs>(args?: SelectSubset<T, NewsItemFindFirstArgs<ExtArgs>>): Prisma__NewsItemClient<$Result.GetResult<Prisma.$NewsItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NewsItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsItemFindFirstOrThrowArgs} args - Arguments to find a NewsItem
     * @example
     * // Get one NewsItem
     * const newsItem = await prisma.newsItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NewsItemFindFirstOrThrowArgs>(args?: SelectSubset<T, NewsItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__NewsItemClient<$Result.GetResult<Prisma.$NewsItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NewsItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NewsItems
     * const newsItems = await prisma.newsItem.findMany()
     * 
     * // Get first 10 NewsItems
     * const newsItems = await prisma.newsItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsItemWithIdOnly = await prisma.newsItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NewsItemFindManyArgs>(args?: SelectSubset<T, NewsItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NewsItem.
     * @param {NewsItemCreateArgs} args - Arguments to create a NewsItem.
     * @example
     * // Create one NewsItem
     * const NewsItem = await prisma.newsItem.create({
     *   data: {
     *     // ... data to create a NewsItem
     *   }
     * })
     * 
     */
    create<T extends NewsItemCreateArgs>(args: SelectSubset<T, NewsItemCreateArgs<ExtArgs>>): Prisma__NewsItemClient<$Result.GetResult<Prisma.$NewsItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NewsItems.
     * @param {NewsItemCreateManyArgs} args - Arguments to create many NewsItems.
     * @example
     * // Create many NewsItems
     * const newsItem = await prisma.newsItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NewsItemCreateManyArgs>(args?: SelectSubset<T, NewsItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NewsItems and returns the data saved in the database.
     * @param {NewsItemCreateManyAndReturnArgs} args - Arguments to create many NewsItems.
     * @example
     * // Create many NewsItems
     * const newsItem = await prisma.newsItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NewsItems and only return the `id`
     * const newsItemWithIdOnly = await prisma.newsItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NewsItemCreateManyAndReturnArgs>(args?: SelectSubset<T, NewsItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a NewsItem.
     * @param {NewsItemDeleteArgs} args - Arguments to delete one NewsItem.
     * @example
     * // Delete one NewsItem
     * const NewsItem = await prisma.newsItem.delete({
     *   where: {
     *     // ... filter to delete one NewsItem
     *   }
     * })
     * 
     */
    delete<T extends NewsItemDeleteArgs>(args: SelectSubset<T, NewsItemDeleteArgs<ExtArgs>>): Prisma__NewsItemClient<$Result.GetResult<Prisma.$NewsItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NewsItem.
     * @param {NewsItemUpdateArgs} args - Arguments to update one NewsItem.
     * @example
     * // Update one NewsItem
     * const newsItem = await prisma.newsItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NewsItemUpdateArgs>(args: SelectSubset<T, NewsItemUpdateArgs<ExtArgs>>): Prisma__NewsItemClient<$Result.GetResult<Prisma.$NewsItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NewsItems.
     * @param {NewsItemDeleteManyArgs} args - Arguments to filter NewsItems to delete.
     * @example
     * // Delete a few NewsItems
     * const { count } = await prisma.newsItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NewsItemDeleteManyArgs>(args?: SelectSubset<T, NewsItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NewsItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NewsItems
     * const newsItem = await prisma.newsItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NewsItemUpdateManyArgs>(args: SelectSubset<T, NewsItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NewsItem.
     * @param {NewsItemUpsertArgs} args - Arguments to update or create a NewsItem.
     * @example
     * // Update or create a NewsItem
     * const newsItem = await prisma.newsItem.upsert({
     *   create: {
     *     // ... data to create a NewsItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NewsItem we want to update
     *   }
     * })
     */
    upsert<T extends NewsItemUpsertArgs>(args: SelectSubset<T, NewsItemUpsertArgs<ExtArgs>>): Prisma__NewsItemClient<$Result.GetResult<Prisma.$NewsItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NewsItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsItemCountArgs} args - Arguments to filter NewsItems to count.
     * @example
     * // Count the number of NewsItems
     * const count = await prisma.newsItem.count({
     *   where: {
     *     // ... the filter for the NewsItems we want to count
     *   }
     * })
    **/
    count<T extends NewsItemCountArgs>(
      args?: Subset<T, NewsItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NewsItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsItemAggregateArgs>(args: Subset<T, NewsItemAggregateArgs>): Prisma.PrismaPromise<GetNewsItemAggregateType<T>>

    /**
     * Group by NewsItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsItemGroupByArgs['orderBy'] }
        : { orderBy?: NewsItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NewsItem model
   */
  readonly fields: NewsItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NewsItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewsItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NewsItem model
   */ 
  interface NewsItemFieldRefs {
    readonly id: FieldRef<"NewsItem", 'String'>
    readonly title: FieldRef<"NewsItem", 'String'>
    readonly summary: FieldRef<"NewsItem", 'String'>
    readonly url: FieldRef<"NewsItem", 'String'>
    readonly source: FieldRef<"NewsItem", 'String'>
    readonly publishedAt: FieldRef<"NewsItem", 'DateTime'>
    readonly category: FieldRef<"NewsItem", 'String'>
    readonly sentiment: FieldRef<"NewsItem", 'String'>
    readonly relevanceScore: FieldRef<"NewsItem", 'Float'>
    readonly isActive: FieldRef<"NewsItem", 'Boolean'>
    readonly createdAt: FieldRef<"NewsItem", 'DateTime'>
    readonly updatedAt: FieldRef<"NewsItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NewsItem findUnique
   */
  export type NewsItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsItem
     */
    select?: NewsItemSelect<ExtArgs> | null
    /**
     * Filter, which NewsItem to fetch.
     */
    where: NewsItemWhereUniqueInput
  }

  /**
   * NewsItem findUniqueOrThrow
   */
  export type NewsItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsItem
     */
    select?: NewsItemSelect<ExtArgs> | null
    /**
     * Filter, which NewsItem to fetch.
     */
    where: NewsItemWhereUniqueInput
  }

  /**
   * NewsItem findFirst
   */
  export type NewsItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsItem
     */
    select?: NewsItemSelect<ExtArgs> | null
    /**
     * Filter, which NewsItem to fetch.
     */
    where?: NewsItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsItems to fetch.
     */
    orderBy?: NewsItemOrderByWithRelationInput | NewsItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewsItems.
     */
    cursor?: NewsItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewsItems.
     */
    distinct?: NewsItemScalarFieldEnum | NewsItemScalarFieldEnum[]
  }

  /**
   * NewsItem findFirstOrThrow
   */
  export type NewsItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsItem
     */
    select?: NewsItemSelect<ExtArgs> | null
    /**
     * Filter, which NewsItem to fetch.
     */
    where?: NewsItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsItems to fetch.
     */
    orderBy?: NewsItemOrderByWithRelationInput | NewsItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewsItems.
     */
    cursor?: NewsItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewsItems.
     */
    distinct?: NewsItemScalarFieldEnum | NewsItemScalarFieldEnum[]
  }

  /**
   * NewsItem findMany
   */
  export type NewsItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsItem
     */
    select?: NewsItemSelect<ExtArgs> | null
    /**
     * Filter, which NewsItems to fetch.
     */
    where?: NewsItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsItems to fetch.
     */
    orderBy?: NewsItemOrderByWithRelationInput | NewsItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NewsItems.
     */
    cursor?: NewsItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsItems.
     */
    skip?: number
    distinct?: NewsItemScalarFieldEnum | NewsItemScalarFieldEnum[]
  }

  /**
   * NewsItem create
   */
  export type NewsItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsItem
     */
    select?: NewsItemSelect<ExtArgs> | null
    /**
     * The data needed to create a NewsItem.
     */
    data: XOR<NewsItemCreateInput, NewsItemUncheckedCreateInput>
  }

  /**
   * NewsItem createMany
   */
  export type NewsItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NewsItems.
     */
    data: NewsItemCreateManyInput | NewsItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NewsItem createManyAndReturn
   */
  export type NewsItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsItem
     */
    select?: NewsItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NewsItems.
     */
    data: NewsItemCreateManyInput | NewsItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NewsItem update
   */
  export type NewsItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsItem
     */
    select?: NewsItemSelect<ExtArgs> | null
    /**
     * The data needed to update a NewsItem.
     */
    data: XOR<NewsItemUpdateInput, NewsItemUncheckedUpdateInput>
    /**
     * Choose, which NewsItem to update.
     */
    where: NewsItemWhereUniqueInput
  }

  /**
   * NewsItem updateMany
   */
  export type NewsItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NewsItems.
     */
    data: XOR<NewsItemUpdateManyMutationInput, NewsItemUncheckedUpdateManyInput>
    /**
     * Filter which NewsItems to update
     */
    where?: NewsItemWhereInput
  }

  /**
   * NewsItem upsert
   */
  export type NewsItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsItem
     */
    select?: NewsItemSelect<ExtArgs> | null
    /**
     * The filter to search for the NewsItem to update in case it exists.
     */
    where: NewsItemWhereUniqueInput
    /**
     * In case the NewsItem found by the `where` argument doesn't exist, create a new NewsItem with this data.
     */
    create: XOR<NewsItemCreateInput, NewsItemUncheckedCreateInput>
    /**
     * In case the NewsItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsItemUpdateInput, NewsItemUncheckedUpdateInput>
  }

  /**
   * NewsItem delete
   */
  export type NewsItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsItem
     */
    select?: NewsItemSelect<ExtArgs> | null
    /**
     * Filter which NewsItem to delete.
     */
    where: NewsItemWhereUniqueInput
  }

  /**
   * NewsItem deleteMany
   */
  export type NewsItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewsItems to delete
     */
    where?: NewsItemWhereInput
  }

  /**
   * NewsItem without action
   */
  export type NewsItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsItem
     */
    select?: NewsItemSelect<ExtArgs> | null
  }


  /**
   * Model Meme
   */

  export type AggregateMeme = {
    _count: MemeCountAggregateOutputType | null
    _min: MemeMinAggregateOutputType | null
    _max: MemeMaxAggregateOutputType | null
  }

  export type MemeMinAggregateOutputType = {
    id: string | null
    title: string | null
    imageUrl: string | null
    caption: string | null
    source: string | null
    isActive: boolean | null
    featuredDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MemeMaxAggregateOutputType = {
    id: string | null
    title: string | null
    imageUrl: string | null
    caption: string | null
    source: string | null
    isActive: boolean | null
    featuredDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MemeCountAggregateOutputType = {
    id: number
    title: number
    imageUrl: number
    caption: number
    source: number
    tags: number
    isActive: number
    featuredDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MemeMinAggregateInputType = {
    id?: true
    title?: true
    imageUrl?: true
    caption?: true
    source?: true
    isActive?: true
    featuredDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MemeMaxAggregateInputType = {
    id?: true
    title?: true
    imageUrl?: true
    caption?: true
    source?: true
    isActive?: true
    featuredDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MemeCountAggregateInputType = {
    id?: true
    title?: true
    imageUrl?: true
    caption?: true
    source?: true
    tags?: true
    isActive?: true
    featuredDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meme to aggregate.
     */
    where?: MemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memes to fetch.
     */
    orderBy?: MemeOrderByWithRelationInput | MemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Memes
    **/
    _count?: true | MemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemeMaxAggregateInputType
  }

  export type GetMemeAggregateType<T extends MemeAggregateArgs> = {
        [P in keyof T & keyof AggregateMeme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeme[P]>
      : GetScalarType<T[P], AggregateMeme[P]>
  }




  export type MemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemeWhereInput
    orderBy?: MemeOrderByWithAggregationInput | MemeOrderByWithAggregationInput[]
    by: MemeScalarFieldEnum[] | MemeScalarFieldEnum
    having?: MemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemeCountAggregateInputType | true
    _min?: MemeMinAggregateInputType
    _max?: MemeMaxAggregateInputType
  }

  export type MemeGroupByOutputType = {
    id: string
    title: string
    imageUrl: string
    caption: string
    source: string
    tags: string[]
    isActive: boolean
    featuredDate: Date
    createdAt: Date
    updatedAt: Date
    _count: MemeCountAggregateOutputType | null
    _min: MemeMinAggregateOutputType | null
    _max: MemeMaxAggregateOutputType | null
  }

  type GetMemeGroupByPayload<T extends MemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemeGroupByOutputType[P]>
            : GetScalarType<T[P], MemeGroupByOutputType[P]>
        }
      >
    >


  export type MemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    imageUrl?: boolean
    caption?: boolean
    source?: boolean
    tags?: boolean
    isActive?: boolean
    featuredDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["meme"]>

  export type MemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    imageUrl?: boolean
    caption?: boolean
    source?: boolean
    tags?: boolean
    isActive?: boolean
    featuredDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["meme"]>

  export type MemeSelectScalar = {
    id?: boolean
    title?: boolean
    imageUrl?: boolean
    caption?: boolean
    source?: boolean
    tags?: boolean
    isActive?: boolean
    featuredDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $MemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Meme"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      imageUrl: string
      caption: string
      source: string
      tags: string[]
      isActive: boolean
      featuredDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["meme"]>
    composites: {}
  }

  type MemeGetPayload<S extends boolean | null | undefined | MemeDefaultArgs> = $Result.GetResult<Prisma.$MemePayload, S>

  type MemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MemeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MemeCountAggregateInputType | true
    }

  export interface MemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Meme'], meta: { name: 'Meme' } }
    /**
     * Find zero or one Meme that matches the filter.
     * @param {MemeFindUniqueArgs} args - Arguments to find a Meme
     * @example
     * // Get one Meme
     * const meme = await prisma.meme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MemeFindUniqueArgs>(args: SelectSubset<T, MemeFindUniqueArgs<ExtArgs>>): Prisma__MemeClient<$Result.GetResult<Prisma.$MemePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Meme that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MemeFindUniqueOrThrowArgs} args - Arguments to find a Meme
     * @example
     * // Get one Meme
     * const meme = await prisma.meme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MemeFindUniqueOrThrowArgs>(args: SelectSubset<T, MemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemeClient<$Result.GetResult<Prisma.$MemePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Meme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemeFindFirstArgs} args - Arguments to find a Meme
     * @example
     * // Get one Meme
     * const meme = await prisma.meme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MemeFindFirstArgs>(args?: SelectSubset<T, MemeFindFirstArgs<ExtArgs>>): Prisma__MemeClient<$Result.GetResult<Prisma.$MemePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Meme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemeFindFirstOrThrowArgs} args - Arguments to find a Meme
     * @example
     * // Get one Meme
     * const meme = await prisma.meme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MemeFindFirstOrThrowArgs>(args?: SelectSubset<T, MemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemeClient<$Result.GetResult<Prisma.$MemePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Memes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Memes
     * const memes = await prisma.meme.findMany()
     * 
     * // Get first 10 Memes
     * const memes = await prisma.meme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memeWithIdOnly = await prisma.meme.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MemeFindManyArgs>(args?: SelectSubset<T, MemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Meme.
     * @param {MemeCreateArgs} args - Arguments to create a Meme.
     * @example
     * // Create one Meme
     * const Meme = await prisma.meme.create({
     *   data: {
     *     // ... data to create a Meme
     *   }
     * })
     * 
     */
    create<T extends MemeCreateArgs>(args: SelectSubset<T, MemeCreateArgs<ExtArgs>>): Prisma__MemeClient<$Result.GetResult<Prisma.$MemePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Memes.
     * @param {MemeCreateManyArgs} args - Arguments to create many Memes.
     * @example
     * // Create many Memes
     * const meme = await prisma.meme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MemeCreateManyArgs>(args?: SelectSubset<T, MemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Memes and returns the data saved in the database.
     * @param {MemeCreateManyAndReturnArgs} args - Arguments to create many Memes.
     * @example
     * // Create many Memes
     * const meme = await prisma.meme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Memes and only return the `id`
     * const memeWithIdOnly = await prisma.meme.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MemeCreateManyAndReturnArgs>(args?: SelectSubset<T, MemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Meme.
     * @param {MemeDeleteArgs} args - Arguments to delete one Meme.
     * @example
     * // Delete one Meme
     * const Meme = await prisma.meme.delete({
     *   where: {
     *     // ... filter to delete one Meme
     *   }
     * })
     * 
     */
    delete<T extends MemeDeleteArgs>(args: SelectSubset<T, MemeDeleteArgs<ExtArgs>>): Prisma__MemeClient<$Result.GetResult<Prisma.$MemePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Meme.
     * @param {MemeUpdateArgs} args - Arguments to update one Meme.
     * @example
     * // Update one Meme
     * const meme = await prisma.meme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MemeUpdateArgs>(args: SelectSubset<T, MemeUpdateArgs<ExtArgs>>): Prisma__MemeClient<$Result.GetResult<Prisma.$MemePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Memes.
     * @param {MemeDeleteManyArgs} args - Arguments to filter Memes to delete.
     * @example
     * // Delete a few Memes
     * const { count } = await prisma.meme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MemeDeleteManyArgs>(args?: SelectSubset<T, MemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Memes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Memes
     * const meme = await prisma.meme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MemeUpdateManyArgs>(args: SelectSubset<T, MemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Meme.
     * @param {MemeUpsertArgs} args - Arguments to update or create a Meme.
     * @example
     * // Update or create a Meme
     * const meme = await prisma.meme.upsert({
     *   create: {
     *     // ... data to create a Meme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meme we want to update
     *   }
     * })
     */
    upsert<T extends MemeUpsertArgs>(args: SelectSubset<T, MemeUpsertArgs<ExtArgs>>): Prisma__MemeClient<$Result.GetResult<Prisma.$MemePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Memes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemeCountArgs} args - Arguments to filter Memes to count.
     * @example
     * // Count the number of Memes
     * const count = await prisma.meme.count({
     *   where: {
     *     // ... the filter for the Memes we want to count
     *   }
     * })
    **/
    count<T extends MemeCountArgs>(
      args?: Subset<T, MemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemeAggregateArgs>(args: Subset<T, MemeAggregateArgs>): Prisma.PrismaPromise<GetMemeAggregateType<T>>

    /**
     * Group by Meme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemeGroupByArgs['orderBy'] }
        : { orderBy?: MemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Meme model
   */
  readonly fields: MemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Meme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Meme model
   */ 
  interface MemeFieldRefs {
    readonly id: FieldRef<"Meme", 'String'>
    readonly title: FieldRef<"Meme", 'String'>
    readonly imageUrl: FieldRef<"Meme", 'String'>
    readonly caption: FieldRef<"Meme", 'String'>
    readonly source: FieldRef<"Meme", 'String'>
    readonly tags: FieldRef<"Meme", 'String[]'>
    readonly isActive: FieldRef<"Meme", 'Boolean'>
    readonly featuredDate: FieldRef<"Meme", 'DateTime'>
    readonly createdAt: FieldRef<"Meme", 'DateTime'>
    readonly updatedAt: FieldRef<"Meme", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Meme findUnique
   */
  export type MemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meme
     */
    select?: MemeSelect<ExtArgs> | null
    /**
     * Filter, which Meme to fetch.
     */
    where: MemeWhereUniqueInput
  }

  /**
   * Meme findUniqueOrThrow
   */
  export type MemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meme
     */
    select?: MemeSelect<ExtArgs> | null
    /**
     * Filter, which Meme to fetch.
     */
    where: MemeWhereUniqueInput
  }

  /**
   * Meme findFirst
   */
  export type MemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meme
     */
    select?: MemeSelect<ExtArgs> | null
    /**
     * Filter, which Meme to fetch.
     */
    where?: MemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memes to fetch.
     */
    orderBy?: MemeOrderByWithRelationInput | MemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Memes.
     */
    cursor?: MemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Memes.
     */
    distinct?: MemeScalarFieldEnum | MemeScalarFieldEnum[]
  }

  /**
   * Meme findFirstOrThrow
   */
  export type MemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meme
     */
    select?: MemeSelect<ExtArgs> | null
    /**
     * Filter, which Meme to fetch.
     */
    where?: MemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memes to fetch.
     */
    orderBy?: MemeOrderByWithRelationInput | MemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Memes.
     */
    cursor?: MemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Memes.
     */
    distinct?: MemeScalarFieldEnum | MemeScalarFieldEnum[]
  }

  /**
   * Meme findMany
   */
  export type MemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meme
     */
    select?: MemeSelect<ExtArgs> | null
    /**
     * Filter, which Memes to fetch.
     */
    where?: MemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memes to fetch.
     */
    orderBy?: MemeOrderByWithRelationInput | MemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Memes.
     */
    cursor?: MemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memes.
     */
    skip?: number
    distinct?: MemeScalarFieldEnum | MemeScalarFieldEnum[]
  }

  /**
   * Meme create
   */
  export type MemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meme
     */
    select?: MemeSelect<ExtArgs> | null
    /**
     * The data needed to create a Meme.
     */
    data: XOR<MemeCreateInput, MemeUncheckedCreateInput>
  }

  /**
   * Meme createMany
   */
  export type MemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Memes.
     */
    data: MemeCreateManyInput | MemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Meme createManyAndReturn
   */
  export type MemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meme
     */
    select?: MemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Memes.
     */
    data: MemeCreateManyInput | MemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Meme update
   */
  export type MemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meme
     */
    select?: MemeSelect<ExtArgs> | null
    /**
     * The data needed to update a Meme.
     */
    data: XOR<MemeUpdateInput, MemeUncheckedUpdateInput>
    /**
     * Choose, which Meme to update.
     */
    where: MemeWhereUniqueInput
  }

  /**
   * Meme updateMany
   */
  export type MemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Memes.
     */
    data: XOR<MemeUpdateManyMutationInput, MemeUncheckedUpdateManyInput>
    /**
     * Filter which Memes to update
     */
    where?: MemeWhereInput
  }

  /**
   * Meme upsert
   */
  export type MemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meme
     */
    select?: MemeSelect<ExtArgs> | null
    /**
     * The filter to search for the Meme to update in case it exists.
     */
    where: MemeWhereUniqueInput
    /**
     * In case the Meme found by the `where` argument doesn't exist, create a new Meme with this data.
     */
    create: XOR<MemeCreateInput, MemeUncheckedCreateInput>
    /**
     * In case the Meme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemeUpdateInput, MemeUncheckedUpdateInput>
  }

  /**
   * Meme delete
   */
  export type MemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meme
     */
    select?: MemeSelect<ExtArgs> | null
    /**
     * Filter which Meme to delete.
     */
    where: MemeWhereUniqueInput
  }

  /**
   * Meme deleteMany
   */
  export type MemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Memes to delete
     */
    where?: MemeWhereInput
  }

  /**
   * Meme without action
   */
  export type MemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meme
     */
    select?: MemeSelect<ExtArgs> | null
  }


  /**
   * Model PriceSnapshot
   */

  export type AggregatePriceSnapshot = {
    _count: PriceSnapshotCountAggregateOutputType | null
    _avg: PriceSnapshotAvgAggregateOutputType | null
    _sum: PriceSnapshotSumAggregateOutputType | null
    _min: PriceSnapshotMinAggregateOutputType | null
    _max: PriceSnapshotMaxAggregateOutputType | null
  }

  export type PriceSnapshotAvgAggregateOutputType = {
    currentPrice: number | null
    priceChange24h: number | null
    priceChangePercentage24h: number | null
    volume24h: number | null
    marketCap: number | null
    sparkline: number | null
  }

  export type PriceSnapshotSumAggregateOutputType = {
    currentPrice: number | null
    priceChange24h: number | null
    priceChangePercentage24h: number | null
    volume24h: number | null
    marketCap: number | null
    sparkline: number[]
  }

  export type PriceSnapshotMinAggregateOutputType = {
    id: string | null
    assetId: string | null
    symbol: string | null
    currentPrice: number | null
    priceChange24h: number | null
    priceChangePercentage24h: number | null
    volume24h: number | null
    marketCap: number | null
    snapshotAt: Date | null
    createdAt: Date | null
  }

  export type PriceSnapshotMaxAggregateOutputType = {
    id: string | null
    assetId: string | null
    symbol: string | null
    currentPrice: number | null
    priceChange24h: number | null
    priceChangePercentage24h: number | null
    volume24h: number | null
    marketCap: number | null
    snapshotAt: Date | null
    createdAt: Date | null
  }

  export type PriceSnapshotCountAggregateOutputType = {
    id: number
    assetId: number
    symbol: number
    currentPrice: number
    priceChange24h: number
    priceChangePercentage24h: number
    volume24h: number
    marketCap: number
    sparkline: number
    snapshotAt: number
    createdAt: number
    _all: number
  }


  export type PriceSnapshotAvgAggregateInputType = {
    currentPrice?: true
    priceChange24h?: true
    priceChangePercentage24h?: true
    volume24h?: true
    marketCap?: true
    sparkline?: true
  }

  export type PriceSnapshotSumAggregateInputType = {
    currentPrice?: true
    priceChange24h?: true
    priceChangePercentage24h?: true
    volume24h?: true
    marketCap?: true
    sparkline?: true
  }

  export type PriceSnapshotMinAggregateInputType = {
    id?: true
    assetId?: true
    symbol?: true
    currentPrice?: true
    priceChange24h?: true
    priceChangePercentage24h?: true
    volume24h?: true
    marketCap?: true
    snapshotAt?: true
    createdAt?: true
  }

  export type PriceSnapshotMaxAggregateInputType = {
    id?: true
    assetId?: true
    symbol?: true
    currentPrice?: true
    priceChange24h?: true
    priceChangePercentage24h?: true
    volume24h?: true
    marketCap?: true
    snapshotAt?: true
    createdAt?: true
  }

  export type PriceSnapshotCountAggregateInputType = {
    id?: true
    assetId?: true
    symbol?: true
    currentPrice?: true
    priceChange24h?: true
    priceChangePercentage24h?: true
    volume24h?: true
    marketCap?: true
    sparkline?: true
    snapshotAt?: true
    createdAt?: true
    _all?: true
  }

  export type PriceSnapshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceSnapshot to aggregate.
     */
    where?: PriceSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceSnapshots to fetch.
     */
    orderBy?: PriceSnapshotOrderByWithRelationInput | PriceSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PriceSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PriceSnapshots
    **/
    _count?: true | PriceSnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PriceSnapshotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PriceSnapshotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PriceSnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PriceSnapshotMaxAggregateInputType
  }

  export type GetPriceSnapshotAggregateType<T extends PriceSnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregatePriceSnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePriceSnapshot[P]>
      : GetScalarType<T[P], AggregatePriceSnapshot[P]>
  }




  export type PriceSnapshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceSnapshotWhereInput
    orderBy?: PriceSnapshotOrderByWithAggregationInput | PriceSnapshotOrderByWithAggregationInput[]
    by: PriceSnapshotScalarFieldEnum[] | PriceSnapshotScalarFieldEnum
    having?: PriceSnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PriceSnapshotCountAggregateInputType | true
    _avg?: PriceSnapshotAvgAggregateInputType
    _sum?: PriceSnapshotSumAggregateInputType
    _min?: PriceSnapshotMinAggregateInputType
    _max?: PriceSnapshotMaxAggregateInputType
  }

  export type PriceSnapshotGroupByOutputType = {
    id: string
    assetId: string
    symbol: string
    currentPrice: number
    priceChange24h: number
    priceChangePercentage24h: number
    volume24h: number | null
    marketCap: number | null
    sparkline: number[]
    snapshotAt: Date
    createdAt: Date
    _count: PriceSnapshotCountAggregateOutputType | null
    _avg: PriceSnapshotAvgAggregateOutputType | null
    _sum: PriceSnapshotSumAggregateOutputType | null
    _min: PriceSnapshotMinAggregateOutputType | null
    _max: PriceSnapshotMaxAggregateOutputType | null
  }

  type GetPriceSnapshotGroupByPayload<T extends PriceSnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PriceSnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PriceSnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PriceSnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], PriceSnapshotGroupByOutputType[P]>
        }
      >
    >


  export type PriceSnapshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    symbol?: boolean
    currentPrice?: boolean
    priceChange24h?: boolean
    priceChangePercentage24h?: boolean
    volume24h?: boolean
    marketCap?: boolean
    sparkline?: boolean
    snapshotAt?: boolean
    createdAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceSnapshot"]>

  export type PriceSnapshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    symbol?: boolean
    currentPrice?: boolean
    priceChange24h?: boolean
    priceChangePercentage24h?: boolean
    volume24h?: boolean
    marketCap?: boolean
    sparkline?: boolean
    snapshotAt?: boolean
    createdAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceSnapshot"]>

  export type PriceSnapshotSelectScalar = {
    id?: boolean
    assetId?: boolean
    symbol?: boolean
    currentPrice?: boolean
    priceChange24h?: boolean
    priceChangePercentage24h?: boolean
    volume24h?: boolean
    marketCap?: boolean
    sparkline?: boolean
    snapshotAt?: boolean
    createdAt?: boolean
  }

  export type PriceSnapshotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type PriceSnapshotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }

  export type $PriceSnapshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PriceSnapshot"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assetId: string
      symbol: string
      currentPrice: number
      priceChange24h: number
      priceChangePercentage24h: number
      volume24h: number | null
      marketCap: number | null
      sparkline: number[]
      snapshotAt: Date
      createdAt: Date
    }, ExtArgs["result"]["priceSnapshot"]>
    composites: {}
  }

  type PriceSnapshotGetPayload<S extends boolean | null | undefined | PriceSnapshotDefaultArgs> = $Result.GetResult<Prisma.$PriceSnapshotPayload, S>

  type PriceSnapshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PriceSnapshotFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PriceSnapshotCountAggregateInputType | true
    }

  export interface PriceSnapshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PriceSnapshot'], meta: { name: 'PriceSnapshot' } }
    /**
     * Find zero or one PriceSnapshot that matches the filter.
     * @param {PriceSnapshotFindUniqueArgs} args - Arguments to find a PriceSnapshot
     * @example
     * // Get one PriceSnapshot
     * const priceSnapshot = await prisma.priceSnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PriceSnapshotFindUniqueArgs>(args: SelectSubset<T, PriceSnapshotFindUniqueArgs<ExtArgs>>): Prisma__PriceSnapshotClient<$Result.GetResult<Prisma.$PriceSnapshotPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PriceSnapshot that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PriceSnapshotFindUniqueOrThrowArgs} args - Arguments to find a PriceSnapshot
     * @example
     * // Get one PriceSnapshot
     * const priceSnapshot = await prisma.priceSnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PriceSnapshotFindUniqueOrThrowArgs>(args: SelectSubset<T, PriceSnapshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PriceSnapshotClient<$Result.GetResult<Prisma.$PriceSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PriceSnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceSnapshotFindFirstArgs} args - Arguments to find a PriceSnapshot
     * @example
     * // Get one PriceSnapshot
     * const priceSnapshot = await prisma.priceSnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PriceSnapshotFindFirstArgs>(args?: SelectSubset<T, PriceSnapshotFindFirstArgs<ExtArgs>>): Prisma__PriceSnapshotClient<$Result.GetResult<Prisma.$PriceSnapshotPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PriceSnapshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceSnapshotFindFirstOrThrowArgs} args - Arguments to find a PriceSnapshot
     * @example
     * // Get one PriceSnapshot
     * const priceSnapshot = await prisma.priceSnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PriceSnapshotFindFirstOrThrowArgs>(args?: SelectSubset<T, PriceSnapshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__PriceSnapshotClient<$Result.GetResult<Prisma.$PriceSnapshotPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PriceSnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceSnapshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PriceSnapshots
     * const priceSnapshots = await prisma.priceSnapshot.findMany()
     * 
     * // Get first 10 PriceSnapshots
     * const priceSnapshots = await prisma.priceSnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const priceSnapshotWithIdOnly = await prisma.priceSnapshot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PriceSnapshotFindManyArgs>(args?: SelectSubset<T, PriceSnapshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceSnapshotPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PriceSnapshot.
     * @param {PriceSnapshotCreateArgs} args - Arguments to create a PriceSnapshot.
     * @example
     * // Create one PriceSnapshot
     * const PriceSnapshot = await prisma.priceSnapshot.create({
     *   data: {
     *     // ... data to create a PriceSnapshot
     *   }
     * })
     * 
     */
    create<T extends PriceSnapshotCreateArgs>(args: SelectSubset<T, PriceSnapshotCreateArgs<ExtArgs>>): Prisma__PriceSnapshotClient<$Result.GetResult<Prisma.$PriceSnapshotPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PriceSnapshots.
     * @param {PriceSnapshotCreateManyArgs} args - Arguments to create many PriceSnapshots.
     * @example
     * // Create many PriceSnapshots
     * const priceSnapshot = await prisma.priceSnapshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PriceSnapshotCreateManyArgs>(args?: SelectSubset<T, PriceSnapshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PriceSnapshots and returns the data saved in the database.
     * @param {PriceSnapshotCreateManyAndReturnArgs} args - Arguments to create many PriceSnapshots.
     * @example
     * // Create many PriceSnapshots
     * const priceSnapshot = await prisma.priceSnapshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PriceSnapshots and only return the `id`
     * const priceSnapshotWithIdOnly = await prisma.priceSnapshot.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PriceSnapshotCreateManyAndReturnArgs>(args?: SelectSubset<T, PriceSnapshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceSnapshotPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PriceSnapshot.
     * @param {PriceSnapshotDeleteArgs} args - Arguments to delete one PriceSnapshot.
     * @example
     * // Delete one PriceSnapshot
     * const PriceSnapshot = await prisma.priceSnapshot.delete({
     *   where: {
     *     // ... filter to delete one PriceSnapshot
     *   }
     * })
     * 
     */
    delete<T extends PriceSnapshotDeleteArgs>(args: SelectSubset<T, PriceSnapshotDeleteArgs<ExtArgs>>): Prisma__PriceSnapshotClient<$Result.GetResult<Prisma.$PriceSnapshotPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PriceSnapshot.
     * @param {PriceSnapshotUpdateArgs} args - Arguments to update one PriceSnapshot.
     * @example
     * // Update one PriceSnapshot
     * const priceSnapshot = await prisma.priceSnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PriceSnapshotUpdateArgs>(args: SelectSubset<T, PriceSnapshotUpdateArgs<ExtArgs>>): Prisma__PriceSnapshotClient<$Result.GetResult<Prisma.$PriceSnapshotPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PriceSnapshots.
     * @param {PriceSnapshotDeleteManyArgs} args - Arguments to filter PriceSnapshots to delete.
     * @example
     * // Delete a few PriceSnapshots
     * const { count } = await prisma.priceSnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PriceSnapshotDeleteManyArgs>(args?: SelectSubset<T, PriceSnapshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriceSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PriceSnapshots
     * const priceSnapshot = await prisma.priceSnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PriceSnapshotUpdateManyArgs>(args: SelectSubset<T, PriceSnapshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PriceSnapshot.
     * @param {PriceSnapshotUpsertArgs} args - Arguments to update or create a PriceSnapshot.
     * @example
     * // Update or create a PriceSnapshot
     * const priceSnapshot = await prisma.priceSnapshot.upsert({
     *   create: {
     *     // ... data to create a PriceSnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PriceSnapshot we want to update
     *   }
     * })
     */
    upsert<T extends PriceSnapshotUpsertArgs>(args: SelectSubset<T, PriceSnapshotUpsertArgs<ExtArgs>>): Prisma__PriceSnapshotClient<$Result.GetResult<Prisma.$PriceSnapshotPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PriceSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceSnapshotCountArgs} args - Arguments to filter PriceSnapshots to count.
     * @example
     * // Count the number of PriceSnapshots
     * const count = await prisma.priceSnapshot.count({
     *   where: {
     *     // ... the filter for the PriceSnapshots we want to count
     *   }
     * })
    **/
    count<T extends PriceSnapshotCountArgs>(
      args?: Subset<T, PriceSnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PriceSnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PriceSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PriceSnapshotAggregateArgs>(args: Subset<T, PriceSnapshotAggregateArgs>): Prisma.PrismaPromise<GetPriceSnapshotAggregateType<T>>

    /**
     * Group by PriceSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceSnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PriceSnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PriceSnapshotGroupByArgs['orderBy'] }
        : { orderBy?: PriceSnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PriceSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPriceSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PriceSnapshot model
   */
  readonly fields: PriceSnapshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PriceSnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PriceSnapshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PriceSnapshot model
   */ 
  interface PriceSnapshotFieldRefs {
    readonly id: FieldRef<"PriceSnapshot", 'String'>
    readonly assetId: FieldRef<"PriceSnapshot", 'String'>
    readonly symbol: FieldRef<"PriceSnapshot", 'String'>
    readonly currentPrice: FieldRef<"PriceSnapshot", 'Float'>
    readonly priceChange24h: FieldRef<"PriceSnapshot", 'Float'>
    readonly priceChangePercentage24h: FieldRef<"PriceSnapshot", 'Float'>
    readonly volume24h: FieldRef<"PriceSnapshot", 'Float'>
    readonly marketCap: FieldRef<"PriceSnapshot", 'Float'>
    readonly sparkline: FieldRef<"PriceSnapshot", 'Float[]'>
    readonly snapshotAt: FieldRef<"PriceSnapshot", 'DateTime'>
    readonly createdAt: FieldRef<"PriceSnapshot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PriceSnapshot findUnique
   */
  export type PriceSnapshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceSnapshot
     */
    select?: PriceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which PriceSnapshot to fetch.
     */
    where: PriceSnapshotWhereUniqueInput
  }

  /**
   * PriceSnapshot findUniqueOrThrow
   */
  export type PriceSnapshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceSnapshot
     */
    select?: PriceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which PriceSnapshot to fetch.
     */
    where: PriceSnapshotWhereUniqueInput
  }

  /**
   * PriceSnapshot findFirst
   */
  export type PriceSnapshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceSnapshot
     */
    select?: PriceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which PriceSnapshot to fetch.
     */
    where?: PriceSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceSnapshots to fetch.
     */
    orderBy?: PriceSnapshotOrderByWithRelationInput | PriceSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceSnapshots.
     */
    cursor?: PriceSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceSnapshots.
     */
    distinct?: PriceSnapshotScalarFieldEnum | PriceSnapshotScalarFieldEnum[]
  }

  /**
   * PriceSnapshot findFirstOrThrow
   */
  export type PriceSnapshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceSnapshot
     */
    select?: PriceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which PriceSnapshot to fetch.
     */
    where?: PriceSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceSnapshots to fetch.
     */
    orderBy?: PriceSnapshotOrderByWithRelationInput | PriceSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceSnapshots.
     */
    cursor?: PriceSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceSnapshots.
     */
    distinct?: PriceSnapshotScalarFieldEnum | PriceSnapshotScalarFieldEnum[]
  }

  /**
   * PriceSnapshot findMany
   */
  export type PriceSnapshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceSnapshot
     */
    select?: PriceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which PriceSnapshots to fetch.
     */
    where?: PriceSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceSnapshots to fetch.
     */
    orderBy?: PriceSnapshotOrderByWithRelationInput | PriceSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PriceSnapshots.
     */
    cursor?: PriceSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceSnapshots.
     */
    skip?: number
    distinct?: PriceSnapshotScalarFieldEnum | PriceSnapshotScalarFieldEnum[]
  }

  /**
   * PriceSnapshot create
   */
  export type PriceSnapshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceSnapshot
     */
    select?: PriceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to create a PriceSnapshot.
     */
    data: XOR<PriceSnapshotCreateInput, PriceSnapshotUncheckedCreateInput>
  }

  /**
   * PriceSnapshot createMany
   */
  export type PriceSnapshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PriceSnapshots.
     */
    data: PriceSnapshotCreateManyInput | PriceSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PriceSnapshot createManyAndReturn
   */
  export type PriceSnapshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceSnapshot
     */
    select?: PriceSnapshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PriceSnapshots.
     */
    data: PriceSnapshotCreateManyInput | PriceSnapshotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceSnapshotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PriceSnapshot update
   */
  export type PriceSnapshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceSnapshot
     */
    select?: PriceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to update a PriceSnapshot.
     */
    data: XOR<PriceSnapshotUpdateInput, PriceSnapshotUncheckedUpdateInput>
    /**
     * Choose, which PriceSnapshot to update.
     */
    where: PriceSnapshotWhereUniqueInput
  }

  /**
   * PriceSnapshot updateMany
   */
  export type PriceSnapshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PriceSnapshots.
     */
    data: XOR<PriceSnapshotUpdateManyMutationInput, PriceSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which PriceSnapshots to update
     */
    where?: PriceSnapshotWhereInput
  }

  /**
   * PriceSnapshot upsert
   */
  export type PriceSnapshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceSnapshot
     */
    select?: PriceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceSnapshotInclude<ExtArgs> | null
    /**
     * The filter to search for the PriceSnapshot to update in case it exists.
     */
    where: PriceSnapshotWhereUniqueInput
    /**
     * In case the PriceSnapshot found by the `where` argument doesn't exist, create a new PriceSnapshot with this data.
     */
    create: XOR<PriceSnapshotCreateInput, PriceSnapshotUncheckedCreateInput>
    /**
     * In case the PriceSnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PriceSnapshotUpdateInput, PriceSnapshotUncheckedUpdateInput>
  }

  /**
   * PriceSnapshot delete
   */
  export type PriceSnapshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceSnapshot
     */
    select?: PriceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceSnapshotInclude<ExtArgs> | null
    /**
     * Filter which PriceSnapshot to delete.
     */
    where: PriceSnapshotWhereUniqueInput
  }

  /**
   * PriceSnapshot deleteMany
   */
  export type PriceSnapshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceSnapshots to delete
     */
    where?: PriceSnapshotWhereInput
  }

  /**
   * PriceSnapshot without action
   */
  export type PriceSnapshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceSnapshot
     */
    select?: PriceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceSnapshotInclude<ExtArgs> | null
  }


  /**
   * Model AIInsight
   */

  export type AggregateAIInsight = {
    _count: AIInsightCountAggregateOutputType | null
    _avg: AIInsightAvgAggregateOutputType | null
    _sum: AIInsightSumAggregateOutputType | null
    _min: AIInsightMinAggregateOutputType | null
    _max: AIInsightMaxAggregateOutputType | null
  }

  export type AIInsightAvgAggregateOutputType = {
    confidence: number | null
  }

  export type AIInsightSumAggregateOutputType = {
    confidence: number | null
  }

  export type AIInsightMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    type: string | null
    confidence: number | null
    sentiment: string | null
    generatedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AIInsightMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    type: string | null
    confidence: number | null
    sentiment: string | null
    generatedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AIInsightCountAggregateOutputType = {
    id: number
    title: number
    content: number
    type: number
    confidence: number
    targetAssets: number
    sentiment: number
    generatedAt: number
    expiresAt: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AIInsightAvgAggregateInputType = {
    confidence?: true
  }

  export type AIInsightSumAggregateInputType = {
    confidence?: true
  }

  export type AIInsightMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    type?: true
    confidence?: true
    sentiment?: true
    generatedAt?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AIInsightMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    type?: true
    confidence?: true
    sentiment?: true
    generatedAt?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AIInsightCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    type?: true
    confidence?: true
    targetAssets?: true
    sentiment?: true
    generatedAt?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AIInsightAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIInsight to aggregate.
     */
    where?: AIInsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIInsights to fetch.
     */
    orderBy?: AIInsightOrderByWithRelationInput | AIInsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AIInsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIInsights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIInsights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AIInsights
    **/
    _count?: true | AIInsightCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AIInsightAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AIInsightSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AIInsightMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AIInsightMaxAggregateInputType
  }

  export type GetAIInsightAggregateType<T extends AIInsightAggregateArgs> = {
        [P in keyof T & keyof AggregateAIInsight]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAIInsight[P]>
      : GetScalarType<T[P], AggregateAIInsight[P]>
  }




  export type AIInsightGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIInsightWhereInput
    orderBy?: AIInsightOrderByWithAggregationInput | AIInsightOrderByWithAggregationInput[]
    by: AIInsightScalarFieldEnum[] | AIInsightScalarFieldEnum
    having?: AIInsightScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AIInsightCountAggregateInputType | true
    _avg?: AIInsightAvgAggregateInputType
    _sum?: AIInsightSumAggregateInputType
    _min?: AIInsightMinAggregateInputType
    _max?: AIInsightMaxAggregateInputType
  }

  export type AIInsightGroupByOutputType = {
    id: string
    title: string
    content: string
    type: string
    confidence: number
    targetAssets: string[]
    sentiment: string | null
    generatedAt: Date
    expiresAt: Date | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: AIInsightCountAggregateOutputType | null
    _avg: AIInsightAvgAggregateOutputType | null
    _sum: AIInsightSumAggregateOutputType | null
    _min: AIInsightMinAggregateOutputType | null
    _max: AIInsightMaxAggregateOutputType | null
  }

  type GetAIInsightGroupByPayload<T extends AIInsightGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AIInsightGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AIInsightGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AIInsightGroupByOutputType[P]>
            : GetScalarType<T[P], AIInsightGroupByOutputType[P]>
        }
      >
    >


  export type AIInsightSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    type?: boolean
    confidence?: boolean
    targetAssets?: boolean
    sentiment?: boolean
    generatedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["aIInsight"]>

  export type AIInsightSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    type?: boolean
    confidence?: boolean
    targetAssets?: boolean
    sentiment?: boolean
    generatedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["aIInsight"]>

  export type AIInsightSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    type?: boolean
    confidence?: boolean
    targetAssets?: boolean
    sentiment?: boolean
    generatedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $AIInsightPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AIInsight"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      type: string
      confidence: number
      targetAssets: string[]
      sentiment: string | null
      generatedAt: Date
      expiresAt: Date | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["aIInsight"]>
    composites: {}
  }

  type AIInsightGetPayload<S extends boolean | null | undefined | AIInsightDefaultArgs> = $Result.GetResult<Prisma.$AIInsightPayload, S>

  type AIInsightCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AIInsightFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AIInsightCountAggregateInputType | true
    }

  export interface AIInsightDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIInsight'], meta: { name: 'AIInsight' } }
    /**
     * Find zero or one AIInsight that matches the filter.
     * @param {AIInsightFindUniqueArgs} args - Arguments to find a AIInsight
     * @example
     * // Get one AIInsight
     * const aIInsight = await prisma.aIInsight.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AIInsightFindUniqueArgs>(args: SelectSubset<T, AIInsightFindUniqueArgs<ExtArgs>>): Prisma__AIInsightClient<$Result.GetResult<Prisma.$AIInsightPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AIInsight that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AIInsightFindUniqueOrThrowArgs} args - Arguments to find a AIInsight
     * @example
     * // Get one AIInsight
     * const aIInsight = await prisma.aIInsight.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AIInsightFindUniqueOrThrowArgs>(args: SelectSubset<T, AIInsightFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AIInsightClient<$Result.GetResult<Prisma.$AIInsightPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AIInsight that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInsightFindFirstArgs} args - Arguments to find a AIInsight
     * @example
     * // Get one AIInsight
     * const aIInsight = await prisma.aIInsight.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AIInsightFindFirstArgs>(args?: SelectSubset<T, AIInsightFindFirstArgs<ExtArgs>>): Prisma__AIInsightClient<$Result.GetResult<Prisma.$AIInsightPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AIInsight that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInsightFindFirstOrThrowArgs} args - Arguments to find a AIInsight
     * @example
     * // Get one AIInsight
     * const aIInsight = await prisma.aIInsight.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AIInsightFindFirstOrThrowArgs>(args?: SelectSubset<T, AIInsightFindFirstOrThrowArgs<ExtArgs>>): Prisma__AIInsightClient<$Result.GetResult<Prisma.$AIInsightPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AIInsights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInsightFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AIInsights
     * const aIInsights = await prisma.aIInsight.findMany()
     * 
     * // Get first 10 AIInsights
     * const aIInsights = await prisma.aIInsight.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aIInsightWithIdOnly = await prisma.aIInsight.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AIInsightFindManyArgs>(args?: SelectSubset<T, AIInsightFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIInsightPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AIInsight.
     * @param {AIInsightCreateArgs} args - Arguments to create a AIInsight.
     * @example
     * // Create one AIInsight
     * const AIInsight = await prisma.aIInsight.create({
     *   data: {
     *     // ... data to create a AIInsight
     *   }
     * })
     * 
     */
    create<T extends AIInsightCreateArgs>(args: SelectSubset<T, AIInsightCreateArgs<ExtArgs>>): Prisma__AIInsightClient<$Result.GetResult<Prisma.$AIInsightPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AIInsights.
     * @param {AIInsightCreateManyArgs} args - Arguments to create many AIInsights.
     * @example
     * // Create many AIInsights
     * const aIInsight = await prisma.aIInsight.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AIInsightCreateManyArgs>(args?: SelectSubset<T, AIInsightCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AIInsights and returns the data saved in the database.
     * @param {AIInsightCreateManyAndReturnArgs} args - Arguments to create many AIInsights.
     * @example
     * // Create many AIInsights
     * const aIInsight = await prisma.aIInsight.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AIInsights and only return the `id`
     * const aIInsightWithIdOnly = await prisma.aIInsight.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AIInsightCreateManyAndReturnArgs>(args?: SelectSubset<T, AIInsightCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIInsightPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AIInsight.
     * @param {AIInsightDeleteArgs} args - Arguments to delete one AIInsight.
     * @example
     * // Delete one AIInsight
     * const AIInsight = await prisma.aIInsight.delete({
     *   where: {
     *     // ... filter to delete one AIInsight
     *   }
     * })
     * 
     */
    delete<T extends AIInsightDeleteArgs>(args: SelectSubset<T, AIInsightDeleteArgs<ExtArgs>>): Prisma__AIInsightClient<$Result.GetResult<Prisma.$AIInsightPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AIInsight.
     * @param {AIInsightUpdateArgs} args - Arguments to update one AIInsight.
     * @example
     * // Update one AIInsight
     * const aIInsight = await prisma.aIInsight.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AIInsightUpdateArgs>(args: SelectSubset<T, AIInsightUpdateArgs<ExtArgs>>): Prisma__AIInsightClient<$Result.GetResult<Prisma.$AIInsightPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AIInsights.
     * @param {AIInsightDeleteManyArgs} args - Arguments to filter AIInsights to delete.
     * @example
     * // Delete a few AIInsights
     * const { count } = await prisma.aIInsight.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AIInsightDeleteManyArgs>(args?: SelectSubset<T, AIInsightDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIInsights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInsightUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AIInsights
     * const aIInsight = await prisma.aIInsight.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AIInsightUpdateManyArgs>(args: SelectSubset<T, AIInsightUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AIInsight.
     * @param {AIInsightUpsertArgs} args - Arguments to update or create a AIInsight.
     * @example
     * // Update or create a AIInsight
     * const aIInsight = await prisma.aIInsight.upsert({
     *   create: {
     *     // ... data to create a AIInsight
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AIInsight we want to update
     *   }
     * })
     */
    upsert<T extends AIInsightUpsertArgs>(args: SelectSubset<T, AIInsightUpsertArgs<ExtArgs>>): Prisma__AIInsightClient<$Result.GetResult<Prisma.$AIInsightPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AIInsights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInsightCountArgs} args - Arguments to filter AIInsights to count.
     * @example
     * // Count the number of AIInsights
     * const count = await prisma.aIInsight.count({
     *   where: {
     *     // ... the filter for the AIInsights we want to count
     *   }
     * })
    **/
    count<T extends AIInsightCountArgs>(
      args?: Subset<T, AIInsightCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AIInsightCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AIInsight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInsightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AIInsightAggregateArgs>(args: Subset<T, AIInsightAggregateArgs>): Prisma.PrismaPromise<GetAIInsightAggregateType<T>>

    /**
     * Group by AIInsight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInsightGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AIInsightGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AIInsightGroupByArgs['orderBy'] }
        : { orderBy?: AIInsightGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AIInsightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIInsightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AIInsight model
   */
  readonly fields: AIInsightFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AIInsight.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AIInsightClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AIInsight model
   */ 
  interface AIInsightFieldRefs {
    readonly id: FieldRef<"AIInsight", 'String'>
    readonly title: FieldRef<"AIInsight", 'String'>
    readonly content: FieldRef<"AIInsight", 'String'>
    readonly type: FieldRef<"AIInsight", 'String'>
    readonly confidence: FieldRef<"AIInsight", 'Float'>
    readonly targetAssets: FieldRef<"AIInsight", 'String[]'>
    readonly sentiment: FieldRef<"AIInsight", 'String'>
    readonly generatedAt: FieldRef<"AIInsight", 'DateTime'>
    readonly expiresAt: FieldRef<"AIInsight", 'DateTime'>
    readonly isActive: FieldRef<"AIInsight", 'Boolean'>
    readonly createdAt: FieldRef<"AIInsight", 'DateTime'>
    readonly updatedAt: FieldRef<"AIInsight", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AIInsight findUnique
   */
  export type AIInsightFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInsight
     */
    select?: AIInsightSelect<ExtArgs> | null
    /**
     * Filter, which AIInsight to fetch.
     */
    where: AIInsightWhereUniqueInput
  }

  /**
   * AIInsight findUniqueOrThrow
   */
  export type AIInsightFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInsight
     */
    select?: AIInsightSelect<ExtArgs> | null
    /**
     * Filter, which AIInsight to fetch.
     */
    where: AIInsightWhereUniqueInput
  }

  /**
   * AIInsight findFirst
   */
  export type AIInsightFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInsight
     */
    select?: AIInsightSelect<ExtArgs> | null
    /**
     * Filter, which AIInsight to fetch.
     */
    where?: AIInsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIInsights to fetch.
     */
    orderBy?: AIInsightOrderByWithRelationInput | AIInsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIInsights.
     */
    cursor?: AIInsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIInsights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIInsights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIInsights.
     */
    distinct?: AIInsightScalarFieldEnum | AIInsightScalarFieldEnum[]
  }

  /**
   * AIInsight findFirstOrThrow
   */
  export type AIInsightFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInsight
     */
    select?: AIInsightSelect<ExtArgs> | null
    /**
     * Filter, which AIInsight to fetch.
     */
    where?: AIInsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIInsights to fetch.
     */
    orderBy?: AIInsightOrderByWithRelationInput | AIInsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIInsights.
     */
    cursor?: AIInsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIInsights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIInsights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIInsights.
     */
    distinct?: AIInsightScalarFieldEnum | AIInsightScalarFieldEnum[]
  }

  /**
   * AIInsight findMany
   */
  export type AIInsightFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInsight
     */
    select?: AIInsightSelect<ExtArgs> | null
    /**
     * Filter, which AIInsights to fetch.
     */
    where?: AIInsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIInsights to fetch.
     */
    orderBy?: AIInsightOrderByWithRelationInput | AIInsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AIInsights.
     */
    cursor?: AIInsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIInsights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIInsights.
     */
    skip?: number
    distinct?: AIInsightScalarFieldEnum | AIInsightScalarFieldEnum[]
  }

  /**
   * AIInsight create
   */
  export type AIInsightCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInsight
     */
    select?: AIInsightSelect<ExtArgs> | null
    /**
     * The data needed to create a AIInsight.
     */
    data: XOR<AIInsightCreateInput, AIInsightUncheckedCreateInput>
  }

  /**
   * AIInsight createMany
   */
  export type AIInsightCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AIInsights.
     */
    data: AIInsightCreateManyInput | AIInsightCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIInsight createManyAndReturn
   */
  export type AIInsightCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInsight
     */
    select?: AIInsightSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AIInsights.
     */
    data: AIInsightCreateManyInput | AIInsightCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIInsight update
   */
  export type AIInsightUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInsight
     */
    select?: AIInsightSelect<ExtArgs> | null
    /**
     * The data needed to update a AIInsight.
     */
    data: XOR<AIInsightUpdateInput, AIInsightUncheckedUpdateInput>
    /**
     * Choose, which AIInsight to update.
     */
    where: AIInsightWhereUniqueInput
  }

  /**
   * AIInsight updateMany
   */
  export type AIInsightUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AIInsights.
     */
    data: XOR<AIInsightUpdateManyMutationInput, AIInsightUncheckedUpdateManyInput>
    /**
     * Filter which AIInsights to update
     */
    where?: AIInsightWhereInput
  }

  /**
   * AIInsight upsert
   */
  export type AIInsightUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInsight
     */
    select?: AIInsightSelect<ExtArgs> | null
    /**
     * The filter to search for the AIInsight to update in case it exists.
     */
    where: AIInsightWhereUniqueInput
    /**
     * In case the AIInsight found by the `where` argument doesn't exist, create a new AIInsight with this data.
     */
    create: XOR<AIInsightCreateInput, AIInsightUncheckedCreateInput>
    /**
     * In case the AIInsight was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AIInsightUpdateInput, AIInsightUncheckedUpdateInput>
  }

  /**
   * AIInsight delete
   */
  export type AIInsightDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInsight
     */
    select?: AIInsightSelect<ExtArgs> | null
    /**
     * Filter which AIInsight to delete.
     */
    where: AIInsightWhereUniqueInput
  }

  /**
   * AIInsight deleteMany
   */
  export type AIInsightDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIInsights to delete
     */
    where?: AIInsightWhereInput
  }

  /**
   * AIInsight without action
   */
  export type AIInsightDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInsight
     */
    select?: AIInsightSelect<ExtArgs> | null
  }


  /**
   * Model Vote
   */

  export type AggregateVote = {
    _count: VoteCountAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  export type VoteMinAggregateOutputType = {
    id: string | null
    userId: string | null
    section: string | null
    itemId: string | null
    vote: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VoteMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    section: string | null
    itemId: string | null
    vote: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VoteCountAggregateOutputType = {
    id: number
    userId: number
    section: number
    itemId: number
    vote: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VoteMinAggregateInputType = {
    id?: true
    userId?: true
    section?: true
    itemId?: true
    vote?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VoteMaxAggregateInputType = {
    id?: true
    userId?: true
    section?: true
    itemId?: true
    vote?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VoteCountAggregateInputType = {
    id?: true
    userId?: true
    section?: true
    itemId?: true
    vote?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vote to aggregate.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Votes
    **/
    _count?: true | VoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteMaxAggregateInputType
  }

  export type GetVoteAggregateType<T extends VoteAggregateArgs> = {
        [P in keyof T & keyof AggregateVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVote[P]>
      : GetScalarType<T[P], AggregateVote[P]>
  }




  export type VoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithAggregationInput | VoteOrderByWithAggregationInput[]
    by: VoteScalarFieldEnum[] | VoteScalarFieldEnum
    having?: VoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteCountAggregateInputType | true
    _min?: VoteMinAggregateInputType
    _max?: VoteMaxAggregateInputType
  }

  export type VoteGroupByOutputType = {
    id: string
    userId: string
    section: string
    itemId: string
    vote: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: VoteCountAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  type GetVoteGroupByPayload<T extends VoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoteGroupByOutputType[P]>
            : GetScalarType<T[P], VoteGroupByOutputType[P]>
        }
      >
    >


  export type VoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    section?: boolean
    itemId?: boolean
    vote?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vote"]>

  export type VoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    section?: boolean
    itemId?: boolean
    vote?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vote"]>

  export type VoteSelectScalar = {
    id?: boolean
    userId?: boolean
    section?: boolean
    itemId?: boolean
    vote?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vote"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      section: string
      itemId: string
      vote: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vote"]>
    composites: {}
  }

  type VoteGetPayload<S extends boolean | null | undefined | VoteDefaultArgs> = $Result.GetResult<Prisma.$VotePayload, S>

  type VoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VoteCountAggregateInputType | true
    }

  export interface VoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vote'], meta: { name: 'Vote' } }
    /**
     * Find zero or one Vote that matches the filter.
     * @param {VoteFindUniqueArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VoteFindUniqueArgs>(args: SelectSubset<T, VoteFindUniqueArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vote that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VoteFindUniqueOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VoteFindUniqueOrThrowArgs>(args: SelectSubset<T, VoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VoteFindFirstArgs>(args?: SelectSubset<T, VoteFindFirstArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VoteFindFirstOrThrowArgs>(args?: SelectSubset<T, VoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Votes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.vote.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.vote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voteWithIdOnly = await prisma.vote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VoteFindManyArgs>(args?: SelectSubset<T, VoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vote.
     * @param {VoteCreateArgs} args - Arguments to create a Vote.
     * @example
     * // Create one Vote
     * const Vote = await prisma.vote.create({
     *   data: {
     *     // ... data to create a Vote
     *   }
     * })
     * 
     */
    create<T extends VoteCreateArgs>(args: SelectSubset<T, VoteCreateArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Votes.
     * @param {VoteCreateManyArgs} args - Arguments to create many Votes.
     * @example
     * // Create many Votes
     * const vote = await prisma.vote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VoteCreateManyArgs>(args?: SelectSubset<T, VoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Votes and returns the data saved in the database.
     * @param {VoteCreateManyAndReturnArgs} args - Arguments to create many Votes.
     * @example
     * // Create many Votes
     * const vote = await prisma.vote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Votes and only return the `id`
     * const voteWithIdOnly = await prisma.vote.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VoteCreateManyAndReturnArgs>(args?: SelectSubset<T, VoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Vote.
     * @param {VoteDeleteArgs} args - Arguments to delete one Vote.
     * @example
     * // Delete one Vote
     * const Vote = await prisma.vote.delete({
     *   where: {
     *     // ... filter to delete one Vote
     *   }
     * })
     * 
     */
    delete<T extends VoteDeleteArgs>(args: SelectSubset<T, VoteDeleteArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vote.
     * @param {VoteUpdateArgs} args - Arguments to update one Vote.
     * @example
     * // Update one Vote
     * const vote = await prisma.vote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VoteUpdateArgs>(args: SelectSubset<T, VoteUpdateArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Votes.
     * @param {VoteDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.vote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VoteDeleteManyArgs>(args?: SelectSubset<T, VoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VoteUpdateManyArgs>(args: SelectSubset<T, VoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vote.
     * @param {VoteUpsertArgs} args - Arguments to update or create a Vote.
     * @example
     * // Update or create a Vote
     * const vote = await prisma.vote.upsert({
     *   create: {
     *     // ... data to create a Vote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vote we want to update
     *   }
     * })
     */
    upsert<T extends VoteUpsertArgs>(args: SelectSubset<T, VoteUpsertArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteCountArgs} args - Arguments to filter Votes to count.
     * @example
     * // Count the number of Votes
     * const count = await prisma.vote.count({
     *   where: {
     *     // ... the filter for the Votes we want to count
     *   }
     * })
    **/
    count<T extends VoteCountArgs>(
      args?: Subset<T, VoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteAggregateArgs>(args: Subset<T, VoteAggregateArgs>): Prisma.PrismaPromise<GetVoteAggregateType<T>>

    /**
     * Group by Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteGroupByArgs['orderBy'] }
        : { orderBy?: VoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vote model
   */
  readonly fields: VoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vote model
   */ 
  interface VoteFieldRefs {
    readonly id: FieldRef<"Vote", 'String'>
    readonly userId: FieldRef<"Vote", 'String'>
    readonly section: FieldRef<"Vote", 'String'>
    readonly itemId: FieldRef<"Vote", 'String'>
    readonly vote: FieldRef<"Vote", 'String'>
    readonly isActive: FieldRef<"Vote", 'Boolean'>
    readonly createdAt: FieldRef<"Vote", 'DateTime'>
    readonly updatedAt: FieldRef<"Vote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vote findUnique
   */
  export type VoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote findUniqueOrThrow
   */
  export type VoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote findFirst
   */
  export type VoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     */
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote findFirstOrThrow
   */
  export type VoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     */
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote findMany
   */
  export type VoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Votes to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote create
   */
  export type VoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Vote.
     */
    data: XOR<VoteCreateInput, VoteUncheckedCreateInput>
  }

  /**
   * Vote createMany
   */
  export type VoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Votes.
     */
    data: VoteCreateManyInput | VoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vote createManyAndReturn
   */
  export type VoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Votes.
     */
    data: VoteCreateManyInput | VoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vote update
   */
  export type VoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Vote.
     */
    data: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
    /**
     * Choose, which Vote to update.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote updateMany
   */
  export type VoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Votes.
     */
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyInput>
    /**
     * Filter which Votes to update
     */
    where?: VoteWhereInput
  }

  /**
   * Vote upsert
   */
  export type VoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Vote to update in case it exists.
     */
    where: VoteWhereUniqueInput
    /**
     * In case the Vote found by the `where` argument doesn't exist, create a new Vote with this data.
     */
    create: XOR<VoteCreateInput, VoteUncheckedCreateInput>
    /**
     * In case the Vote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
  }

  /**
   * Vote delete
   */
  export type VoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter which Vote to delete.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote deleteMany
   */
  export type VoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Votes to delete
     */
    where?: VoteWhereInput
  }

  /**
   * Vote without action
   */
  export type VoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
  }


  /**
   * Model Interaction
   */

  export type AggregateInteraction = {
    _count: InteractionCountAggregateOutputType | null
    _min: InteractionMinAggregateOutputType | null
    _max: InteractionMaxAggregateOutputType | null
  }

  export type InteractionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    section: string | null
    itemId: string | null
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type InteractionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    section: string | null
    itemId: string | null
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type InteractionCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    section: number
    itemId: number
    metadata: number
    userAgent: number
    ipAddress: number
    createdAt: number
    _all: number
  }


  export type InteractionMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    section?: true
    itemId?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
  }

  export type InteractionMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    section?: true
    itemId?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
  }

  export type InteractionCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    section?: true
    itemId?: true
    metadata?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
    _all?: true
  }

  export type InteractionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interaction to aggregate.
     */
    where?: InteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interactions to fetch.
     */
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Interactions
    **/
    _count?: true | InteractionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InteractionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InteractionMaxAggregateInputType
  }

  export type GetInteractionAggregateType<T extends InteractionAggregateArgs> = {
        [P in keyof T & keyof AggregateInteraction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInteraction[P]>
      : GetScalarType<T[P], AggregateInteraction[P]>
  }




  export type InteractionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InteractionWhereInput
    orderBy?: InteractionOrderByWithAggregationInput | InteractionOrderByWithAggregationInput[]
    by: InteractionScalarFieldEnum[] | InteractionScalarFieldEnum
    having?: InteractionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InteractionCountAggregateInputType | true
    _min?: InteractionMinAggregateInputType
    _max?: InteractionMaxAggregateInputType
  }

  export type InteractionGroupByOutputType = {
    id: string
    userId: string
    type: string
    section: string
    itemId: string | null
    metadata: JsonValue | null
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date
    _count: InteractionCountAggregateOutputType | null
    _min: InteractionMinAggregateOutputType | null
    _max: InteractionMaxAggregateOutputType | null
  }

  type GetInteractionGroupByPayload<T extends InteractionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InteractionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InteractionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InteractionGroupByOutputType[P]>
            : GetScalarType<T[P], InteractionGroupByOutputType[P]>
        }
      >
    >


  export type InteractionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    section?: boolean
    itemId?: boolean
    metadata?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interaction"]>

  export type InteractionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    section?: boolean
    itemId?: boolean
    metadata?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interaction"]>

  export type InteractionSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    section?: boolean
    itemId?: boolean
    metadata?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }

  export type InteractionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InteractionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InteractionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Interaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      section: string
      itemId: string | null
      metadata: Prisma.JsonValue | null
      userAgent: string | null
      ipAddress: string | null
      createdAt: Date
    }, ExtArgs["result"]["interaction"]>
    composites: {}
  }

  type InteractionGetPayload<S extends boolean | null | undefined | InteractionDefaultArgs> = $Result.GetResult<Prisma.$InteractionPayload, S>

  type InteractionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InteractionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InteractionCountAggregateInputType | true
    }

  export interface InteractionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Interaction'], meta: { name: 'Interaction' } }
    /**
     * Find zero or one Interaction that matches the filter.
     * @param {InteractionFindUniqueArgs} args - Arguments to find a Interaction
     * @example
     * // Get one Interaction
     * const interaction = await prisma.interaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InteractionFindUniqueArgs>(args: SelectSubset<T, InteractionFindUniqueArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Interaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InteractionFindUniqueOrThrowArgs} args - Arguments to find a Interaction
     * @example
     * // Get one Interaction
     * const interaction = await prisma.interaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InteractionFindUniqueOrThrowArgs>(args: SelectSubset<T, InteractionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Interaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionFindFirstArgs} args - Arguments to find a Interaction
     * @example
     * // Get one Interaction
     * const interaction = await prisma.interaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InteractionFindFirstArgs>(args?: SelectSubset<T, InteractionFindFirstArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Interaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionFindFirstOrThrowArgs} args - Arguments to find a Interaction
     * @example
     * // Get one Interaction
     * const interaction = await prisma.interaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InteractionFindFirstOrThrowArgs>(args?: SelectSubset<T, InteractionFindFirstOrThrowArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Interactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Interactions
     * const interactions = await prisma.interaction.findMany()
     * 
     * // Get first 10 Interactions
     * const interactions = await prisma.interaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interactionWithIdOnly = await prisma.interaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InteractionFindManyArgs>(args?: SelectSubset<T, InteractionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Interaction.
     * @param {InteractionCreateArgs} args - Arguments to create a Interaction.
     * @example
     * // Create one Interaction
     * const Interaction = await prisma.interaction.create({
     *   data: {
     *     // ... data to create a Interaction
     *   }
     * })
     * 
     */
    create<T extends InteractionCreateArgs>(args: SelectSubset<T, InteractionCreateArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Interactions.
     * @param {InteractionCreateManyArgs} args - Arguments to create many Interactions.
     * @example
     * // Create many Interactions
     * const interaction = await prisma.interaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InteractionCreateManyArgs>(args?: SelectSubset<T, InteractionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Interactions and returns the data saved in the database.
     * @param {InteractionCreateManyAndReturnArgs} args - Arguments to create many Interactions.
     * @example
     * // Create many Interactions
     * const interaction = await prisma.interaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Interactions and only return the `id`
     * const interactionWithIdOnly = await prisma.interaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InteractionCreateManyAndReturnArgs>(args?: SelectSubset<T, InteractionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Interaction.
     * @param {InteractionDeleteArgs} args - Arguments to delete one Interaction.
     * @example
     * // Delete one Interaction
     * const Interaction = await prisma.interaction.delete({
     *   where: {
     *     // ... filter to delete one Interaction
     *   }
     * })
     * 
     */
    delete<T extends InteractionDeleteArgs>(args: SelectSubset<T, InteractionDeleteArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Interaction.
     * @param {InteractionUpdateArgs} args - Arguments to update one Interaction.
     * @example
     * // Update one Interaction
     * const interaction = await prisma.interaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InteractionUpdateArgs>(args: SelectSubset<T, InteractionUpdateArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Interactions.
     * @param {InteractionDeleteManyArgs} args - Arguments to filter Interactions to delete.
     * @example
     * // Delete a few Interactions
     * const { count } = await prisma.interaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InteractionDeleteManyArgs>(args?: SelectSubset<T, InteractionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Interactions
     * const interaction = await prisma.interaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InteractionUpdateManyArgs>(args: SelectSubset<T, InteractionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Interaction.
     * @param {InteractionUpsertArgs} args - Arguments to update or create a Interaction.
     * @example
     * // Update or create a Interaction
     * const interaction = await prisma.interaction.upsert({
     *   create: {
     *     // ... data to create a Interaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Interaction we want to update
     *   }
     * })
     */
    upsert<T extends InteractionUpsertArgs>(args: SelectSubset<T, InteractionUpsertArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Interactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionCountArgs} args - Arguments to filter Interactions to count.
     * @example
     * // Count the number of Interactions
     * const count = await prisma.interaction.count({
     *   where: {
     *     // ... the filter for the Interactions we want to count
     *   }
     * })
    **/
    count<T extends InteractionCountArgs>(
      args?: Subset<T, InteractionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InteractionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Interaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InteractionAggregateArgs>(args: Subset<T, InteractionAggregateArgs>): Prisma.PrismaPromise<GetInteractionAggregateType<T>>

    /**
     * Group by Interaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InteractionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InteractionGroupByArgs['orderBy'] }
        : { orderBy?: InteractionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InteractionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInteractionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Interaction model
   */
  readonly fields: InteractionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Interaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InteractionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Interaction model
   */ 
  interface InteractionFieldRefs {
    readonly id: FieldRef<"Interaction", 'String'>
    readonly userId: FieldRef<"Interaction", 'String'>
    readonly type: FieldRef<"Interaction", 'String'>
    readonly section: FieldRef<"Interaction", 'String'>
    readonly itemId: FieldRef<"Interaction", 'String'>
    readonly metadata: FieldRef<"Interaction", 'Json'>
    readonly userAgent: FieldRef<"Interaction", 'String'>
    readonly ipAddress: FieldRef<"Interaction", 'String'>
    readonly createdAt: FieldRef<"Interaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Interaction findUnique
   */
  export type InteractionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interaction to fetch.
     */
    where: InteractionWhereUniqueInput
  }

  /**
   * Interaction findUniqueOrThrow
   */
  export type InteractionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interaction to fetch.
     */
    where: InteractionWhereUniqueInput
  }

  /**
   * Interaction findFirst
   */
  export type InteractionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interaction to fetch.
     */
    where?: InteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interactions to fetch.
     */
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interactions.
     */
    cursor?: InteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interactions.
     */
    distinct?: InteractionScalarFieldEnum | InteractionScalarFieldEnum[]
  }

  /**
   * Interaction findFirstOrThrow
   */
  export type InteractionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interaction to fetch.
     */
    where?: InteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interactions to fetch.
     */
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interactions.
     */
    cursor?: InteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interactions.
     */
    distinct?: InteractionScalarFieldEnum | InteractionScalarFieldEnum[]
  }

  /**
   * Interaction findMany
   */
  export type InteractionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interactions to fetch.
     */
    where?: InteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interactions to fetch.
     */
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Interactions.
     */
    cursor?: InteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interactions.
     */
    skip?: number
    distinct?: InteractionScalarFieldEnum | InteractionScalarFieldEnum[]
  }

  /**
   * Interaction create
   */
  export type InteractionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * The data needed to create a Interaction.
     */
    data: XOR<InteractionCreateInput, InteractionUncheckedCreateInput>
  }

  /**
   * Interaction createMany
   */
  export type InteractionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Interactions.
     */
    data: InteractionCreateManyInput | InteractionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Interaction createManyAndReturn
   */
  export type InteractionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Interactions.
     */
    data: InteractionCreateManyInput | InteractionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Interaction update
   */
  export type InteractionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * The data needed to update a Interaction.
     */
    data: XOR<InteractionUpdateInput, InteractionUncheckedUpdateInput>
    /**
     * Choose, which Interaction to update.
     */
    where: InteractionWhereUniqueInput
  }

  /**
   * Interaction updateMany
   */
  export type InteractionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Interactions.
     */
    data: XOR<InteractionUpdateManyMutationInput, InteractionUncheckedUpdateManyInput>
    /**
     * Filter which Interactions to update
     */
    where?: InteractionWhereInput
  }

  /**
   * Interaction upsert
   */
  export type InteractionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * The filter to search for the Interaction to update in case it exists.
     */
    where: InteractionWhereUniqueInput
    /**
     * In case the Interaction found by the `where` argument doesn't exist, create a new Interaction with this data.
     */
    create: XOR<InteractionCreateInput, InteractionUncheckedCreateInput>
    /**
     * In case the Interaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InteractionUpdateInput, InteractionUncheckedUpdateInput>
  }

  /**
   * Interaction delete
   */
  export type InteractionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter which Interaction to delete.
     */
    where: InteractionWhereUniqueInput
  }

  /**
   * Interaction deleteMany
   */
  export type InteractionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interactions to delete
     */
    where?: InteractionWhereInput
  }

  /**
   * Interaction without action
   */
  export type InteractionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
  }


  /**
   * Model RecommendationProfile
   */

  export type AggregateRecommendationProfile = {
    _count: RecommendationProfileCountAggregateOutputType | null
    _min: RecommendationProfileMinAggregateOutputType | null
    _max: RecommendationProfileMaxAggregateOutputType | null
  }

  export type RecommendationProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    algorithm: string | null
    isActive: boolean | null
    lastTrainedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecommendationProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    algorithm: string | null
    isActive: boolean | null
    lastTrainedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecommendationProfileCountAggregateOutputType = {
    id: number
    userId: number
    algorithm: number
    preferences: number
    filters: number
    isActive: number
    lastTrainedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RecommendationProfileMinAggregateInputType = {
    id?: true
    userId?: true
    algorithm?: true
    isActive?: true
    lastTrainedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecommendationProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    algorithm?: true
    isActive?: true
    lastTrainedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecommendationProfileCountAggregateInputType = {
    id?: true
    userId?: true
    algorithm?: true
    preferences?: true
    filters?: true
    isActive?: true
    lastTrainedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RecommendationProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecommendationProfile to aggregate.
     */
    where?: RecommendationProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecommendationProfiles to fetch.
     */
    orderBy?: RecommendationProfileOrderByWithRelationInput | RecommendationProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecommendationProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecommendationProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecommendationProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecommendationProfiles
    **/
    _count?: true | RecommendationProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecommendationProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecommendationProfileMaxAggregateInputType
  }

  export type GetRecommendationProfileAggregateType<T extends RecommendationProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateRecommendationProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecommendationProfile[P]>
      : GetScalarType<T[P], AggregateRecommendationProfile[P]>
  }




  export type RecommendationProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationProfileWhereInput
    orderBy?: RecommendationProfileOrderByWithAggregationInput | RecommendationProfileOrderByWithAggregationInput[]
    by: RecommendationProfileScalarFieldEnum[] | RecommendationProfileScalarFieldEnum
    having?: RecommendationProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecommendationProfileCountAggregateInputType | true
    _min?: RecommendationProfileMinAggregateInputType
    _max?: RecommendationProfileMaxAggregateInputType
  }

  export type RecommendationProfileGroupByOutputType = {
    id: string
    userId: string
    algorithm: string
    preferences: JsonValue
    filters: JsonValue | null
    isActive: boolean
    lastTrainedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: RecommendationProfileCountAggregateOutputType | null
    _min: RecommendationProfileMinAggregateOutputType | null
    _max: RecommendationProfileMaxAggregateOutputType | null
  }

  type GetRecommendationProfileGroupByPayload<T extends RecommendationProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecommendationProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecommendationProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecommendationProfileGroupByOutputType[P]>
            : GetScalarType<T[P], RecommendationProfileGroupByOutputType[P]>
        }
      >
    >


  export type RecommendationProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    algorithm?: boolean
    preferences?: boolean
    filters?: boolean
    isActive?: boolean
    lastTrainedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendationProfile"]>

  export type RecommendationProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    algorithm?: boolean
    preferences?: boolean
    filters?: boolean
    isActive?: boolean
    lastTrainedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendationProfile"]>

  export type RecommendationProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    algorithm?: boolean
    preferences?: boolean
    filters?: boolean
    isActive?: boolean
    lastTrainedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RecommendationProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RecommendationProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RecommendationProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecommendationProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      algorithm: string
      preferences: Prisma.JsonValue
      filters: Prisma.JsonValue | null
      isActive: boolean
      lastTrainedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["recommendationProfile"]>
    composites: {}
  }

  type RecommendationProfileGetPayload<S extends boolean | null | undefined | RecommendationProfileDefaultArgs> = $Result.GetResult<Prisma.$RecommendationProfilePayload, S>

  type RecommendationProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecommendationProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecommendationProfileCountAggregateInputType | true
    }

  export interface RecommendationProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecommendationProfile'], meta: { name: 'RecommendationProfile' } }
    /**
     * Find zero or one RecommendationProfile that matches the filter.
     * @param {RecommendationProfileFindUniqueArgs} args - Arguments to find a RecommendationProfile
     * @example
     * // Get one RecommendationProfile
     * const recommendationProfile = await prisma.recommendationProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecommendationProfileFindUniqueArgs>(args: SelectSubset<T, RecommendationProfileFindUniqueArgs<ExtArgs>>): Prisma__RecommendationProfileClient<$Result.GetResult<Prisma.$RecommendationProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RecommendationProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecommendationProfileFindUniqueOrThrowArgs} args - Arguments to find a RecommendationProfile
     * @example
     * // Get one RecommendationProfile
     * const recommendationProfile = await prisma.recommendationProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecommendationProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, RecommendationProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecommendationProfileClient<$Result.GetResult<Prisma.$RecommendationProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RecommendationProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationProfileFindFirstArgs} args - Arguments to find a RecommendationProfile
     * @example
     * // Get one RecommendationProfile
     * const recommendationProfile = await prisma.recommendationProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecommendationProfileFindFirstArgs>(args?: SelectSubset<T, RecommendationProfileFindFirstArgs<ExtArgs>>): Prisma__RecommendationProfileClient<$Result.GetResult<Prisma.$RecommendationProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RecommendationProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationProfileFindFirstOrThrowArgs} args - Arguments to find a RecommendationProfile
     * @example
     * // Get one RecommendationProfile
     * const recommendationProfile = await prisma.recommendationProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecommendationProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, RecommendationProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecommendationProfileClient<$Result.GetResult<Prisma.$RecommendationProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RecommendationProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecommendationProfiles
     * const recommendationProfiles = await prisma.recommendationProfile.findMany()
     * 
     * // Get first 10 RecommendationProfiles
     * const recommendationProfiles = await prisma.recommendationProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recommendationProfileWithIdOnly = await prisma.recommendationProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecommendationProfileFindManyArgs>(args?: SelectSubset<T, RecommendationProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RecommendationProfile.
     * @param {RecommendationProfileCreateArgs} args - Arguments to create a RecommendationProfile.
     * @example
     * // Create one RecommendationProfile
     * const RecommendationProfile = await prisma.recommendationProfile.create({
     *   data: {
     *     // ... data to create a RecommendationProfile
     *   }
     * })
     * 
     */
    create<T extends RecommendationProfileCreateArgs>(args: SelectSubset<T, RecommendationProfileCreateArgs<ExtArgs>>): Prisma__RecommendationProfileClient<$Result.GetResult<Prisma.$RecommendationProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RecommendationProfiles.
     * @param {RecommendationProfileCreateManyArgs} args - Arguments to create many RecommendationProfiles.
     * @example
     * // Create many RecommendationProfiles
     * const recommendationProfile = await prisma.recommendationProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecommendationProfileCreateManyArgs>(args?: SelectSubset<T, RecommendationProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RecommendationProfiles and returns the data saved in the database.
     * @param {RecommendationProfileCreateManyAndReturnArgs} args - Arguments to create many RecommendationProfiles.
     * @example
     * // Create many RecommendationProfiles
     * const recommendationProfile = await prisma.recommendationProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RecommendationProfiles and only return the `id`
     * const recommendationProfileWithIdOnly = await prisma.recommendationProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecommendationProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, RecommendationProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RecommendationProfile.
     * @param {RecommendationProfileDeleteArgs} args - Arguments to delete one RecommendationProfile.
     * @example
     * // Delete one RecommendationProfile
     * const RecommendationProfile = await prisma.recommendationProfile.delete({
     *   where: {
     *     // ... filter to delete one RecommendationProfile
     *   }
     * })
     * 
     */
    delete<T extends RecommendationProfileDeleteArgs>(args: SelectSubset<T, RecommendationProfileDeleteArgs<ExtArgs>>): Prisma__RecommendationProfileClient<$Result.GetResult<Prisma.$RecommendationProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RecommendationProfile.
     * @param {RecommendationProfileUpdateArgs} args - Arguments to update one RecommendationProfile.
     * @example
     * // Update one RecommendationProfile
     * const recommendationProfile = await prisma.recommendationProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecommendationProfileUpdateArgs>(args: SelectSubset<T, RecommendationProfileUpdateArgs<ExtArgs>>): Prisma__RecommendationProfileClient<$Result.GetResult<Prisma.$RecommendationProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RecommendationProfiles.
     * @param {RecommendationProfileDeleteManyArgs} args - Arguments to filter RecommendationProfiles to delete.
     * @example
     * // Delete a few RecommendationProfiles
     * const { count } = await prisma.recommendationProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecommendationProfileDeleteManyArgs>(args?: SelectSubset<T, RecommendationProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecommendationProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecommendationProfiles
     * const recommendationProfile = await prisma.recommendationProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecommendationProfileUpdateManyArgs>(args: SelectSubset<T, RecommendationProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RecommendationProfile.
     * @param {RecommendationProfileUpsertArgs} args - Arguments to update or create a RecommendationProfile.
     * @example
     * // Update or create a RecommendationProfile
     * const recommendationProfile = await prisma.recommendationProfile.upsert({
     *   create: {
     *     // ... data to create a RecommendationProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecommendationProfile we want to update
     *   }
     * })
     */
    upsert<T extends RecommendationProfileUpsertArgs>(args: SelectSubset<T, RecommendationProfileUpsertArgs<ExtArgs>>): Prisma__RecommendationProfileClient<$Result.GetResult<Prisma.$RecommendationProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RecommendationProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationProfileCountArgs} args - Arguments to filter RecommendationProfiles to count.
     * @example
     * // Count the number of RecommendationProfiles
     * const count = await prisma.recommendationProfile.count({
     *   where: {
     *     // ... the filter for the RecommendationProfiles we want to count
     *   }
     * })
    **/
    count<T extends RecommendationProfileCountArgs>(
      args?: Subset<T, RecommendationProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecommendationProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecommendationProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecommendationProfileAggregateArgs>(args: Subset<T, RecommendationProfileAggregateArgs>): Prisma.PrismaPromise<GetRecommendationProfileAggregateType<T>>

    /**
     * Group by RecommendationProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecommendationProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecommendationProfileGroupByArgs['orderBy'] }
        : { orderBy?: RecommendationProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecommendationProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecommendationProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecommendationProfile model
   */
  readonly fields: RecommendationProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecommendationProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecommendationProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RecommendationProfile model
   */ 
  interface RecommendationProfileFieldRefs {
    readonly id: FieldRef<"RecommendationProfile", 'String'>
    readonly userId: FieldRef<"RecommendationProfile", 'String'>
    readonly algorithm: FieldRef<"RecommendationProfile", 'String'>
    readonly preferences: FieldRef<"RecommendationProfile", 'Json'>
    readonly filters: FieldRef<"RecommendationProfile", 'Json'>
    readonly isActive: FieldRef<"RecommendationProfile", 'Boolean'>
    readonly lastTrainedAt: FieldRef<"RecommendationProfile", 'DateTime'>
    readonly createdAt: FieldRef<"RecommendationProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"RecommendationProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RecommendationProfile findUnique
   */
  export type RecommendationProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationProfile
     */
    select?: RecommendationProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationProfileInclude<ExtArgs> | null
    /**
     * Filter, which RecommendationProfile to fetch.
     */
    where: RecommendationProfileWhereUniqueInput
  }

  /**
   * RecommendationProfile findUniqueOrThrow
   */
  export type RecommendationProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationProfile
     */
    select?: RecommendationProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationProfileInclude<ExtArgs> | null
    /**
     * Filter, which RecommendationProfile to fetch.
     */
    where: RecommendationProfileWhereUniqueInput
  }

  /**
   * RecommendationProfile findFirst
   */
  export type RecommendationProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationProfile
     */
    select?: RecommendationProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationProfileInclude<ExtArgs> | null
    /**
     * Filter, which RecommendationProfile to fetch.
     */
    where?: RecommendationProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecommendationProfiles to fetch.
     */
    orderBy?: RecommendationProfileOrderByWithRelationInput | RecommendationProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecommendationProfiles.
     */
    cursor?: RecommendationProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecommendationProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecommendationProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecommendationProfiles.
     */
    distinct?: RecommendationProfileScalarFieldEnum | RecommendationProfileScalarFieldEnum[]
  }

  /**
   * RecommendationProfile findFirstOrThrow
   */
  export type RecommendationProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationProfile
     */
    select?: RecommendationProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationProfileInclude<ExtArgs> | null
    /**
     * Filter, which RecommendationProfile to fetch.
     */
    where?: RecommendationProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecommendationProfiles to fetch.
     */
    orderBy?: RecommendationProfileOrderByWithRelationInput | RecommendationProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecommendationProfiles.
     */
    cursor?: RecommendationProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecommendationProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecommendationProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecommendationProfiles.
     */
    distinct?: RecommendationProfileScalarFieldEnum | RecommendationProfileScalarFieldEnum[]
  }

  /**
   * RecommendationProfile findMany
   */
  export type RecommendationProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationProfile
     */
    select?: RecommendationProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationProfileInclude<ExtArgs> | null
    /**
     * Filter, which RecommendationProfiles to fetch.
     */
    where?: RecommendationProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecommendationProfiles to fetch.
     */
    orderBy?: RecommendationProfileOrderByWithRelationInput | RecommendationProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecommendationProfiles.
     */
    cursor?: RecommendationProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecommendationProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecommendationProfiles.
     */
    skip?: number
    distinct?: RecommendationProfileScalarFieldEnum | RecommendationProfileScalarFieldEnum[]
  }

  /**
   * RecommendationProfile create
   */
  export type RecommendationProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationProfile
     */
    select?: RecommendationProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a RecommendationProfile.
     */
    data: XOR<RecommendationProfileCreateInput, RecommendationProfileUncheckedCreateInput>
  }

  /**
   * RecommendationProfile createMany
   */
  export type RecommendationProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecommendationProfiles.
     */
    data: RecommendationProfileCreateManyInput | RecommendationProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RecommendationProfile createManyAndReturn
   */
  export type RecommendationProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationProfile
     */
    select?: RecommendationProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RecommendationProfiles.
     */
    data: RecommendationProfileCreateManyInput | RecommendationProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecommendationProfile update
   */
  export type RecommendationProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationProfile
     */
    select?: RecommendationProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a RecommendationProfile.
     */
    data: XOR<RecommendationProfileUpdateInput, RecommendationProfileUncheckedUpdateInput>
    /**
     * Choose, which RecommendationProfile to update.
     */
    where: RecommendationProfileWhereUniqueInput
  }

  /**
   * RecommendationProfile updateMany
   */
  export type RecommendationProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecommendationProfiles.
     */
    data: XOR<RecommendationProfileUpdateManyMutationInput, RecommendationProfileUncheckedUpdateManyInput>
    /**
     * Filter which RecommendationProfiles to update
     */
    where?: RecommendationProfileWhereInput
  }

  /**
   * RecommendationProfile upsert
   */
  export type RecommendationProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationProfile
     */
    select?: RecommendationProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the RecommendationProfile to update in case it exists.
     */
    where: RecommendationProfileWhereUniqueInput
    /**
     * In case the RecommendationProfile found by the `where` argument doesn't exist, create a new RecommendationProfile with this data.
     */
    create: XOR<RecommendationProfileCreateInput, RecommendationProfileUncheckedCreateInput>
    /**
     * In case the RecommendationProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecommendationProfileUpdateInput, RecommendationProfileUncheckedUpdateInput>
  }

  /**
   * RecommendationProfile delete
   */
  export type RecommendationProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationProfile
     */
    select?: RecommendationProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationProfileInclude<ExtArgs> | null
    /**
     * Filter which RecommendationProfile to delete.
     */
    where: RecommendationProfileWhereUniqueInput
  }

  /**
   * RecommendationProfile deleteMany
   */
  export type RecommendationProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecommendationProfiles to delete
     */
    where?: RecommendationProfileWhereInput
  }

  /**
   * RecommendationProfile without action
   */
  export type RecommendationProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationProfile
     */
    select?: RecommendationProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationProfileInclude<ExtArgs> | null
  }


  /**
   * Model UserRecommendation
   */

  export type AggregateUserRecommendation = {
    _count: UserRecommendationCountAggregateOutputType | null
    _avg: UserRecommendationAvgAggregateOutputType | null
    _sum: UserRecommendationSumAggregateOutputType | null
    _min: UserRecommendationMinAggregateOutputType | null
    _max: UserRecommendationMaxAggregateOutputType | null
  }

  export type UserRecommendationAvgAggregateOutputType = {
    relevanceScore: number | null
  }

  export type UserRecommendationSumAggregateOutputType = {
    relevanceScore: number | null
  }

  export type UserRecommendationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    itemId: string | null
    title: string | null
    description: string | null
    relevanceScore: number | null
    reason: string | null
    priority: string | null
    isRead: boolean | null
    isDismissed: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserRecommendationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    itemId: string | null
    title: string | null
    description: string | null
    relevanceScore: number | null
    reason: string | null
    priority: string | null
    isRead: boolean | null
    isDismissed: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserRecommendationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    itemId: number
    title: number
    description: number
    relevanceScore: number
    reason: number
    priority: number
    isRead: number
    isDismissed: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserRecommendationAvgAggregateInputType = {
    relevanceScore?: true
  }

  export type UserRecommendationSumAggregateInputType = {
    relevanceScore?: true
  }

  export type UserRecommendationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    itemId?: true
    title?: true
    description?: true
    relevanceScore?: true
    reason?: true
    priority?: true
    isRead?: true
    isDismissed?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserRecommendationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    itemId?: true
    title?: true
    description?: true
    relevanceScore?: true
    reason?: true
    priority?: true
    isRead?: true
    isDismissed?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserRecommendationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    itemId?: true
    title?: true
    description?: true
    relevanceScore?: true
    reason?: true
    priority?: true
    isRead?: true
    isDismissed?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserRecommendationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRecommendation to aggregate.
     */
    where?: UserRecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRecommendations to fetch.
     */
    orderBy?: UserRecommendationOrderByWithRelationInput | UserRecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRecommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRecommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRecommendations
    **/
    _count?: true | UserRecommendationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRecommendationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRecommendationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRecommendationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRecommendationMaxAggregateInputType
  }

  export type GetUserRecommendationAggregateType<T extends UserRecommendationAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRecommendation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRecommendation[P]>
      : GetScalarType<T[P], AggregateUserRecommendation[P]>
  }




  export type UserRecommendationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRecommendationWhereInput
    orderBy?: UserRecommendationOrderByWithAggregationInput | UserRecommendationOrderByWithAggregationInput[]
    by: UserRecommendationScalarFieldEnum[] | UserRecommendationScalarFieldEnum
    having?: UserRecommendationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRecommendationCountAggregateInputType | true
    _avg?: UserRecommendationAvgAggregateInputType
    _sum?: UserRecommendationSumAggregateInputType
    _min?: UserRecommendationMinAggregateInputType
    _max?: UserRecommendationMaxAggregateInputType
  }

  export type UserRecommendationGroupByOutputType = {
    id: string
    userId: string
    type: string
    itemId: string
    title: string
    description: string | null
    relevanceScore: number
    reason: string | null
    priority: string
    isRead: boolean
    isDismissed: boolean
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserRecommendationCountAggregateOutputType | null
    _avg: UserRecommendationAvgAggregateOutputType | null
    _sum: UserRecommendationSumAggregateOutputType | null
    _min: UserRecommendationMinAggregateOutputType | null
    _max: UserRecommendationMaxAggregateOutputType | null
  }

  type GetUserRecommendationGroupByPayload<T extends UserRecommendationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRecommendationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRecommendationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRecommendationGroupByOutputType[P]>
            : GetScalarType<T[P], UserRecommendationGroupByOutputType[P]>
        }
      >
    >


  export type UserRecommendationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    itemId?: boolean
    title?: boolean
    description?: boolean
    relevanceScore?: boolean
    reason?: boolean
    priority?: boolean
    isRead?: boolean
    isDismissed?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRecommendation"]>

  export type UserRecommendationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    itemId?: boolean
    title?: boolean
    description?: boolean
    relevanceScore?: boolean
    reason?: boolean
    priority?: boolean
    isRead?: boolean
    isDismissed?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRecommendation"]>

  export type UserRecommendationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    itemId?: boolean
    title?: boolean
    description?: boolean
    relevanceScore?: boolean
    reason?: boolean
    priority?: boolean
    isRead?: boolean
    isDismissed?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserRecommendationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserRecommendationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserRecommendationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRecommendation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      itemId: string
      title: string
      description: string | null
      relevanceScore: number
      reason: string | null
      priority: string
      isRead: boolean
      isDismissed: boolean
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userRecommendation"]>
    composites: {}
  }

  type UserRecommendationGetPayload<S extends boolean | null | undefined | UserRecommendationDefaultArgs> = $Result.GetResult<Prisma.$UserRecommendationPayload, S>

  type UserRecommendationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserRecommendationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserRecommendationCountAggregateInputType | true
    }

  export interface UserRecommendationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRecommendation'], meta: { name: 'UserRecommendation' } }
    /**
     * Find zero or one UserRecommendation that matches the filter.
     * @param {UserRecommendationFindUniqueArgs} args - Arguments to find a UserRecommendation
     * @example
     * // Get one UserRecommendation
     * const userRecommendation = await prisma.userRecommendation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRecommendationFindUniqueArgs>(args: SelectSubset<T, UserRecommendationFindUniqueArgs<ExtArgs>>): Prisma__UserRecommendationClient<$Result.GetResult<Prisma.$UserRecommendationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserRecommendation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserRecommendationFindUniqueOrThrowArgs} args - Arguments to find a UserRecommendation
     * @example
     * // Get one UserRecommendation
     * const userRecommendation = await prisma.userRecommendation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRecommendationFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRecommendationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRecommendationClient<$Result.GetResult<Prisma.$UserRecommendationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserRecommendation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecommendationFindFirstArgs} args - Arguments to find a UserRecommendation
     * @example
     * // Get one UserRecommendation
     * const userRecommendation = await prisma.userRecommendation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRecommendationFindFirstArgs>(args?: SelectSubset<T, UserRecommendationFindFirstArgs<ExtArgs>>): Prisma__UserRecommendationClient<$Result.GetResult<Prisma.$UserRecommendationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserRecommendation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecommendationFindFirstOrThrowArgs} args - Arguments to find a UserRecommendation
     * @example
     * // Get one UserRecommendation
     * const userRecommendation = await prisma.userRecommendation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRecommendationFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRecommendationFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRecommendationClient<$Result.GetResult<Prisma.$UserRecommendationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserRecommendations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecommendationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRecommendations
     * const userRecommendations = await prisma.userRecommendation.findMany()
     * 
     * // Get first 10 UserRecommendations
     * const userRecommendations = await prisma.userRecommendation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRecommendationWithIdOnly = await prisma.userRecommendation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRecommendationFindManyArgs>(args?: SelectSubset<T, UserRecommendationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRecommendationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserRecommendation.
     * @param {UserRecommendationCreateArgs} args - Arguments to create a UserRecommendation.
     * @example
     * // Create one UserRecommendation
     * const UserRecommendation = await prisma.userRecommendation.create({
     *   data: {
     *     // ... data to create a UserRecommendation
     *   }
     * })
     * 
     */
    create<T extends UserRecommendationCreateArgs>(args: SelectSubset<T, UserRecommendationCreateArgs<ExtArgs>>): Prisma__UserRecommendationClient<$Result.GetResult<Prisma.$UserRecommendationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserRecommendations.
     * @param {UserRecommendationCreateManyArgs} args - Arguments to create many UserRecommendations.
     * @example
     * // Create many UserRecommendations
     * const userRecommendation = await prisma.userRecommendation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRecommendationCreateManyArgs>(args?: SelectSubset<T, UserRecommendationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRecommendations and returns the data saved in the database.
     * @param {UserRecommendationCreateManyAndReturnArgs} args - Arguments to create many UserRecommendations.
     * @example
     * // Create many UserRecommendations
     * const userRecommendation = await prisma.userRecommendation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRecommendations and only return the `id`
     * const userRecommendationWithIdOnly = await prisma.userRecommendation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRecommendationCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRecommendationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRecommendationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserRecommendation.
     * @param {UserRecommendationDeleteArgs} args - Arguments to delete one UserRecommendation.
     * @example
     * // Delete one UserRecommendation
     * const UserRecommendation = await prisma.userRecommendation.delete({
     *   where: {
     *     // ... filter to delete one UserRecommendation
     *   }
     * })
     * 
     */
    delete<T extends UserRecommendationDeleteArgs>(args: SelectSubset<T, UserRecommendationDeleteArgs<ExtArgs>>): Prisma__UserRecommendationClient<$Result.GetResult<Prisma.$UserRecommendationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserRecommendation.
     * @param {UserRecommendationUpdateArgs} args - Arguments to update one UserRecommendation.
     * @example
     * // Update one UserRecommendation
     * const userRecommendation = await prisma.userRecommendation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRecommendationUpdateArgs>(args: SelectSubset<T, UserRecommendationUpdateArgs<ExtArgs>>): Prisma__UserRecommendationClient<$Result.GetResult<Prisma.$UserRecommendationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserRecommendations.
     * @param {UserRecommendationDeleteManyArgs} args - Arguments to filter UserRecommendations to delete.
     * @example
     * // Delete a few UserRecommendations
     * const { count } = await prisma.userRecommendation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRecommendationDeleteManyArgs>(args?: SelectSubset<T, UserRecommendationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRecommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecommendationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRecommendations
     * const userRecommendation = await prisma.userRecommendation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRecommendationUpdateManyArgs>(args: SelectSubset<T, UserRecommendationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRecommendation.
     * @param {UserRecommendationUpsertArgs} args - Arguments to update or create a UserRecommendation.
     * @example
     * // Update or create a UserRecommendation
     * const userRecommendation = await prisma.userRecommendation.upsert({
     *   create: {
     *     // ... data to create a UserRecommendation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRecommendation we want to update
     *   }
     * })
     */
    upsert<T extends UserRecommendationUpsertArgs>(args: SelectSubset<T, UserRecommendationUpsertArgs<ExtArgs>>): Prisma__UserRecommendationClient<$Result.GetResult<Prisma.$UserRecommendationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserRecommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecommendationCountArgs} args - Arguments to filter UserRecommendations to count.
     * @example
     * // Count the number of UserRecommendations
     * const count = await prisma.userRecommendation.count({
     *   where: {
     *     // ... the filter for the UserRecommendations we want to count
     *   }
     * })
    **/
    count<T extends UserRecommendationCountArgs>(
      args?: Subset<T, UserRecommendationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRecommendationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRecommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecommendationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRecommendationAggregateArgs>(args: Subset<T, UserRecommendationAggregateArgs>): Prisma.PrismaPromise<GetUserRecommendationAggregateType<T>>

    /**
     * Group by UserRecommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecommendationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRecommendationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRecommendationGroupByArgs['orderBy'] }
        : { orderBy?: UserRecommendationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRecommendationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRecommendationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRecommendation model
   */
  readonly fields: UserRecommendationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRecommendation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRecommendationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRecommendation model
   */ 
  interface UserRecommendationFieldRefs {
    readonly id: FieldRef<"UserRecommendation", 'String'>
    readonly userId: FieldRef<"UserRecommendation", 'String'>
    readonly type: FieldRef<"UserRecommendation", 'String'>
    readonly itemId: FieldRef<"UserRecommendation", 'String'>
    readonly title: FieldRef<"UserRecommendation", 'String'>
    readonly description: FieldRef<"UserRecommendation", 'String'>
    readonly relevanceScore: FieldRef<"UserRecommendation", 'Float'>
    readonly reason: FieldRef<"UserRecommendation", 'String'>
    readonly priority: FieldRef<"UserRecommendation", 'String'>
    readonly isRead: FieldRef<"UserRecommendation", 'Boolean'>
    readonly isDismissed: FieldRef<"UserRecommendation", 'Boolean'>
    readonly expiresAt: FieldRef<"UserRecommendation", 'DateTime'>
    readonly createdAt: FieldRef<"UserRecommendation", 'DateTime'>
    readonly updatedAt: FieldRef<"UserRecommendation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserRecommendation findUnique
   */
  export type UserRecommendationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecommendation
     */
    select?: UserRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecommendationInclude<ExtArgs> | null
    /**
     * Filter, which UserRecommendation to fetch.
     */
    where: UserRecommendationWhereUniqueInput
  }

  /**
   * UserRecommendation findUniqueOrThrow
   */
  export type UserRecommendationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecommendation
     */
    select?: UserRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecommendationInclude<ExtArgs> | null
    /**
     * Filter, which UserRecommendation to fetch.
     */
    where: UserRecommendationWhereUniqueInput
  }

  /**
   * UserRecommendation findFirst
   */
  export type UserRecommendationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecommendation
     */
    select?: UserRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecommendationInclude<ExtArgs> | null
    /**
     * Filter, which UserRecommendation to fetch.
     */
    where?: UserRecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRecommendations to fetch.
     */
    orderBy?: UserRecommendationOrderByWithRelationInput | UserRecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRecommendations.
     */
    cursor?: UserRecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRecommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRecommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRecommendations.
     */
    distinct?: UserRecommendationScalarFieldEnum | UserRecommendationScalarFieldEnum[]
  }

  /**
   * UserRecommendation findFirstOrThrow
   */
  export type UserRecommendationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecommendation
     */
    select?: UserRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecommendationInclude<ExtArgs> | null
    /**
     * Filter, which UserRecommendation to fetch.
     */
    where?: UserRecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRecommendations to fetch.
     */
    orderBy?: UserRecommendationOrderByWithRelationInput | UserRecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRecommendations.
     */
    cursor?: UserRecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRecommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRecommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRecommendations.
     */
    distinct?: UserRecommendationScalarFieldEnum | UserRecommendationScalarFieldEnum[]
  }

  /**
   * UserRecommendation findMany
   */
  export type UserRecommendationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecommendation
     */
    select?: UserRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecommendationInclude<ExtArgs> | null
    /**
     * Filter, which UserRecommendations to fetch.
     */
    where?: UserRecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRecommendations to fetch.
     */
    orderBy?: UserRecommendationOrderByWithRelationInput | UserRecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRecommendations.
     */
    cursor?: UserRecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRecommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRecommendations.
     */
    skip?: number
    distinct?: UserRecommendationScalarFieldEnum | UserRecommendationScalarFieldEnum[]
  }

  /**
   * UserRecommendation create
   */
  export type UserRecommendationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecommendation
     */
    select?: UserRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecommendationInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRecommendation.
     */
    data: XOR<UserRecommendationCreateInput, UserRecommendationUncheckedCreateInput>
  }

  /**
   * UserRecommendation createMany
   */
  export type UserRecommendationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRecommendations.
     */
    data: UserRecommendationCreateManyInput | UserRecommendationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRecommendation createManyAndReturn
   */
  export type UserRecommendationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecommendation
     */
    select?: UserRecommendationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserRecommendations.
     */
    data: UserRecommendationCreateManyInput | UserRecommendationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecommendationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRecommendation update
   */
  export type UserRecommendationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecommendation
     */
    select?: UserRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecommendationInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRecommendation.
     */
    data: XOR<UserRecommendationUpdateInput, UserRecommendationUncheckedUpdateInput>
    /**
     * Choose, which UserRecommendation to update.
     */
    where: UserRecommendationWhereUniqueInput
  }

  /**
   * UserRecommendation updateMany
   */
  export type UserRecommendationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRecommendations.
     */
    data: XOR<UserRecommendationUpdateManyMutationInput, UserRecommendationUncheckedUpdateManyInput>
    /**
     * Filter which UserRecommendations to update
     */
    where?: UserRecommendationWhereInput
  }

  /**
   * UserRecommendation upsert
   */
  export type UserRecommendationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecommendation
     */
    select?: UserRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecommendationInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRecommendation to update in case it exists.
     */
    where: UserRecommendationWhereUniqueInput
    /**
     * In case the UserRecommendation found by the `where` argument doesn't exist, create a new UserRecommendation with this data.
     */
    create: XOR<UserRecommendationCreateInput, UserRecommendationUncheckedCreateInput>
    /**
     * In case the UserRecommendation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRecommendationUpdateInput, UserRecommendationUncheckedUpdateInput>
  }

  /**
   * UserRecommendation delete
   */
  export type UserRecommendationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecommendation
     */
    select?: UserRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecommendationInclude<ExtArgs> | null
    /**
     * Filter which UserRecommendation to delete.
     */
    where: UserRecommendationWhereUniqueInput
  }

  /**
   * UserRecommendation deleteMany
   */
  export type UserRecommendationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRecommendations to delete
     */
    where?: UserRecommendationWhereInput
  }

  /**
   * UserRecommendation without action
   */
  export type UserRecommendationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecommendation
     */
    select?: UserRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecommendationInclude<ExtArgs> | null
  }


  /**
   * Model RecommendationEvent
   */

  export type AggregateRecommendationEvent = {
    _count: RecommendationEventCountAggregateOutputType | null
    _min: RecommendationEventMinAggregateOutputType | null
    _max: RecommendationEventMaxAggregateOutputType | null
  }

  export type RecommendationEventMinAggregateOutputType = {
    id: string | null
    userId: string | null
    recommendationId: string | null
    eventType: string | null
    createdAt: Date | null
  }

  export type RecommendationEventMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    recommendationId: string | null
    eventType: string | null
    createdAt: Date | null
  }

  export type RecommendationEventCountAggregateOutputType = {
    id: number
    userId: number
    recommendationId: number
    eventType: number
    context: number
    feedback: number
    createdAt: number
    _all: number
  }


  export type RecommendationEventMinAggregateInputType = {
    id?: true
    userId?: true
    recommendationId?: true
    eventType?: true
    createdAt?: true
  }

  export type RecommendationEventMaxAggregateInputType = {
    id?: true
    userId?: true
    recommendationId?: true
    eventType?: true
    createdAt?: true
  }

  export type RecommendationEventCountAggregateInputType = {
    id?: true
    userId?: true
    recommendationId?: true
    eventType?: true
    context?: true
    feedback?: true
    createdAt?: true
    _all?: true
  }

  export type RecommendationEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecommendationEvent to aggregate.
     */
    where?: RecommendationEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecommendationEvents to fetch.
     */
    orderBy?: RecommendationEventOrderByWithRelationInput | RecommendationEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecommendationEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecommendationEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecommendationEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecommendationEvents
    **/
    _count?: true | RecommendationEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecommendationEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecommendationEventMaxAggregateInputType
  }

  export type GetRecommendationEventAggregateType<T extends RecommendationEventAggregateArgs> = {
        [P in keyof T & keyof AggregateRecommendationEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecommendationEvent[P]>
      : GetScalarType<T[P], AggregateRecommendationEvent[P]>
  }




  export type RecommendationEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationEventWhereInput
    orderBy?: RecommendationEventOrderByWithAggregationInput | RecommendationEventOrderByWithAggregationInput[]
    by: RecommendationEventScalarFieldEnum[] | RecommendationEventScalarFieldEnum
    having?: RecommendationEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecommendationEventCountAggregateInputType | true
    _min?: RecommendationEventMinAggregateInputType
    _max?: RecommendationEventMaxAggregateInputType
  }

  export type RecommendationEventGroupByOutputType = {
    id: string
    userId: string
    recommendationId: string
    eventType: string
    context: JsonValue | null
    feedback: JsonValue | null
    createdAt: Date
    _count: RecommendationEventCountAggregateOutputType | null
    _min: RecommendationEventMinAggregateOutputType | null
    _max: RecommendationEventMaxAggregateOutputType | null
  }

  type GetRecommendationEventGroupByPayload<T extends RecommendationEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecommendationEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecommendationEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecommendationEventGroupByOutputType[P]>
            : GetScalarType<T[P], RecommendationEventGroupByOutputType[P]>
        }
      >
    >


  export type RecommendationEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recommendationId?: boolean
    eventType?: boolean
    context?: boolean
    feedback?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendationEvent"]>

  export type RecommendationEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recommendationId?: boolean
    eventType?: boolean
    context?: boolean
    feedback?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendationEvent"]>

  export type RecommendationEventSelectScalar = {
    id?: boolean
    userId?: boolean
    recommendationId?: boolean
    eventType?: boolean
    context?: boolean
    feedback?: boolean
    createdAt?: boolean
  }

  export type RecommendationEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RecommendationEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RecommendationEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecommendationEvent"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      recommendationId: string
      eventType: string
      context: Prisma.JsonValue | null
      feedback: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["recommendationEvent"]>
    composites: {}
  }

  type RecommendationEventGetPayload<S extends boolean | null | undefined | RecommendationEventDefaultArgs> = $Result.GetResult<Prisma.$RecommendationEventPayload, S>

  type RecommendationEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecommendationEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecommendationEventCountAggregateInputType | true
    }

  export interface RecommendationEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecommendationEvent'], meta: { name: 'RecommendationEvent' } }
    /**
     * Find zero or one RecommendationEvent that matches the filter.
     * @param {RecommendationEventFindUniqueArgs} args - Arguments to find a RecommendationEvent
     * @example
     * // Get one RecommendationEvent
     * const recommendationEvent = await prisma.recommendationEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecommendationEventFindUniqueArgs>(args: SelectSubset<T, RecommendationEventFindUniqueArgs<ExtArgs>>): Prisma__RecommendationEventClient<$Result.GetResult<Prisma.$RecommendationEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RecommendationEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecommendationEventFindUniqueOrThrowArgs} args - Arguments to find a RecommendationEvent
     * @example
     * // Get one RecommendationEvent
     * const recommendationEvent = await prisma.recommendationEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecommendationEventFindUniqueOrThrowArgs>(args: SelectSubset<T, RecommendationEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecommendationEventClient<$Result.GetResult<Prisma.$RecommendationEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RecommendationEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationEventFindFirstArgs} args - Arguments to find a RecommendationEvent
     * @example
     * // Get one RecommendationEvent
     * const recommendationEvent = await prisma.recommendationEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecommendationEventFindFirstArgs>(args?: SelectSubset<T, RecommendationEventFindFirstArgs<ExtArgs>>): Prisma__RecommendationEventClient<$Result.GetResult<Prisma.$RecommendationEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RecommendationEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationEventFindFirstOrThrowArgs} args - Arguments to find a RecommendationEvent
     * @example
     * // Get one RecommendationEvent
     * const recommendationEvent = await prisma.recommendationEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecommendationEventFindFirstOrThrowArgs>(args?: SelectSubset<T, RecommendationEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecommendationEventClient<$Result.GetResult<Prisma.$RecommendationEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RecommendationEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecommendationEvents
     * const recommendationEvents = await prisma.recommendationEvent.findMany()
     * 
     * // Get first 10 RecommendationEvents
     * const recommendationEvents = await prisma.recommendationEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recommendationEventWithIdOnly = await prisma.recommendationEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecommendationEventFindManyArgs>(args?: SelectSubset<T, RecommendationEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RecommendationEvent.
     * @param {RecommendationEventCreateArgs} args - Arguments to create a RecommendationEvent.
     * @example
     * // Create one RecommendationEvent
     * const RecommendationEvent = await prisma.recommendationEvent.create({
     *   data: {
     *     // ... data to create a RecommendationEvent
     *   }
     * })
     * 
     */
    create<T extends RecommendationEventCreateArgs>(args: SelectSubset<T, RecommendationEventCreateArgs<ExtArgs>>): Prisma__RecommendationEventClient<$Result.GetResult<Prisma.$RecommendationEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RecommendationEvents.
     * @param {RecommendationEventCreateManyArgs} args - Arguments to create many RecommendationEvents.
     * @example
     * // Create many RecommendationEvents
     * const recommendationEvent = await prisma.recommendationEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecommendationEventCreateManyArgs>(args?: SelectSubset<T, RecommendationEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RecommendationEvents and returns the data saved in the database.
     * @param {RecommendationEventCreateManyAndReturnArgs} args - Arguments to create many RecommendationEvents.
     * @example
     * // Create many RecommendationEvents
     * const recommendationEvent = await prisma.recommendationEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RecommendationEvents and only return the `id`
     * const recommendationEventWithIdOnly = await prisma.recommendationEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecommendationEventCreateManyAndReturnArgs>(args?: SelectSubset<T, RecommendationEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RecommendationEvent.
     * @param {RecommendationEventDeleteArgs} args - Arguments to delete one RecommendationEvent.
     * @example
     * // Delete one RecommendationEvent
     * const RecommendationEvent = await prisma.recommendationEvent.delete({
     *   where: {
     *     // ... filter to delete one RecommendationEvent
     *   }
     * })
     * 
     */
    delete<T extends RecommendationEventDeleteArgs>(args: SelectSubset<T, RecommendationEventDeleteArgs<ExtArgs>>): Prisma__RecommendationEventClient<$Result.GetResult<Prisma.$RecommendationEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RecommendationEvent.
     * @param {RecommendationEventUpdateArgs} args - Arguments to update one RecommendationEvent.
     * @example
     * // Update one RecommendationEvent
     * const recommendationEvent = await prisma.recommendationEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecommendationEventUpdateArgs>(args: SelectSubset<T, RecommendationEventUpdateArgs<ExtArgs>>): Prisma__RecommendationEventClient<$Result.GetResult<Prisma.$RecommendationEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RecommendationEvents.
     * @param {RecommendationEventDeleteManyArgs} args - Arguments to filter RecommendationEvents to delete.
     * @example
     * // Delete a few RecommendationEvents
     * const { count } = await prisma.recommendationEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecommendationEventDeleteManyArgs>(args?: SelectSubset<T, RecommendationEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecommendationEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecommendationEvents
     * const recommendationEvent = await prisma.recommendationEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecommendationEventUpdateManyArgs>(args: SelectSubset<T, RecommendationEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RecommendationEvent.
     * @param {RecommendationEventUpsertArgs} args - Arguments to update or create a RecommendationEvent.
     * @example
     * // Update or create a RecommendationEvent
     * const recommendationEvent = await prisma.recommendationEvent.upsert({
     *   create: {
     *     // ... data to create a RecommendationEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecommendationEvent we want to update
     *   }
     * })
     */
    upsert<T extends RecommendationEventUpsertArgs>(args: SelectSubset<T, RecommendationEventUpsertArgs<ExtArgs>>): Prisma__RecommendationEventClient<$Result.GetResult<Prisma.$RecommendationEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RecommendationEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationEventCountArgs} args - Arguments to filter RecommendationEvents to count.
     * @example
     * // Count the number of RecommendationEvents
     * const count = await prisma.recommendationEvent.count({
     *   where: {
     *     // ... the filter for the RecommendationEvents we want to count
     *   }
     * })
    **/
    count<T extends RecommendationEventCountArgs>(
      args?: Subset<T, RecommendationEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecommendationEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecommendationEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecommendationEventAggregateArgs>(args: Subset<T, RecommendationEventAggregateArgs>): Prisma.PrismaPromise<GetRecommendationEventAggregateType<T>>

    /**
     * Group by RecommendationEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecommendationEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecommendationEventGroupByArgs['orderBy'] }
        : { orderBy?: RecommendationEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecommendationEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecommendationEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecommendationEvent model
   */
  readonly fields: RecommendationEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecommendationEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecommendationEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RecommendationEvent model
   */ 
  interface RecommendationEventFieldRefs {
    readonly id: FieldRef<"RecommendationEvent", 'String'>
    readonly userId: FieldRef<"RecommendationEvent", 'String'>
    readonly recommendationId: FieldRef<"RecommendationEvent", 'String'>
    readonly eventType: FieldRef<"RecommendationEvent", 'String'>
    readonly context: FieldRef<"RecommendationEvent", 'Json'>
    readonly feedback: FieldRef<"RecommendationEvent", 'Json'>
    readonly createdAt: FieldRef<"RecommendationEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RecommendationEvent findUnique
   */
  export type RecommendationEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationEvent
     */
    select?: RecommendationEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationEventInclude<ExtArgs> | null
    /**
     * Filter, which RecommendationEvent to fetch.
     */
    where: RecommendationEventWhereUniqueInput
  }

  /**
   * RecommendationEvent findUniqueOrThrow
   */
  export type RecommendationEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationEvent
     */
    select?: RecommendationEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationEventInclude<ExtArgs> | null
    /**
     * Filter, which RecommendationEvent to fetch.
     */
    where: RecommendationEventWhereUniqueInput
  }

  /**
   * RecommendationEvent findFirst
   */
  export type RecommendationEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationEvent
     */
    select?: RecommendationEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationEventInclude<ExtArgs> | null
    /**
     * Filter, which RecommendationEvent to fetch.
     */
    where?: RecommendationEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecommendationEvents to fetch.
     */
    orderBy?: RecommendationEventOrderByWithRelationInput | RecommendationEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecommendationEvents.
     */
    cursor?: RecommendationEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecommendationEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecommendationEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecommendationEvents.
     */
    distinct?: RecommendationEventScalarFieldEnum | RecommendationEventScalarFieldEnum[]
  }

  /**
   * RecommendationEvent findFirstOrThrow
   */
  export type RecommendationEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationEvent
     */
    select?: RecommendationEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationEventInclude<ExtArgs> | null
    /**
     * Filter, which RecommendationEvent to fetch.
     */
    where?: RecommendationEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecommendationEvents to fetch.
     */
    orderBy?: RecommendationEventOrderByWithRelationInput | RecommendationEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecommendationEvents.
     */
    cursor?: RecommendationEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecommendationEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecommendationEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecommendationEvents.
     */
    distinct?: RecommendationEventScalarFieldEnum | RecommendationEventScalarFieldEnum[]
  }

  /**
   * RecommendationEvent findMany
   */
  export type RecommendationEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationEvent
     */
    select?: RecommendationEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationEventInclude<ExtArgs> | null
    /**
     * Filter, which RecommendationEvents to fetch.
     */
    where?: RecommendationEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecommendationEvents to fetch.
     */
    orderBy?: RecommendationEventOrderByWithRelationInput | RecommendationEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecommendationEvents.
     */
    cursor?: RecommendationEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecommendationEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecommendationEvents.
     */
    skip?: number
    distinct?: RecommendationEventScalarFieldEnum | RecommendationEventScalarFieldEnum[]
  }

  /**
   * RecommendationEvent create
   */
  export type RecommendationEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationEvent
     */
    select?: RecommendationEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationEventInclude<ExtArgs> | null
    /**
     * The data needed to create a RecommendationEvent.
     */
    data: XOR<RecommendationEventCreateInput, RecommendationEventUncheckedCreateInput>
  }

  /**
   * RecommendationEvent createMany
   */
  export type RecommendationEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecommendationEvents.
     */
    data: RecommendationEventCreateManyInput | RecommendationEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RecommendationEvent createManyAndReturn
   */
  export type RecommendationEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationEvent
     */
    select?: RecommendationEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RecommendationEvents.
     */
    data: RecommendationEventCreateManyInput | RecommendationEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecommendationEvent update
   */
  export type RecommendationEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationEvent
     */
    select?: RecommendationEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationEventInclude<ExtArgs> | null
    /**
     * The data needed to update a RecommendationEvent.
     */
    data: XOR<RecommendationEventUpdateInput, RecommendationEventUncheckedUpdateInput>
    /**
     * Choose, which RecommendationEvent to update.
     */
    where: RecommendationEventWhereUniqueInput
  }

  /**
   * RecommendationEvent updateMany
   */
  export type RecommendationEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecommendationEvents.
     */
    data: XOR<RecommendationEventUpdateManyMutationInput, RecommendationEventUncheckedUpdateManyInput>
    /**
     * Filter which RecommendationEvents to update
     */
    where?: RecommendationEventWhereInput
  }

  /**
   * RecommendationEvent upsert
   */
  export type RecommendationEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationEvent
     */
    select?: RecommendationEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationEventInclude<ExtArgs> | null
    /**
     * The filter to search for the RecommendationEvent to update in case it exists.
     */
    where: RecommendationEventWhereUniqueInput
    /**
     * In case the RecommendationEvent found by the `where` argument doesn't exist, create a new RecommendationEvent with this data.
     */
    create: XOR<RecommendationEventCreateInput, RecommendationEventUncheckedCreateInput>
    /**
     * In case the RecommendationEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecommendationEventUpdateInput, RecommendationEventUncheckedUpdateInput>
  }

  /**
   * RecommendationEvent delete
   */
  export type RecommendationEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationEvent
     */
    select?: RecommendationEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationEventInclude<ExtArgs> | null
    /**
     * Filter which RecommendationEvent to delete.
     */
    where: RecommendationEventWhereUniqueInput
  }

  /**
   * RecommendationEvent deleteMany
   */
  export type RecommendationEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecommendationEvents to delete
     */
    where?: RecommendationEventWhereInput
  }

  /**
   * RecommendationEvent without action
   */
  export type RecommendationEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecommendationEvent
     */
    select?: RecommendationEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationEventInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    passwordHash: 'passwordHash',
    hasCompletedOnboarding: 'hasCompletedOnboarding',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLoginAt: 'lastLoginAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tokenHash: 'tokenHash',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    userAgent: 'userAgent',
    ipAddress: 'ipAddress',
    createdAt: 'createdAt',
    lastUsedAt: 'lastUsedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AssetScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol',
    name: 'name',
    icon: 'icon',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssetScalarFieldEnum = (typeof AssetScalarFieldEnum)[keyof typeof AssetScalarFieldEnum]


  export const UserAssetScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    assetId: 'assetId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserAssetScalarFieldEnum = (typeof UserAssetScalarFieldEnum)[keyof typeof UserAssetScalarFieldEnum]


  export const ContentTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    icon: 'icon',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContentTypeScalarFieldEnum = (typeof ContentTypeScalarFieldEnum)[keyof typeof ContentTypeScalarFieldEnum]


  export const UserContentTypeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    contentTypeId: 'contentTypeId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserContentTypeScalarFieldEnum = (typeof UserContentTypeScalarFieldEnum)[keyof typeof UserContentTypeScalarFieldEnum]


  export const UserInvestorProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    investorType: 'investorType',
    riskTolerance: 'riskTolerance',
    investmentHorizon: 'investmentHorizon',
    experienceLevel: 'experienceLevel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserInvestorProfileScalarFieldEnum = (typeof UserInvestorProfileScalarFieldEnum)[keyof typeof UserInvestorProfileScalarFieldEnum]


  export const NewsItemScalarFieldEnum: {
    id: 'id',
    title: 'title',
    summary: 'summary',
    url: 'url',
    source: 'source',
    publishedAt: 'publishedAt',
    category: 'category',
    sentiment: 'sentiment',
    relevanceScore: 'relevanceScore',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NewsItemScalarFieldEnum = (typeof NewsItemScalarFieldEnum)[keyof typeof NewsItemScalarFieldEnum]


  export const MemeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    imageUrl: 'imageUrl',
    caption: 'caption',
    source: 'source',
    tags: 'tags',
    isActive: 'isActive',
    featuredDate: 'featuredDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MemeScalarFieldEnum = (typeof MemeScalarFieldEnum)[keyof typeof MemeScalarFieldEnum]


  export const PriceSnapshotScalarFieldEnum: {
    id: 'id',
    assetId: 'assetId',
    symbol: 'symbol',
    currentPrice: 'currentPrice',
    priceChange24h: 'priceChange24h',
    priceChangePercentage24h: 'priceChangePercentage24h',
    volume24h: 'volume24h',
    marketCap: 'marketCap',
    sparkline: 'sparkline',
    snapshotAt: 'snapshotAt',
    createdAt: 'createdAt'
  };

  export type PriceSnapshotScalarFieldEnum = (typeof PriceSnapshotScalarFieldEnum)[keyof typeof PriceSnapshotScalarFieldEnum]


  export const AIInsightScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    type: 'type',
    confidence: 'confidence',
    targetAssets: 'targetAssets',
    sentiment: 'sentiment',
    generatedAt: 'generatedAt',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AIInsightScalarFieldEnum = (typeof AIInsightScalarFieldEnum)[keyof typeof AIInsightScalarFieldEnum]


  export const VoteScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    section: 'section',
    itemId: 'itemId',
    vote: 'vote',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VoteScalarFieldEnum = (typeof VoteScalarFieldEnum)[keyof typeof VoteScalarFieldEnum]


  export const InteractionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    section: 'section',
    itemId: 'itemId',
    metadata: 'metadata',
    userAgent: 'userAgent',
    ipAddress: 'ipAddress',
    createdAt: 'createdAt'
  };

  export type InteractionScalarFieldEnum = (typeof InteractionScalarFieldEnum)[keyof typeof InteractionScalarFieldEnum]


  export const RecommendationProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    algorithm: 'algorithm',
    preferences: 'preferences',
    filters: 'filters',
    isActive: 'isActive',
    lastTrainedAt: 'lastTrainedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RecommendationProfileScalarFieldEnum = (typeof RecommendationProfileScalarFieldEnum)[keyof typeof RecommendationProfileScalarFieldEnum]


  export const UserRecommendationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    itemId: 'itemId',
    title: 'title',
    description: 'description',
    relevanceScore: 'relevanceScore',
    reason: 'reason',
    priority: 'priority',
    isRead: 'isRead',
    isDismissed: 'isDismissed',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserRecommendationScalarFieldEnum = (typeof UserRecommendationScalarFieldEnum)[keyof typeof UserRecommendationScalarFieldEnum]


  export const RecommendationEventScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    recommendationId: 'recommendationId',
    eventType: 'eventType',
    context: 'context',
    feedback: 'feedback',
    createdAt: 'createdAt'
  };

  export type RecommendationEventScalarFieldEnum = (typeof RecommendationEventScalarFieldEnum)[keyof typeof RecommendationEventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    hasCompletedOnboarding?: BoolFilter<"User"> | boolean
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: SessionListRelationFilter
    userAssets?: UserAssetListRelationFilter
    userContentTypes?: UserContentTypeListRelationFilter
    investorProfile?: XOR<UserInvestorProfileNullableRelationFilter, UserInvestorProfileWhereInput> | null
    votes?: VoteListRelationFilter
    interactions?: InteractionListRelationFilter
    recommendationProfile?: XOR<RecommendationProfileNullableRelationFilter, RecommendationProfileWhereInput> | null
    userRecommendations?: UserRecommendationListRelationFilter
    recommendationEvents?: RecommendationEventListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwordHash?: SortOrder
    hasCompletedOnboarding?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    userAssets?: UserAssetOrderByRelationAggregateInput
    userContentTypes?: UserContentTypeOrderByRelationAggregateInput
    investorProfile?: UserInvestorProfileOrderByWithRelationInput
    votes?: VoteOrderByRelationAggregateInput
    interactions?: InteractionOrderByRelationAggregateInput
    recommendationProfile?: RecommendationProfileOrderByWithRelationInput
    userRecommendations?: UserRecommendationOrderByRelationAggregateInput
    recommendationEvents?: RecommendationEventOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    hasCompletedOnboarding?: BoolFilter<"User"> | boolean
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: SessionListRelationFilter
    userAssets?: UserAssetListRelationFilter
    userContentTypes?: UserContentTypeListRelationFilter
    investorProfile?: XOR<UserInvestorProfileNullableRelationFilter, UserInvestorProfileWhereInput> | null
    votes?: VoteListRelationFilter
    interactions?: InteractionListRelationFilter
    recommendationProfile?: XOR<RecommendationProfileNullableRelationFilter, RecommendationProfileWhereInput> | null
    userRecommendations?: UserRecommendationListRelationFilter
    recommendationEvents?: RecommendationEventListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwordHash?: SortOrder
    hasCompletedOnboarding?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    hasCompletedOnboarding?: BoolWithAggregatesFilter<"User"> | boolean
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    tokenHash?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    isActive?: BoolFilter<"Session"> | boolean
    userAgent?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    lastUsedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    tokenHash?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    isActive?: BoolFilter<"Session"> | boolean
    userAgent?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    lastUsedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    tokenHash?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Session"> | boolean
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    lastUsedAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
  }

  export type AssetWhereInput = {
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    id?: StringFilter<"Asset"> | string
    symbol?: StringFilter<"Asset"> | string
    name?: StringFilter<"Asset"> | string
    icon?: StringNullableFilter<"Asset"> | string | null
    isActive?: BoolFilter<"Asset"> | boolean
    sortOrder?: IntFilter<"Asset"> | number
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    userAssets?: UserAssetListRelationFilter
    priceSnapshots?: PriceSnapshotListRelationFilter
  }

  export type AssetOrderByWithRelationInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    icon?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userAssets?: UserAssetOrderByRelationAggregateInput
    priceSnapshots?: PriceSnapshotOrderByRelationAggregateInput
  }

  export type AssetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    symbol?: string
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    name?: StringFilter<"Asset"> | string
    icon?: StringNullableFilter<"Asset"> | string | null
    isActive?: BoolFilter<"Asset"> | boolean
    sortOrder?: IntFilter<"Asset"> | number
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    userAssets?: UserAssetListRelationFilter
    priceSnapshots?: PriceSnapshotListRelationFilter
  }, "id" | "symbol">

  export type AssetOrderByWithAggregationInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    icon?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssetCountOrderByAggregateInput
    _avg?: AssetAvgOrderByAggregateInput
    _max?: AssetMaxOrderByAggregateInput
    _min?: AssetMinOrderByAggregateInput
    _sum?: AssetSumOrderByAggregateInput
  }

  export type AssetScalarWhereWithAggregatesInput = {
    AND?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    OR?: AssetScalarWhereWithAggregatesInput[]
    NOT?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Asset"> | string
    symbol?: StringWithAggregatesFilter<"Asset"> | string
    name?: StringWithAggregatesFilter<"Asset"> | string
    icon?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    isActive?: BoolWithAggregatesFilter<"Asset"> | boolean
    sortOrder?: IntWithAggregatesFilter<"Asset"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
  }

  export type UserAssetWhereInput = {
    AND?: UserAssetWhereInput | UserAssetWhereInput[]
    OR?: UserAssetWhereInput[]
    NOT?: UserAssetWhereInput | UserAssetWhereInput[]
    id?: StringFilter<"UserAsset"> | string
    userId?: StringFilter<"UserAsset"> | string
    assetId?: StringFilter<"UserAsset"> | string
    isActive?: BoolFilter<"UserAsset"> | boolean
    createdAt?: DateTimeFilter<"UserAsset"> | Date | string
    updatedAt?: DateTimeFilter<"UserAsset"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
  }

  export type UserAssetOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    assetId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
  }

  export type UserAssetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_assetId?: UserAssetUserIdAssetIdCompoundUniqueInput
    AND?: UserAssetWhereInput | UserAssetWhereInput[]
    OR?: UserAssetWhereInput[]
    NOT?: UserAssetWhereInput | UserAssetWhereInput[]
    userId?: StringFilter<"UserAsset"> | string
    assetId?: StringFilter<"UserAsset"> | string
    isActive?: BoolFilter<"UserAsset"> | boolean
    createdAt?: DateTimeFilter<"UserAsset"> | Date | string
    updatedAt?: DateTimeFilter<"UserAsset"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
  }, "id" | "userId_assetId">

  export type UserAssetOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    assetId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserAssetCountOrderByAggregateInput
    _max?: UserAssetMaxOrderByAggregateInput
    _min?: UserAssetMinOrderByAggregateInput
  }

  export type UserAssetScalarWhereWithAggregatesInput = {
    AND?: UserAssetScalarWhereWithAggregatesInput | UserAssetScalarWhereWithAggregatesInput[]
    OR?: UserAssetScalarWhereWithAggregatesInput[]
    NOT?: UserAssetScalarWhereWithAggregatesInput | UserAssetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserAsset"> | string
    userId?: StringWithAggregatesFilter<"UserAsset"> | string
    assetId?: StringWithAggregatesFilter<"UserAsset"> | string
    isActive?: BoolWithAggregatesFilter<"UserAsset"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserAsset"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserAsset"> | Date | string
  }

  export type ContentTypeWhereInput = {
    AND?: ContentTypeWhereInput | ContentTypeWhereInput[]
    OR?: ContentTypeWhereInput[]
    NOT?: ContentTypeWhereInput | ContentTypeWhereInput[]
    id?: StringFilter<"ContentType"> | string
    name?: StringFilter<"ContentType"> | string
    description?: StringFilter<"ContentType"> | string
    icon?: StringNullableFilter<"ContentType"> | string | null
    isActive?: BoolFilter<"ContentType"> | boolean
    sortOrder?: IntFilter<"ContentType"> | number
    createdAt?: DateTimeFilter<"ContentType"> | Date | string
    updatedAt?: DateTimeFilter<"ContentType"> | Date | string
    userContentTypes?: UserContentTypeListRelationFilter
  }

  export type ContentTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userContentTypes?: UserContentTypeOrderByRelationAggregateInput
  }

  export type ContentTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ContentTypeWhereInput | ContentTypeWhereInput[]
    OR?: ContentTypeWhereInput[]
    NOT?: ContentTypeWhereInput | ContentTypeWhereInput[]
    description?: StringFilter<"ContentType"> | string
    icon?: StringNullableFilter<"ContentType"> | string | null
    isActive?: BoolFilter<"ContentType"> | boolean
    sortOrder?: IntFilter<"ContentType"> | number
    createdAt?: DateTimeFilter<"ContentType"> | Date | string
    updatedAt?: DateTimeFilter<"ContentType"> | Date | string
    userContentTypes?: UserContentTypeListRelationFilter
  }, "id" | "name">

  export type ContentTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContentTypeCountOrderByAggregateInput
    _avg?: ContentTypeAvgOrderByAggregateInput
    _max?: ContentTypeMaxOrderByAggregateInput
    _min?: ContentTypeMinOrderByAggregateInput
    _sum?: ContentTypeSumOrderByAggregateInput
  }

  export type ContentTypeScalarWhereWithAggregatesInput = {
    AND?: ContentTypeScalarWhereWithAggregatesInput | ContentTypeScalarWhereWithAggregatesInput[]
    OR?: ContentTypeScalarWhereWithAggregatesInput[]
    NOT?: ContentTypeScalarWhereWithAggregatesInput | ContentTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContentType"> | string
    name?: StringWithAggregatesFilter<"ContentType"> | string
    description?: StringWithAggregatesFilter<"ContentType"> | string
    icon?: StringNullableWithAggregatesFilter<"ContentType"> | string | null
    isActive?: BoolWithAggregatesFilter<"ContentType"> | boolean
    sortOrder?: IntWithAggregatesFilter<"ContentType"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ContentType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ContentType"> | Date | string
  }

  export type UserContentTypeWhereInput = {
    AND?: UserContentTypeWhereInput | UserContentTypeWhereInput[]
    OR?: UserContentTypeWhereInput[]
    NOT?: UserContentTypeWhereInput | UserContentTypeWhereInput[]
    id?: StringFilter<"UserContentType"> | string
    userId?: StringFilter<"UserContentType"> | string
    contentTypeId?: StringFilter<"UserContentType"> | string
    isActive?: BoolFilter<"UserContentType"> | boolean
    createdAt?: DateTimeFilter<"UserContentType"> | Date | string
    updatedAt?: DateTimeFilter<"UserContentType"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    contentType?: XOR<ContentTypeRelationFilter, ContentTypeWhereInput>
  }

  export type UserContentTypeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    contentTypeId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    contentType?: ContentTypeOrderByWithRelationInput
  }

  export type UserContentTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_contentTypeId?: UserContentTypeUserIdContentTypeIdCompoundUniqueInput
    AND?: UserContentTypeWhereInput | UserContentTypeWhereInput[]
    OR?: UserContentTypeWhereInput[]
    NOT?: UserContentTypeWhereInput | UserContentTypeWhereInput[]
    userId?: StringFilter<"UserContentType"> | string
    contentTypeId?: StringFilter<"UserContentType"> | string
    isActive?: BoolFilter<"UserContentType"> | boolean
    createdAt?: DateTimeFilter<"UserContentType"> | Date | string
    updatedAt?: DateTimeFilter<"UserContentType"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    contentType?: XOR<ContentTypeRelationFilter, ContentTypeWhereInput>
  }, "id" | "userId_contentTypeId">

  export type UserContentTypeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    contentTypeId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserContentTypeCountOrderByAggregateInput
    _max?: UserContentTypeMaxOrderByAggregateInput
    _min?: UserContentTypeMinOrderByAggregateInput
  }

  export type UserContentTypeScalarWhereWithAggregatesInput = {
    AND?: UserContentTypeScalarWhereWithAggregatesInput | UserContentTypeScalarWhereWithAggregatesInput[]
    OR?: UserContentTypeScalarWhereWithAggregatesInput[]
    NOT?: UserContentTypeScalarWhereWithAggregatesInput | UserContentTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserContentType"> | string
    userId?: StringWithAggregatesFilter<"UserContentType"> | string
    contentTypeId?: StringWithAggregatesFilter<"UserContentType"> | string
    isActive?: BoolWithAggregatesFilter<"UserContentType"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserContentType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserContentType"> | Date | string
  }

  export type UserInvestorProfileWhereInput = {
    AND?: UserInvestorProfileWhereInput | UserInvestorProfileWhereInput[]
    OR?: UserInvestorProfileWhereInput[]
    NOT?: UserInvestorProfileWhereInput | UserInvestorProfileWhereInput[]
    id?: StringFilter<"UserInvestorProfile"> | string
    userId?: StringFilter<"UserInvestorProfile"> | string
    investorType?: StringFilter<"UserInvestorProfile"> | string
    riskTolerance?: StringNullableFilter<"UserInvestorProfile"> | string | null
    investmentHorizon?: StringNullableFilter<"UserInvestorProfile"> | string | null
    experienceLevel?: StringNullableFilter<"UserInvestorProfile"> | string | null
    createdAt?: DateTimeFilter<"UserInvestorProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserInvestorProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserInvestorProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    investorType?: SortOrder
    riskTolerance?: SortOrderInput | SortOrder
    investmentHorizon?: SortOrderInput | SortOrder
    experienceLevel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserInvestorProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserInvestorProfileWhereInput | UserInvestorProfileWhereInput[]
    OR?: UserInvestorProfileWhereInput[]
    NOT?: UserInvestorProfileWhereInput | UserInvestorProfileWhereInput[]
    investorType?: StringFilter<"UserInvestorProfile"> | string
    riskTolerance?: StringNullableFilter<"UserInvestorProfile"> | string | null
    investmentHorizon?: StringNullableFilter<"UserInvestorProfile"> | string | null
    experienceLevel?: StringNullableFilter<"UserInvestorProfile"> | string | null
    createdAt?: DateTimeFilter<"UserInvestorProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserInvestorProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserInvestorProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    investorType?: SortOrder
    riskTolerance?: SortOrderInput | SortOrder
    investmentHorizon?: SortOrderInput | SortOrder
    experienceLevel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserInvestorProfileCountOrderByAggregateInput
    _max?: UserInvestorProfileMaxOrderByAggregateInput
    _min?: UserInvestorProfileMinOrderByAggregateInput
  }

  export type UserInvestorProfileScalarWhereWithAggregatesInput = {
    AND?: UserInvestorProfileScalarWhereWithAggregatesInput | UserInvestorProfileScalarWhereWithAggregatesInput[]
    OR?: UserInvestorProfileScalarWhereWithAggregatesInput[]
    NOT?: UserInvestorProfileScalarWhereWithAggregatesInput | UserInvestorProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserInvestorProfile"> | string
    userId?: StringWithAggregatesFilter<"UserInvestorProfile"> | string
    investorType?: StringWithAggregatesFilter<"UserInvestorProfile"> | string
    riskTolerance?: StringNullableWithAggregatesFilter<"UserInvestorProfile"> | string | null
    investmentHorizon?: StringNullableWithAggregatesFilter<"UserInvestorProfile"> | string | null
    experienceLevel?: StringNullableWithAggregatesFilter<"UserInvestorProfile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserInvestorProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserInvestorProfile"> | Date | string
  }

  export type NewsItemWhereInput = {
    AND?: NewsItemWhereInput | NewsItemWhereInput[]
    OR?: NewsItemWhereInput[]
    NOT?: NewsItemWhereInput | NewsItemWhereInput[]
    id?: StringFilter<"NewsItem"> | string
    title?: StringFilter<"NewsItem"> | string
    summary?: StringFilter<"NewsItem"> | string
    url?: StringFilter<"NewsItem"> | string
    source?: StringFilter<"NewsItem"> | string
    publishedAt?: DateTimeFilter<"NewsItem"> | Date | string
    category?: StringNullableFilter<"NewsItem"> | string | null
    sentiment?: StringNullableFilter<"NewsItem"> | string | null
    relevanceScore?: FloatNullableFilter<"NewsItem"> | number | null
    isActive?: BoolFilter<"NewsItem"> | boolean
    createdAt?: DateTimeFilter<"NewsItem"> | Date | string
    updatedAt?: DateTimeFilter<"NewsItem"> | Date | string
  }

  export type NewsItemOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    url?: SortOrder
    source?: SortOrder
    publishedAt?: SortOrder
    category?: SortOrderInput | SortOrder
    sentiment?: SortOrderInput | SortOrder
    relevanceScore?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NewsItemWhereInput | NewsItemWhereInput[]
    OR?: NewsItemWhereInput[]
    NOT?: NewsItemWhereInput | NewsItemWhereInput[]
    title?: StringFilter<"NewsItem"> | string
    summary?: StringFilter<"NewsItem"> | string
    url?: StringFilter<"NewsItem"> | string
    source?: StringFilter<"NewsItem"> | string
    publishedAt?: DateTimeFilter<"NewsItem"> | Date | string
    category?: StringNullableFilter<"NewsItem"> | string | null
    sentiment?: StringNullableFilter<"NewsItem"> | string | null
    relevanceScore?: FloatNullableFilter<"NewsItem"> | number | null
    isActive?: BoolFilter<"NewsItem"> | boolean
    createdAt?: DateTimeFilter<"NewsItem"> | Date | string
    updatedAt?: DateTimeFilter<"NewsItem"> | Date | string
  }, "id">

  export type NewsItemOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    url?: SortOrder
    source?: SortOrder
    publishedAt?: SortOrder
    category?: SortOrderInput | SortOrder
    sentiment?: SortOrderInput | SortOrder
    relevanceScore?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NewsItemCountOrderByAggregateInput
    _avg?: NewsItemAvgOrderByAggregateInput
    _max?: NewsItemMaxOrderByAggregateInput
    _min?: NewsItemMinOrderByAggregateInput
    _sum?: NewsItemSumOrderByAggregateInput
  }

  export type NewsItemScalarWhereWithAggregatesInput = {
    AND?: NewsItemScalarWhereWithAggregatesInput | NewsItemScalarWhereWithAggregatesInput[]
    OR?: NewsItemScalarWhereWithAggregatesInput[]
    NOT?: NewsItemScalarWhereWithAggregatesInput | NewsItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NewsItem"> | string
    title?: StringWithAggregatesFilter<"NewsItem"> | string
    summary?: StringWithAggregatesFilter<"NewsItem"> | string
    url?: StringWithAggregatesFilter<"NewsItem"> | string
    source?: StringWithAggregatesFilter<"NewsItem"> | string
    publishedAt?: DateTimeWithAggregatesFilter<"NewsItem"> | Date | string
    category?: StringNullableWithAggregatesFilter<"NewsItem"> | string | null
    sentiment?: StringNullableWithAggregatesFilter<"NewsItem"> | string | null
    relevanceScore?: FloatNullableWithAggregatesFilter<"NewsItem"> | number | null
    isActive?: BoolWithAggregatesFilter<"NewsItem"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"NewsItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NewsItem"> | Date | string
  }

  export type MemeWhereInput = {
    AND?: MemeWhereInput | MemeWhereInput[]
    OR?: MemeWhereInput[]
    NOT?: MemeWhereInput | MemeWhereInput[]
    id?: StringFilter<"Meme"> | string
    title?: StringFilter<"Meme"> | string
    imageUrl?: StringFilter<"Meme"> | string
    caption?: StringFilter<"Meme"> | string
    source?: StringFilter<"Meme"> | string
    tags?: StringNullableListFilter<"Meme">
    isActive?: BoolFilter<"Meme"> | boolean
    featuredDate?: DateTimeFilter<"Meme"> | Date | string
    createdAt?: DateTimeFilter<"Meme"> | Date | string
    updatedAt?: DateTimeFilter<"Meme"> | Date | string
  }

  export type MemeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    imageUrl?: SortOrder
    caption?: SortOrder
    source?: SortOrder
    tags?: SortOrder
    isActive?: SortOrder
    featuredDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MemeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MemeWhereInput | MemeWhereInput[]
    OR?: MemeWhereInput[]
    NOT?: MemeWhereInput | MemeWhereInput[]
    title?: StringFilter<"Meme"> | string
    imageUrl?: StringFilter<"Meme"> | string
    caption?: StringFilter<"Meme"> | string
    source?: StringFilter<"Meme"> | string
    tags?: StringNullableListFilter<"Meme">
    isActive?: BoolFilter<"Meme"> | boolean
    featuredDate?: DateTimeFilter<"Meme"> | Date | string
    createdAt?: DateTimeFilter<"Meme"> | Date | string
    updatedAt?: DateTimeFilter<"Meme"> | Date | string
  }, "id">

  export type MemeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    imageUrl?: SortOrder
    caption?: SortOrder
    source?: SortOrder
    tags?: SortOrder
    isActive?: SortOrder
    featuredDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MemeCountOrderByAggregateInput
    _max?: MemeMaxOrderByAggregateInput
    _min?: MemeMinOrderByAggregateInput
  }

  export type MemeScalarWhereWithAggregatesInput = {
    AND?: MemeScalarWhereWithAggregatesInput | MemeScalarWhereWithAggregatesInput[]
    OR?: MemeScalarWhereWithAggregatesInput[]
    NOT?: MemeScalarWhereWithAggregatesInput | MemeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Meme"> | string
    title?: StringWithAggregatesFilter<"Meme"> | string
    imageUrl?: StringWithAggregatesFilter<"Meme"> | string
    caption?: StringWithAggregatesFilter<"Meme"> | string
    source?: StringWithAggregatesFilter<"Meme"> | string
    tags?: StringNullableListFilter<"Meme">
    isActive?: BoolWithAggregatesFilter<"Meme"> | boolean
    featuredDate?: DateTimeWithAggregatesFilter<"Meme"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Meme"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Meme"> | Date | string
  }

  export type PriceSnapshotWhereInput = {
    AND?: PriceSnapshotWhereInput | PriceSnapshotWhereInput[]
    OR?: PriceSnapshotWhereInput[]
    NOT?: PriceSnapshotWhereInput | PriceSnapshotWhereInput[]
    id?: StringFilter<"PriceSnapshot"> | string
    assetId?: StringFilter<"PriceSnapshot"> | string
    symbol?: StringFilter<"PriceSnapshot"> | string
    currentPrice?: FloatFilter<"PriceSnapshot"> | number
    priceChange24h?: FloatFilter<"PriceSnapshot"> | number
    priceChangePercentage24h?: FloatFilter<"PriceSnapshot"> | number
    volume24h?: FloatNullableFilter<"PriceSnapshot"> | number | null
    marketCap?: FloatNullableFilter<"PriceSnapshot"> | number | null
    sparkline?: FloatNullableListFilter<"PriceSnapshot">
    snapshotAt?: DateTimeFilter<"PriceSnapshot"> | Date | string
    createdAt?: DateTimeFilter<"PriceSnapshot"> | Date | string
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
  }

  export type PriceSnapshotOrderByWithRelationInput = {
    id?: SortOrder
    assetId?: SortOrder
    symbol?: SortOrder
    currentPrice?: SortOrder
    priceChange24h?: SortOrder
    priceChangePercentage24h?: SortOrder
    volume24h?: SortOrderInput | SortOrder
    marketCap?: SortOrderInput | SortOrder
    sparkline?: SortOrder
    snapshotAt?: SortOrder
    createdAt?: SortOrder
    asset?: AssetOrderByWithRelationInput
  }

  export type PriceSnapshotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PriceSnapshotWhereInput | PriceSnapshotWhereInput[]
    OR?: PriceSnapshotWhereInput[]
    NOT?: PriceSnapshotWhereInput | PriceSnapshotWhereInput[]
    assetId?: StringFilter<"PriceSnapshot"> | string
    symbol?: StringFilter<"PriceSnapshot"> | string
    currentPrice?: FloatFilter<"PriceSnapshot"> | number
    priceChange24h?: FloatFilter<"PriceSnapshot"> | number
    priceChangePercentage24h?: FloatFilter<"PriceSnapshot"> | number
    volume24h?: FloatNullableFilter<"PriceSnapshot"> | number | null
    marketCap?: FloatNullableFilter<"PriceSnapshot"> | number | null
    sparkline?: FloatNullableListFilter<"PriceSnapshot">
    snapshotAt?: DateTimeFilter<"PriceSnapshot"> | Date | string
    createdAt?: DateTimeFilter<"PriceSnapshot"> | Date | string
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
  }, "id">

  export type PriceSnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    assetId?: SortOrder
    symbol?: SortOrder
    currentPrice?: SortOrder
    priceChange24h?: SortOrder
    priceChangePercentage24h?: SortOrder
    volume24h?: SortOrderInput | SortOrder
    marketCap?: SortOrderInput | SortOrder
    sparkline?: SortOrder
    snapshotAt?: SortOrder
    createdAt?: SortOrder
    _count?: PriceSnapshotCountOrderByAggregateInput
    _avg?: PriceSnapshotAvgOrderByAggregateInput
    _max?: PriceSnapshotMaxOrderByAggregateInput
    _min?: PriceSnapshotMinOrderByAggregateInput
    _sum?: PriceSnapshotSumOrderByAggregateInput
  }

  export type PriceSnapshotScalarWhereWithAggregatesInput = {
    AND?: PriceSnapshotScalarWhereWithAggregatesInput | PriceSnapshotScalarWhereWithAggregatesInput[]
    OR?: PriceSnapshotScalarWhereWithAggregatesInput[]
    NOT?: PriceSnapshotScalarWhereWithAggregatesInput | PriceSnapshotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PriceSnapshot"> | string
    assetId?: StringWithAggregatesFilter<"PriceSnapshot"> | string
    symbol?: StringWithAggregatesFilter<"PriceSnapshot"> | string
    currentPrice?: FloatWithAggregatesFilter<"PriceSnapshot"> | number
    priceChange24h?: FloatWithAggregatesFilter<"PriceSnapshot"> | number
    priceChangePercentage24h?: FloatWithAggregatesFilter<"PriceSnapshot"> | number
    volume24h?: FloatNullableWithAggregatesFilter<"PriceSnapshot"> | number | null
    marketCap?: FloatNullableWithAggregatesFilter<"PriceSnapshot"> | number | null
    sparkline?: FloatNullableListFilter<"PriceSnapshot">
    snapshotAt?: DateTimeWithAggregatesFilter<"PriceSnapshot"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"PriceSnapshot"> | Date | string
  }

  export type AIInsightWhereInput = {
    AND?: AIInsightWhereInput | AIInsightWhereInput[]
    OR?: AIInsightWhereInput[]
    NOT?: AIInsightWhereInput | AIInsightWhereInput[]
    id?: StringFilter<"AIInsight"> | string
    title?: StringFilter<"AIInsight"> | string
    content?: StringFilter<"AIInsight"> | string
    type?: StringFilter<"AIInsight"> | string
    confidence?: FloatFilter<"AIInsight"> | number
    targetAssets?: StringNullableListFilter<"AIInsight">
    sentiment?: StringNullableFilter<"AIInsight"> | string | null
    generatedAt?: DateTimeFilter<"AIInsight"> | Date | string
    expiresAt?: DateTimeNullableFilter<"AIInsight"> | Date | string | null
    isActive?: BoolFilter<"AIInsight"> | boolean
    createdAt?: DateTimeFilter<"AIInsight"> | Date | string
    updatedAt?: DateTimeFilter<"AIInsight"> | Date | string
  }

  export type AIInsightOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    type?: SortOrder
    confidence?: SortOrder
    targetAssets?: SortOrder
    sentiment?: SortOrderInput | SortOrder
    generatedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIInsightWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AIInsightWhereInput | AIInsightWhereInput[]
    OR?: AIInsightWhereInput[]
    NOT?: AIInsightWhereInput | AIInsightWhereInput[]
    title?: StringFilter<"AIInsight"> | string
    content?: StringFilter<"AIInsight"> | string
    type?: StringFilter<"AIInsight"> | string
    confidence?: FloatFilter<"AIInsight"> | number
    targetAssets?: StringNullableListFilter<"AIInsight">
    sentiment?: StringNullableFilter<"AIInsight"> | string | null
    generatedAt?: DateTimeFilter<"AIInsight"> | Date | string
    expiresAt?: DateTimeNullableFilter<"AIInsight"> | Date | string | null
    isActive?: BoolFilter<"AIInsight"> | boolean
    createdAt?: DateTimeFilter<"AIInsight"> | Date | string
    updatedAt?: DateTimeFilter<"AIInsight"> | Date | string
  }, "id">

  export type AIInsightOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    type?: SortOrder
    confidence?: SortOrder
    targetAssets?: SortOrder
    sentiment?: SortOrderInput | SortOrder
    generatedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AIInsightCountOrderByAggregateInput
    _avg?: AIInsightAvgOrderByAggregateInput
    _max?: AIInsightMaxOrderByAggregateInput
    _min?: AIInsightMinOrderByAggregateInput
    _sum?: AIInsightSumOrderByAggregateInput
  }

  export type AIInsightScalarWhereWithAggregatesInput = {
    AND?: AIInsightScalarWhereWithAggregatesInput | AIInsightScalarWhereWithAggregatesInput[]
    OR?: AIInsightScalarWhereWithAggregatesInput[]
    NOT?: AIInsightScalarWhereWithAggregatesInput | AIInsightScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AIInsight"> | string
    title?: StringWithAggregatesFilter<"AIInsight"> | string
    content?: StringWithAggregatesFilter<"AIInsight"> | string
    type?: StringWithAggregatesFilter<"AIInsight"> | string
    confidence?: FloatWithAggregatesFilter<"AIInsight"> | number
    targetAssets?: StringNullableListFilter<"AIInsight">
    sentiment?: StringNullableWithAggregatesFilter<"AIInsight"> | string | null
    generatedAt?: DateTimeWithAggregatesFilter<"AIInsight"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"AIInsight"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"AIInsight"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AIInsight"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AIInsight"> | Date | string
  }

  export type VoteWhereInput = {
    AND?: VoteWhereInput | VoteWhereInput[]
    OR?: VoteWhereInput[]
    NOT?: VoteWhereInput | VoteWhereInput[]
    id?: StringFilter<"Vote"> | string
    userId?: StringFilter<"Vote"> | string
    section?: StringFilter<"Vote"> | string
    itemId?: StringFilter<"Vote"> | string
    vote?: StringFilter<"Vote"> | string
    isActive?: BoolFilter<"Vote"> | boolean
    createdAt?: DateTimeFilter<"Vote"> | Date | string
    updatedAt?: DateTimeFilter<"Vote"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type VoteOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    section?: SortOrder
    itemId?: SortOrder
    vote?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type VoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_section_itemId?: VoteUserIdSectionItemIdCompoundUniqueInput
    AND?: VoteWhereInput | VoteWhereInput[]
    OR?: VoteWhereInput[]
    NOT?: VoteWhereInput | VoteWhereInput[]
    userId?: StringFilter<"Vote"> | string
    section?: StringFilter<"Vote"> | string
    itemId?: StringFilter<"Vote"> | string
    vote?: StringFilter<"Vote"> | string
    isActive?: BoolFilter<"Vote"> | boolean
    createdAt?: DateTimeFilter<"Vote"> | Date | string
    updatedAt?: DateTimeFilter<"Vote"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_section_itemId">

  export type VoteOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    section?: SortOrder
    itemId?: SortOrder
    vote?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VoteCountOrderByAggregateInput
    _max?: VoteMaxOrderByAggregateInput
    _min?: VoteMinOrderByAggregateInput
  }

  export type VoteScalarWhereWithAggregatesInput = {
    AND?: VoteScalarWhereWithAggregatesInput | VoteScalarWhereWithAggregatesInput[]
    OR?: VoteScalarWhereWithAggregatesInput[]
    NOT?: VoteScalarWhereWithAggregatesInput | VoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vote"> | string
    userId?: StringWithAggregatesFilter<"Vote"> | string
    section?: StringWithAggregatesFilter<"Vote"> | string
    itemId?: StringWithAggregatesFilter<"Vote"> | string
    vote?: StringWithAggregatesFilter<"Vote"> | string
    isActive?: BoolWithAggregatesFilter<"Vote"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Vote"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Vote"> | Date | string
  }

  export type InteractionWhereInput = {
    AND?: InteractionWhereInput | InteractionWhereInput[]
    OR?: InteractionWhereInput[]
    NOT?: InteractionWhereInput | InteractionWhereInput[]
    id?: StringFilter<"Interaction"> | string
    userId?: StringFilter<"Interaction"> | string
    type?: StringFilter<"Interaction"> | string
    section?: StringFilter<"Interaction"> | string
    itemId?: StringNullableFilter<"Interaction"> | string | null
    metadata?: JsonNullableFilter<"Interaction">
    userAgent?: StringNullableFilter<"Interaction"> | string | null
    ipAddress?: StringNullableFilter<"Interaction"> | string | null
    createdAt?: DateTimeFilter<"Interaction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type InteractionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    section?: SortOrder
    itemId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type InteractionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InteractionWhereInput | InteractionWhereInput[]
    OR?: InteractionWhereInput[]
    NOT?: InteractionWhereInput | InteractionWhereInput[]
    userId?: StringFilter<"Interaction"> | string
    type?: StringFilter<"Interaction"> | string
    section?: StringFilter<"Interaction"> | string
    itemId?: StringNullableFilter<"Interaction"> | string | null
    metadata?: JsonNullableFilter<"Interaction">
    userAgent?: StringNullableFilter<"Interaction"> | string | null
    ipAddress?: StringNullableFilter<"Interaction"> | string | null
    createdAt?: DateTimeFilter<"Interaction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type InteractionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    section?: SortOrder
    itemId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: InteractionCountOrderByAggregateInput
    _max?: InteractionMaxOrderByAggregateInput
    _min?: InteractionMinOrderByAggregateInput
  }

  export type InteractionScalarWhereWithAggregatesInput = {
    AND?: InteractionScalarWhereWithAggregatesInput | InteractionScalarWhereWithAggregatesInput[]
    OR?: InteractionScalarWhereWithAggregatesInput[]
    NOT?: InteractionScalarWhereWithAggregatesInput | InteractionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Interaction"> | string
    userId?: StringWithAggregatesFilter<"Interaction"> | string
    type?: StringWithAggregatesFilter<"Interaction"> | string
    section?: StringWithAggregatesFilter<"Interaction"> | string
    itemId?: StringNullableWithAggregatesFilter<"Interaction"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Interaction">
    userAgent?: StringNullableWithAggregatesFilter<"Interaction"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"Interaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Interaction"> | Date | string
  }

  export type RecommendationProfileWhereInput = {
    AND?: RecommendationProfileWhereInput | RecommendationProfileWhereInput[]
    OR?: RecommendationProfileWhereInput[]
    NOT?: RecommendationProfileWhereInput | RecommendationProfileWhereInput[]
    id?: StringFilter<"RecommendationProfile"> | string
    userId?: StringFilter<"RecommendationProfile"> | string
    algorithm?: StringFilter<"RecommendationProfile"> | string
    preferences?: JsonFilter<"RecommendationProfile">
    filters?: JsonNullableFilter<"RecommendationProfile">
    isActive?: BoolFilter<"RecommendationProfile"> | boolean
    lastTrainedAt?: DateTimeNullableFilter<"RecommendationProfile"> | Date | string | null
    createdAt?: DateTimeFilter<"RecommendationProfile"> | Date | string
    updatedAt?: DateTimeFilter<"RecommendationProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RecommendationProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    algorithm?: SortOrder
    preferences?: SortOrder
    filters?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastTrainedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RecommendationProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: RecommendationProfileWhereInput | RecommendationProfileWhereInput[]
    OR?: RecommendationProfileWhereInput[]
    NOT?: RecommendationProfileWhereInput | RecommendationProfileWhereInput[]
    algorithm?: StringFilter<"RecommendationProfile"> | string
    preferences?: JsonFilter<"RecommendationProfile">
    filters?: JsonNullableFilter<"RecommendationProfile">
    isActive?: BoolFilter<"RecommendationProfile"> | boolean
    lastTrainedAt?: DateTimeNullableFilter<"RecommendationProfile"> | Date | string | null
    createdAt?: DateTimeFilter<"RecommendationProfile"> | Date | string
    updatedAt?: DateTimeFilter<"RecommendationProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type RecommendationProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    algorithm?: SortOrder
    preferences?: SortOrder
    filters?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastTrainedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RecommendationProfileCountOrderByAggregateInput
    _max?: RecommendationProfileMaxOrderByAggregateInput
    _min?: RecommendationProfileMinOrderByAggregateInput
  }

  export type RecommendationProfileScalarWhereWithAggregatesInput = {
    AND?: RecommendationProfileScalarWhereWithAggregatesInput | RecommendationProfileScalarWhereWithAggregatesInput[]
    OR?: RecommendationProfileScalarWhereWithAggregatesInput[]
    NOT?: RecommendationProfileScalarWhereWithAggregatesInput | RecommendationProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RecommendationProfile"> | string
    userId?: StringWithAggregatesFilter<"RecommendationProfile"> | string
    algorithm?: StringWithAggregatesFilter<"RecommendationProfile"> | string
    preferences?: JsonWithAggregatesFilter<"RecommendationProfile">
    filters?: JsonNullableWithAggregatesFilter<"RecommendationProfile">
    isActive?: BoolWithAggregatesFilter<"RecommendationProfile"> | boolean
    lastTrainedAt?: DateTimeNullableWithAggregatesFilter<"RecommendationProfile"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RecommendationProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RecommendationProfile"> | Date | string
  }

  export type UserRecommendationWhereInput = {
    AND?: UserRecommendationWhereInput | UserRecommendationWhereInput[]
    OR?: UserRecommendationWhereInput[]
    NOT?: UserRecommendationWhereInput | UserRecommendationWhereInput[]
    id?: StringFilter<"UserRecommendation"> | string
    userId?: StringFilter<"UserRecommendation"> | string
    type?: StringFilter<"UserRecommendation"> | string
    itemId?: StringFilter<"UserRecommendation"> | string
    title?: StringFilter<"UserRecommendation"> | string
    description?: StringNullableFilter<"UserRecommendation"> | string | null
    relevanceScore?: FloatFilter<"UserRecommendation"> | number
    reason?: StringNullableFilter<"UserRecommendation"> | string | null
    priority?: StringFilter<"UserRecommendation"> | string
    isRead?: BoolFilter<"UserRecommendation"> | boolean
    isDismissed?: BoolFilter<"UserRecommendation"> | boolean
    expiresAt?: DateTimeNullableFilter<"UserRecommendation"> | Date | string | null
    createdAt?: DateTimeFilter<"UserRecommendation"> | Date | string
    updatedAt?: DateTimeFilter<"UserRecommendation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserRecommendationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    itemId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    relevanceScore?: SortOrder
    reason?: SortOrderInput | SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    isDismissed?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserRecommendationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserRecommendationWhereInput | UserRecommendationWhereInput[]
    OR?: UserRecommendationWhereInput[]
    NOT?: UserRecommendationWhereInput | UserRecommendationWhereInput[]
    userId?: StringFilter<"UserRecommendation"> | string
    type?: StringFilter<"UserRecommendation"> | string
    itemId?: StringFilter<"UserRecommendation"> | string
    title?: StringFilter<"UserRecommendation"> | string
    description?: StringNullableFilter<"UserRecommendation"> | string | null
    relevanceScore?: FloatFilter<"UserRecommendation"> | number
    reason?: StringNullableFilter<"UserRecommendation"> | string | null
    priority?: StringFilter<"UserRecommendation"> | string
    isRead?: BoolFilter<"UserRecommendation"> | boolean
    isDismissed?: BoolFilter<"UserRecommendation"> | boolean
    expiresAt?: DateTimeNullableFilter<"UserRecommendation"> | Date | string | null
    createdAt?: DateTimeFilter<"UserRecommendation"> | Date | string
    updatedAt?: DateTimeFilter<"UserRecommendation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserRecommendationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    itemId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    relevanceScore?: SortOrder
    reason?: SortOrderInput | SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    isDismissed?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserRecommendationCountOrderByAggregateInput
    _avg?: UserRecommendationAvgOrderByAggregateInput
    _max?: UserRecommendationMaxOrderByAggregateInput
    _min?: UserRecommendationMinOrderByAggregateInput
    _sum?: UserRecommendationSumOrderByAggregateInput
  }

  export type UserRecommendationScalarWhereWithAggregatesInput = {
    AND?: UserRecommendationScalarWhereWithAggregatesInput | UserRecommendationScalarWhereWithAggregatesInput[]
    OR?: UserRecommendationScalarWhereWithAggregatesInput[]
    NOT?: UserRecommendationScalarWhereWithAggregatesInput | UserRecommendationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserRecommendation"> | string
    userId?: StringWithAggregatesFilter<"UserRecommendation"> | string
    type?: StringWithAggregatesFilter<"UserRecommendation"> | string
    itemId?: StringWithAggregatesFilter<"UserRecommendation"> | string
    title?: StringWithAggregatesFilter<"UserRecommendation"> | string
    description?: StringNullableWithAggregatesFilter<"UserRecommendation"> | string | null
    relevanceScore?: FloatWithAggregatesFilter<"UserRecommendation"> | number
    reason?: StringNullableWithAggregatesFilter<"UserRecommendation"> | string | null
    priority?: StringWithAggregatesFilter<"UserRecommendation"> | string
    isRead?: BoolWithAggregatesFilter<"UserRecommendation"> | boolean
    isDismissed?: BoolWithAggregatesFilter<"UserRecommendation"> | boolean
    expiresAt?: DateTimeNullableWithAggregatesFilter<"UserRecommendation"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserRecommendation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserRecommendation"> | Date | string
  }

  export type RecommendationEventWhereInput = {
    AND?: RecommendationEventWhereInput | RecommendationEventWhereInput[]
    OR?: RecommendationEventWhereInput[]
    NOT?: RecommendationEventWhereInput | RecommendationEventWhereInput[]
    id?: StringFilter<"RecommendationEvent"> | string
    userId?: StringFilter<"RecommendationEvent"> | string
    recommendationId?: StringFilter<"RecommendationEvent"> | string
    eventType?: StringFilter<"RecommendationEvent"> | string
    context?: JsonNullableFilter<"RecommendationEvent">
    feedback?: JsonNullableFilter<"RecommendationEvent">
    createdAt?: DateTimeFilter<"RecommendationEvent"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RecommendationEventOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    recommendationId?: SortOrder
    eventType?: SortOrder
    context?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RecommendationEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecommendationEventWhereInput | RecommendationEventWhereInput[]
    OR?: RecommendationEventWhereInput[]
    NOT?: RecommendationEventWhereInput | RecommendationEventWhereInput[]
    userId?: StringFilter<"RecommendationEvent"> | string
    recommendationId?: StringFilter<"RecommendationEvent"> | string
    eventType?: StringFilter<"RecommendationEvent"> | string
    context?: JsonNullableFilter<"RecommendationEvent">
    feedback?: JsonNullableFilter<"RecommendationEvent">
    createdAt?: DateTimeFilter<"RecommendationEvent"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type RecommendationEventOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    recommendationId?: SortOrder
    eventType?: SortOrder
    context?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: RecommendationEventCountOrderByAggregateInput
    _max?: RecommendationEventMaxOrderByAggregateInput
    _min?: RecommendationEventMinOrderByAggregateInput
  }

  export type RecommendationEventScalarWhereWithAggregatesInput = {
    AND?: RecommendationEventScalarWhereWithAggregatesInput | RecommendationEventScalarWhereWithAggregatesInput[]
    OR?: RecommendationEventScalarWhereWithAggregatesInput[]
    NOT?: RecommendationEventScalarWhereWithAggregatesInput | RecommendationEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RecommendationEvent"> | string
    userId?: StringWithAggregatesFilter<"RecommendationEvent"> | string
    recommendationId?: StringWithAggregatesFilter<"RecommendationEvent"> | string
    eventType?: StringWithAggregatesFilter<"RecommendationEvent"> | string
    context?: JsonNullableWithAggregatesFilter<"RecommendationEvent">
    feedback?: JsonNullableWithAggregatesFilter<"RecommendationEvent">
    createdAt?: DateTimeWithAggregatesFilter<"RecommendationEvent"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    userAssets?: UserAssetCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileCreateNestedOneWithoutUserInput
    votes?: VoteCreateNestedManyWithoutUserInput
    interactions?: InteractionCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userAssets?: UserAssetUncheckedCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeUncheckedCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileUncheckedCreateNestedOneWithoutUserInput
    votes?: VoteUncheckedCreateNestedManyWithoutUserInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileUncheckedCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationUncheckedCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUpdateOneWithoutUserNestedInput
    votes?: VoteUpdateManyWithoutUserNestedInput
    interactions?: InteractionUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUncheckedUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUncheckedUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUncheckedUpdateOneWithoutUserNestedInput
    votes?: VoteUncheckedUpdateManyWithoutUserNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUncheckedUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUncheckedUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateInput = {
    id?: string
    tokenHash: string
    expiresAt: Date | string
    isActive?: boolean
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    tokenHash: string
    expiresAt: Date | string
    isActive?: boolean
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    tokenHash: string
    expiresAt: Date | string
    isActive?: boolean
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssetCreateInput = {
    id?: string
    symbol: string
    name: string
    icon?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userAssets?: UserAssetCreateNestedManyWithoutAssetInput
    priceSnapshots?: PriceSnapshotCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateInput = {
    id?: string
    symbol: string
    name: string
    icon?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userAssets?: UserAssetUncheckedCreateNestedManyWithoutAssetInput
    priceSnapshots?: PriceSnapshotUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAssets?: UserAssetUpdateManyWithoutAssetNestedInput
    priceSnapshots?: PriceSnapshotUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAssets?: UserAssetUncheckedUpdateManyWithoutAssetNestedInput
    priceSnapshots?: PriceSnapshotUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetCreateManyInput = {
    id?: string
    symbol: string
    name: string
    icon?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssetCreateInput = {
    id?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserAssetsInput
    asset: AssetCreateNestedOneWithoutUserAssetsInput
  }

  export type UserAssetUncheckedCreateInput = {
    id?: string
    userId: string
    assetId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAssetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserAssetsNestedInput
    asset?: AssetUpdateOneRequiredWithoutUserAssetsNestedInput
  }

  export type UserAssetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssetCreateManyInput = {
    id?: string
    userId: string
    assetId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAssetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentTypeCreateInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userContentTypes?: UserContentTypeCreateNestedManyWithoutContentTypeInput
  }

  export type ContentTypeUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userContentTypes?: UserContentTypeUncheckedCreateNestedManyWithoutContentTypeInput
  }

  export type ContentTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userContentTypes?: UserContentTypeUpdateManyWithoutContentTypeNestedInput
  }

  export type ContentTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userContentTypes?: UserContentTypeUncheckedUpdateManyWithoutContentTypeNestedInput
  }

  export type ContentTypeCreateManyInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContentTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserContentTypeCreateInput = {
    id?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserContentTypesInput
    contentType: ContentTypeCreateNestedOneWithoutUserContentTypesInput
  }

  export type UserContentTypeUncheckedCreateInput = {
    id?: string
    userId: string
    contentTypeId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserContentTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserContentTypesNestedInput
    contentType?: ContentTypeUpdateOneRequiredWithoutUserContentTypesNestedInput
  }

  export type UserContentTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentTypeId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserContentTypeCreateManyInput = {
    id?: string
    userId: string
    contentTypeId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserContentTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserContentTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentTypeId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvestorProfileCreateInput = {
    id?: string
    investorType: string
    riskTolerance?: string | null
    investmentHorizon?: string | null
    experienceLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInvestorProfileInput
  }

  export type UserInvestorProfileUncheckedCreateInput = {
    id?: string
    userId: string
    investorType: string
    riskTolerance?: string | null
    investmentHorizon?: string | null
    experienceLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserInvestorProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    investorType?: StringFieldUpdateOperationsInput | string
    riskTolerance?: NullableStringFieldUpdateOperationsInput | string | null
    investmentHorizon?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInvestorProfileNestedInput
  }

  export type UserInvestorProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    investorType?: StringFieldUpdateOperationsInput | string
    riskTolerance?: NullableStringFieldUpdateOperationsInput | string | null
    investmentHorizon?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvestorProfileCreateManyInput = {
    id?: string
    userId: string
    investorType: string
    riskTolerance?: string | null
    investmentHorizon?: string | null
    experienceLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserInvestorProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    investorType?: StringFieldUpdateOperationsInput | string
    riskTolerance?: NullableStringFieldUpdateOperationsInput | string | null
    investmentHorizon?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvestorProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    investorType?: StringFieldUpdateOperationsInput | string
    riskTolerance?: NullableStringFieldUpdateOperationsInput | string | null
    investmentHorizon?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsItemCreateInput = {
    id?: string
    title: string
    summary: string
    url: string
    source: string
    publishedAt: Date | string
    category?: string | null
    sentiment?: string | null
    relevanceScore?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsItemUncheckedCreateInput = {
    id?: string
    title: string
    summary: string
    url: string
    source: string
    publishedAt: Date | string
    category?: string | null
    sentiment?: string | null
    relevanceScore?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    sentiment?: NullableStringFieldUpdateOperationsInput | string | null
    relevanceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    sentiment?: NullableStringFieldUpdateOperationsInput | string | null
    relevanceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsItemCreateManyInput = {
    id?: string
    title: string
    summary: string
    url: string
    source: string
    publishedAt: Date | string
    category?: string | null
    sentiment?: string | null
    relevanceScore?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    sentiment?: NullableStringFieldUpdateOperationsInput | string | null
    relevanceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    sentiment?: NullableStringFieldUpdateOperationsInput | string | null
    relevanceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemeCreateInput = {
    id?: string
    title: string
    imageUrl: string
    caption: string
    source: string
    tags?: MemeCreatetagsInput | string[]
    isActive?: boolean
    featuredDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MemeUncheckedCreateInput = {
    id?: string
    title: string
    imageUrl: string
    caption: string
    source: string
    tags?: MemeCreatetagsInput | string[]
    isActive?: boolean
    featuredDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MemeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    caption?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    tags?: MemeUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    featuredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    caption?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    tags?: MemeUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    featuredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemeCreateManyInput = {
    id?: string
    title: string
    imageUrl: string
    caption: string
    source: string
    tags?: MemeCreatetagsInput | string[]
    isActive?: boolean
    featuredDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MemeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    caption?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    tags?: MemeUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    featuredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    caption?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    tags?: MemeUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    featuredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceSnapshotCreateInput = {
    id?: string
    symbol: string
    currentPrice: number
    priceChange24h: number
    priceChangePercentage24h: number
    volume24h?: number | null
    marketCap?: number | null
    sparkline?: PriceSnapshotCreatesparklineInput | number[]
    snapshotAt: Date | string
    createdAt?: Date | string
    asset: AssetCreateNestedOneWithoutPriceSnapshotsInput
  }

  export type PriceSnapshotUncheckedCreateInput = {
    id?: string
    assetId: string
    symbol: string
    currentPrice: number
    priceChange24h: number
    priceChangePercentage24h: number
    volume24h?: number | null
    marketCap?: number | null
    sparkline?: PriceSnapshotCreatesparklineInput | number[]
    snapshotAt: Date | string
    createdAt?: Date | string
  }

  export type PriceSnapshotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    currentPrice?: FloatFieldUpdateOperationsInput | number
    priceChange24h?: FloatFieldUpdateOperationsInput | number
    priceChangePercentage24h?: FloatFieldUpdateOperationsInput | number
    volume24h?: NullableFloatFieldUpdateOperationsInput | number | null
    marketCap?: NullableFloatFieldUpdateOperationsInput | number | null
    sparkline?: PriceSnapshotUpdatesparklineInput | number[]
    snapshotAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutPriceSnapshotsNestedInput
  }

  export type PriceSnapshotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    currentPrice?: FloatFieldUpdateOperationsInput | number
    priceChange24h?: FloatFieldUpdateOperationsInput | number
    priceChangePercentage24h?: FloatFieldUpdateOperationsInput | number
    volume24h?: NullableFloatFieldUpdateOperationsInput | number | null
    marketCap?: NullableFloatFieldUpdateOperationsInput | number | null
    sparkline?: PriceSnapshotUpdatesparklineInput | number[]
    snapshotAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceSnapshotCreateManyInput = {
    id?: string
    assetId: string
    symbol: string
    currentPrice: number
    priceChange24h: number
    priceChangePercentage24h: number
    volume24h?: number | null
    marketCap?: number | null
    sparkline?: PriceSnapshotCreatesparklineInput | number[]
    snapshotAt: Date | string
    createdAt?: Date | string
  }

  export type PriceSnapshotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    currentPrice?: FloatFieldUpdateOperationsInput | number
    priceChange24h?: FloatFieldUpdateOperationsInput | number
    priceChangePercentage24h?: FloatFieldUpdateOperationsInput | number
    volume24h?: NullableFloatFieldUpdateOperationsInput | number | null
    marketCap?: NullableFloatFieldUpdateOperationsInput | number | null
    sparkline?: PriceSnapshotUpdatesparklineInput | number[]
    snapshotAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceSnapshotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    currentPrice?: FloatFieldUpdateOperationsInput | number
    priceChange24h?: FloatFieldUpdateOperationsInput | number
    priceChangePercentage24h?: FloatFieldUpdateOperationsInput | number
    volume24h?: NullableFloatFieldUpdateOperationsInput | number | null
    marketCap?: NullableFloatFieldUpdateOperationsInput | number | null
    sparkline?: PriceSnapshotUpdatesparklineInput | number[]
    snapshotAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInsightCreateInput = {
    id?: string
    title: string
    content: string
    type: string
    confidence: number
    targetAssets?: AIInsightCreatetargetAssetsInput | string[]
    sentiment?: string | null
    generatedAt: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AIInsightUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    type: string
    confidence: number
    targetAssets?: AIInsightCreatetargetAssetsInput | string[]
    sentiment?: string | null
    generatedAt: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AIInsightUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    confidence?: FloatFieldUpdateOperationsInput | number
    targetAssets?: AIInsightUpdatetargetAssetsInput | string[]
    sentiment?: NullableStringFieldUpdateOperationsInput | string | null
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInsightUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    confidence?: FloatFieldUpdateOperationsInput | number
    targetAssets?: AIInsightUpdatetargetAssetsInput | string[]
    sentiment?: NullableStringFieldUpdateOperationsInput | string | null
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInsightCreateManyInput = {
    id?: string
    title: string
    content: string
    type: string
    confidence: number
    targetAssets?: AIInsightCreatetargetAssetsInput | string[]
    sentiment?: string | null
    generatedAt: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AIInsightUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    confidence?: FloatFieldUpdateOperationsInput | number
    targetAssets?: AIInsightUpdatetargetAssetsInput | string[]
    sentiment?: NullableStringFieldUpdateOperationsInput | string | null
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInsightUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    confidence?: FloatFieldUpdateOperationsInput | number
    targetAssets?: AIInsightUpdatetargetAssetsInput | string[]
    sentiment?: NullableStringFieldUpdateOperationsInput | string | null
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteCreateInput = {
    id?: string
    section: string
    itemId: string
    vote: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateInput = {
    id?: string
    userId: string
    section: string
    itemId: string
    vote: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    vote?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    vote?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteCreateManyInput = {
    id?: string
    userId: string
    section: string
    itemId: string
    vote: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    vote?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    vote?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionCreateInput = {
    id?: string
    type: string
    section: string
    itemId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutInteractionsInput
  }

  export type InteractionUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    section: string
    itemId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type InteractionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInteractionsNestedInput
  }

  export type InteractionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionCreateManyInput = {
    id?: string
    userId: string
    type: string
    section: string
    itemId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type InteractionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationProfileCreateInput = {
    id?: string
    algorithm: string
    preferences: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTrainedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRecommendationProfileInput
  }

  export type RecommendationProfileUncheckedCreateInput = {
    id?: string
    userId: string
    algorithm: string
    preferences: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTrainedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecommendationProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTrainedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRecommendationProfileNestedInput
  }

  export type RecommendationProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTrainedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationProfileCreateManyInput = {
    id?: string
    userId: string
    algorithm: string
    preferences: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTrainedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecommendationProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTrainedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTrainedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecommendationCreateInput = {
    id?: string
    type: string
    itemId: string
    title: string
    description?: string | null
    relevanceScore: number
    reason?: string | null
    priority: string
    isRead?: boolean
    isDismissed?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserRecommendationsInput
  }

  export type UserRecommendationUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    itemId: string
    title: string
    description?: string | null
    relevanceScore: number
    reason?: string | null
    priority: string
    isRead?: boolean
    isDismissed?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRecommendationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relevanceScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isDismissed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserRecommendationsNestedInput
  }

  export type UserRecommendationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relevanceScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isDismissed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecommendationCreateManyInput = {
    id?: string
    userId: string
    type: string
    itemId: string
    title: string
    description?: string | null
    relevanceScore: number
    reason?: string | null
    priority: string
    isRead?: boolean
    isDismissed?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRecommendationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relevanceScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isDismissed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecommendationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relevanceScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isDismissed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationEventCreateInput = {
    id?: string
    recommendationId: string
    eventType: string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRecommendationEventsInput
  }

  export type RecommendationEventUncheckedCreateInput = {
    id?: string
    userId: string
    recommendationId: string
    eventType: string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RecommendationEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recommendationId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRecommendationEventsNestedInput
  }

  export type RecommendationEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    recommendationId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationEventCreateManyInput = {
    id?: string
    userId: string
    recommendationId: string
    eventType: string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RecommendationEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    recommendationId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    recommendationId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type UserAssetListRelationFilter = {
    every?: UserAssetWhereInput
    some?: UserAssetWhereInput
    none?: UserAssetWhereInput
  }

  export type UserContentTypeListRelationFilter = {
    every?: UserContentTypeWhereInput
    some?: UserContentTypeWhereInput
    none?: UserContentTypeWhereInput
  }

  export type UserInvestorProfileNullableRelationFilter = {
    is?: UserInvestorProfileWhereInput | null
    isNot?: UserInvestorProfileWhereInput | null
  }

  export type VoteListRelationFilter = {
    every?: VoteWhereInput
    some?: VoteWhereInput
    none?: VoteWhereInput
  }

  export type InteractionListRelationFilter = {
    every?: InteractionWhereInput
    some?: InteractionWhereInput
    none?: InteractionWhereInput
  }

  export type RecommendationProfileNullableRelationFilter = {
    is?: RecommendationProfileWhereInput | null
    isNot?: RecommendationProfileWhereInput | null
  }

  export type UserRecommendationListRelationFilter = {
    every?: UserRecommendationWhereInput
    some?: UserRecommendationWhereInput
    none?: UserRecommendationWhereInput
  }

  export type RecommendationEventListRelationFilter = {
    every?: RecommendationEventWhereInput
    some?: RecommendationEventWhereInput
    none?: RecommendationEventWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAssetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserContentTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InteractionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRecommendationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecommendationEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwordHash?: SortOrder
    hasCompletedOnboarding?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwordHash?: SortOrder
    hasCompletedOnboarding?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwordHash?: SortOrder
    hasCompletedOnboarding?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PriceSnapshotListRelationFilter = {
    every?: PriceSnapshotWhereInput
    some?: PriceSnapshotWhereInput
    none?: PriceSnapshotWhereInput
  }

  export type PriceSnapshotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetCountOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type AssetMaxOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetMinOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type AssetRelationFilter = {
    is?: AssetWhereInput
    isNot?: AssetWhereInput
  }

  export type UserAssetUserIdAssetIdCompoundUniqueInput = {
    userId: string
    assetId: string
  }

  export type UserAssetCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    assetId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAssetMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    assetId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAssetMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    assetId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContentTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContentTypeAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type ContentTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContentTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContentTypeSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type ContentTypeRelationFilter = {
    is?: ContentTypeWhereInput
    isNot?: ContentTypeWhereInput
  }

  export type UserContentTypeUserIdContentTypeIdCompoundUniqueInput = {
    userId: string
    contentTypeId: string
  }

  export type UserContentTypeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contentTypeId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserContentTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contentTypeId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserContentTypeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contentTypeId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserInvestorProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    investorType?: SortOrder
    riskTolerance?: SortOrder
    investmentHorizon?: SortOrder
    experienceLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserInvestorProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    investorType?: SortOrder
    riskTolerance?: SortOrder
    investmentHorizon?: SortOrder
    experienceLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserInvestorProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    investorType?: SortOrder
    riskTolerance?: SortOrder
    investmentHorizon?: SortOrder
    experienceLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NewsItemCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    url?: SortOrder
    source?: SortOrder
    publishedAt?: SortOrder
    category?: SortOrder
    sentiment?: SortOrder
    relevanceScore?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsItemAvgOrderByAggregateInput = {
    relevanceScore?: SortOrder
  }

  export type NewsItemMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    url?: SortOrder
    source?: SortOrder
    publishedAt?: SortOrder
    category?: SortOrder
    sentiment?: SortOrder
    relevanceScore?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsItemMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    url?: SortOrder
    source?: SortOrder
    publishedAt?: SortOrder
    category?: SortOrder
    sentiment?: SortOrder
    relevanceScore?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsItemSumOrderByAggregateInput = {
    relevanceScore?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type MemeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    imageUrl?: SortOrder
    caption?: SortOrder
    source?: SortOrder
    tags?: SortOrder
    isActive?: SortOrder
    featuredDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MemeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    imageUrl?: SortOrder
    caption?: SortOrder
    source?: SortOrder
    isActive?: SortOrder
    featuredDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MemeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    imageUrl?: SortOrder
    caption?: SortOrder
    source?: SortOrder
    isActive?: SortOrder
    featuredDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    has?: number | FloatFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListFloatFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListFloatFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type PriceSnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    symbol?: SortOrder
    currentPrice?: SortOrder
    priceChange24h?: SortOrder
    priceChangePercentage24h?: SortOrder
    volume24h?: SortOrder
    marketCap?: SortOrder
    sparkline?: SortOrder
    snapshotAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PriceSnapshotAvgOrderByAggregateInput = {
    currentPrice?: SortOrder
    priceChange24h?: SortOrder
    priceChangePercentage24h?: SortOrder
    volume24h?: SortOrder
    marketCap?: SortOrder
    sparkline?: SortOrder
  }

  export type PriceSnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    symbol?: SortOrder
    currentPrice?: SortOrder
    priceChange24h?: SortOrder
    priceChangePercentage24h?: SortOrder
    volume24h?: SortOrder
    marketCap?: SortOrder
    snapshotAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PriceSnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    symbol?: SortOrder
    currentPrice?: SortOrder
    priceChange24h?: SortOrder
    priceChangePercentage24h?: SortOrder
    volume24h?: SortOrder
    marketCap?: SortOrder
    snapshotAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PriceSnapshotSumOrderByAggregateInput = {
    currentPrice?: SortOrder
    priceChange24h?: SortOrder
    priceChangePercentage24h?: SortOrder
    volume24h?: SortOrder
    marketCap?: SortOrder
    sparkline?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AIInsightCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    type?: SortOrder
    confidence?: SortOrder
    targetAssets?: SortOrder
    sentiment?: SortOrder
    generatedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIInsightAvgOrderByAggregateInput = {
    confidence?: SortOrder
  }

  export type AIInsightMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    type?: SortOrder
    confidence?: SortOrder
    sentiment?: SortOrder
    generatedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIInsightMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    type?: SortOrder
    confidence?: SortOrder
    sentiment?: SortOrder
    generatedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIInsightSumOrderByAggregateInput = {
    confidence?: SortOrder
  }

  export type VoteUserIdSectionItemIdCompoundUniqueInput = {
    userId: string
    section: string
    itemId: string
  }

  export type VoteCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    section?: SortOrder
    itemId?: SortOrder
    vote?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VoteMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    section?: SortOrder
    itemId?: SortOrder
    vote?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VoteMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    section?: SortOrder
    itemId?: SortOrder
    vote?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type InteractionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    section?: SortOrder
    itemId?: SortOrder
    metadata?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type InteractionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    section?: SortOrder
    itemId?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type InteractionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    section?: SortOrder
    itemId?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type RecommendationProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    algorithm?: SortOrder
    preferences?: SortOrder
    filters?: SortOrder
    isActive?: SortOrder
    lastTrainedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecommendationProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    algorithm?: SortOrder
    isActive?: SortOrder
    lastTrainedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecommendationProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    algorithm?: SortOrder
    isActive?: SortOrder
    lastTrainedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type UserRecommendationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    itemId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    relevanceScore?: SortOrder
    reason?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    isDismissed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRecommendationAvgOrderByAggregateInput = {
    relevanceScore?: SortOrder
  }

  export type UserRecommendationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    itemId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    relevanceScore?: SortOrder
    reason?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    isDismissed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRecommendationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    itemId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    relevanceScore?: SortOrder
    reason?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    isDismissed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRecommendationSumOrderByAggregateInput = {
    relevanceScore?: SortOrder
  }

  export type RecommendationEventCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recommendationId?: SortOrder
    eventType?: SortOrder
    context?: SortOrder
    feedback?: SortOrder
    createdAt?: SortOrder
  }

  export type RecommendationEventMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recommendationId?: SortOrder
    eventType?: SortOrder
    createdAt?: SortOrder
  }

  export type RecommendationEventMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recommendationId?: SortOrder
    eventType?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserAssetCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAssetCreateWithoutUserInput, UserAssetUncheckedCreateWithoutUserInput> | UserAssetCreateWithoutUserInput[] | UserAssetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAssetCreateOrConnectWithoutUserInput | UserAssetCreateOrConnectWithoutUserInput[]
    createMany?: UserAssetCreateManyUserInputEnvelope
    connect?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
  }

  export type UserContentTypeCreateNestedManyWithoutUserInput = {
    create?: XOR<UserContentTypeCreateWithoutUserInput, UserContentTypeUncheckedCreateWithoutUserInput> | UserContentTypeCreateWithoutUserInput[] | UserContentTypeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserContentTypeCreateOrConnectWithoutUserInput | UserContentTypeCreateOrConnectWithoutUserInput[]
    createMany?: UserContentTypeCreateManyUserInputEnvelope
    connect?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
  }

  export type UserInvestorProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserInvestorProfileCreateWithoutUserInput, UserInvestorProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserInvestorProfileCreateOrConnectWithoutUserInput
    connect?: UserInvestorProfileWhereUniqueInput
  }

  export type VoteCreateNestedManyWithoutUserInput = {
    create?: XOR<VoteCreateWithoutUserInput, VoteUncheckedCreateWithoutUserInput> | VoteCreateWithoutUserInput[] | VoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutUserInput | VoteCreateOrConnectWithoutUserInput[]
    createMany?: VoteCreateManyUserInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type InteractionCreateNestedManyWithoutUserInput = {
    create?: XOR<InteractionCreateWithoutUserInput, InteractionUncheckedCreateWithoutUserInput> | InteractionCreateWithoutUserInput[] | InteractionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InteractionCreateOrConnectWithoutUserInput | InteractionCreateOrConnectWithoutUserInput[]
    createMany?: InteractionCreateManyUserInputEnvelope
    connect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
  }

  export type RecommendationProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<RecommendationProfileCreateWithoutUserInput, RecommendationProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: RecommendationProfileCreateOrConnectWithoutUserInput
    connect?: RecommendationProfileWhereUniqueInput
  }

  export type UserRecommendationCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRecommendationCreateWithoutUserInput, UserRecommendationUncheckedCreateWithoutUserInput> | UserRecommendationCreateWithoutUserInput[] | UserRecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRecommendationCreateOrConnectWithoutUserInput | UserRecommendationCreateOrConnectWithoutUserInput[]
    createMany?: UserRecommendationCreateManyUserInputEnvelope
    connect?: UserRecommendationWhereUniqueInput | UserRecommendationWhereUniqueInput[]
  }

  export type RecommendationEventCreateNestedManyWithoutUserInput = {
    create?: XOR<RecommendationEventCreateWithoutUserInput, RecommendationEventUncheckedCreateWithoutUserInput> | RecommendationEventCreateWithoutUserInput[] | RecommendationEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationEventCreateOrConnectWithoutUserInput | RecommendationEventCreateOrConnectWithoutUserInput[]
    createMany?: RecommendationEventCreateManyUserInputEnvelope
    connect?: RecommendationEventWhereUniqueInput | RecommendationEventWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserAssetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAssetCreateWithoutUserInput, UserAssetUncheckedCreateWithoutUserInput> | UserAssetCreateWithoutUserInput[] | UserAssetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAssetCreateOrConnectWithoutUserInput | UserAssetCreateOrConnectWithoutUserInput[]
    createMany?: UserAssetCreateManyUserInputEnvelope
    connect?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
  }

  export type UserContentTypeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserContentTypeCreateWithoutUserInput, UserContentTypeUncheckedCreateWithoutUserInput> | UserContentTypeCreateWithoutUserInput[] | UserContentTypeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserContentTypeCreateOrConnectWithoutUserInput | UserContentTypeCreateOrConnectWithoutUserInput[]
    createMany?: UserContentTypeCreateManyUserInputEnvelope
    connect?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
  }

  export type UserInvestorProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserInvestorProfileCreateWithoutUserInput, UserInvestorProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserInvestorProfileCreateOrConnectWithoutUserInput
    connect?: UserInvestorProfileWhereUniqueInput
  }

  export type VoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VoteCreateWithoutUserInput, VoteUncheckedCreateWithoutUserInput> | VoteCreateWithoutUserInput[] | VoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutUserInput | VoteCreateOrConnectWithoutUserInput[]
    createMany?: VoteCreateManyUserInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type InteractionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InteractionCreateWithoutUserInput, InteractionUncheckedCreateWithoutUserInput> | InteractionCreateWithoutUserInput[] | InteractionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InteractionCreateOrConnectWithoutUserInput | InteractionCreateOrConnectWithoutUserInput[]
    createMany?: InteractionCreateManyUserInputEnvelope
    connect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
  }

  export type RecommendationProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<RecommendationProfileCreateWithoutUserInput, RecommendationProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: RecommendationProfileCreateOrConnectWithoutUserInput
    connect?: RecommendationProfileWhereUniqueInput
  }

  export type UserRecommendationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRecommendationCreateWithoutUserInput, UserRecommendationUncheckedCreateWithoutUserInput> | UserRecommendationCreateWithoutUserInput[] | UserRecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRecommendationCreateOrConnectWithoutUserInput | UserRecommendationCreateOrConnectWithoutUserInput[]
    createMany?: UserRecommendationCreateManyUserInputEnvelope
    connect?: UserRecommendationWhereUniqueInput | UserRecommendationWhereUniqueInput[]
  }

  export type RecommendationEventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RecommendationEventCreateWithoutUserInput, RecommendationEventUncheckedCreateWithoutUserInput> | RecommendationEventCreateWithoutUserInput[] | RecommendationEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationEventCreateOrConnectWithoutUserInput | RecommendationEventCreateOrConnectWithoutUserInput[]
    createMany?: RecommendationEventCreateManyUserInputEnvelope
    connect?: RecommendationEventWhereUniqueInput | RecommendationEventWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserAssetUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAssetCreateWithoutUserInput, UserAssetUncheckedCreateWithoutUserInput> | UserAssetCreateWithoutUserInput[] | UserAssetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAssetCreateOrConnectWithoutUserInput | UserAssetCreateOrConnectWithoutUserInput[]
    upsert?: UserAssetUpsertWithWhereUniqueWithoutUserInput | UserAssetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAssetCreateManyUserInputEnvelope
    set?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    disconnect?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    delete?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    connect?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    update?: UserAssetUpdateWithWhereUniqueWithoutUserInput | UserAssetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAssetUpdateManyWithWhereWithoutUserInput | UserAssetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAssetScalarWhereInput | UserAssetScalarWhereInput[]
  }

  export type UserContentTypeUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserContentTypeCreateWithoutUserInput, UserContentTypeUncheckedCreateWithoutUserInput> | UserContentTypeCreateWithoutUserInput[] | UserContentTypeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserContentTypeCreateOrConnectWithoutUserInput | UserContentTypeCreateOrConnectWithoutUserInput[]
    upsert?: UserContentTypeUpsertWithWhereUniqueWithoutUserInput | UserContentTypeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserContentTypeCreateManyUserInputEnvelope
    set?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    disconnect?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    delete?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    connect?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    update?: UserContentTypeUpdateWithWhereUniqueWithoutUserInput | UserContentTypeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserContentTypeUpdateManyWithWhereWithoutUserInput | UserContentTypeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserContentTypeScalarWhereInput | UserContentTypeScalarWhereInput[]
  }

  export type UserInvestorProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserInvestorProfileCreateWithoutUserInput, UserInvestorProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserInvestorProfileCreateOrConnectWithoutUserInput
    upsert?: UserInvestorProfileUpsertWithoutUserInput
    disconnect?: UserInvestorProfileWhereInput | boolean
    delete?: UserInvestorProfileWhereInput | boolean
    connect?: UserInvestorProfileWhereUniqueInput
    update?: XOR<XOR<UserInvestorProfileUpdateToOneWithWhereWithoutUserInput, UserInvestorProfileUpdateWithoutUserInput>, UserInvestorProfileUncheckedUpdateWithoutUserInput>
  }

  export type VoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<VoteCreateWithoutUserInput, VoteUncheckedCreateWithoutUserInput> | VoteCreateWithoutUserInput[] | VoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutUserInput | VoteCreateOrConnectWithoutUserInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutUserInput | VoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VoteCreateManyUserInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutUserInput | VoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutUserInput | VoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type InteractionUpdateManyWithoutUserNestedInput = {
    create?: XOR<InteractionCreateWithoutUserInput, InteractionUncheckedCreateWithoutUserInput> | InteractionCreateWithoutUserInput[] | InteractionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InteractionCreateOrConnectWithoutUserInput | InteractionCreateOrConnectWithoutUserInput[]
    upsert?: InteractionUpsertWithWhereUniqueWithoutUserInput | InteractionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InteractionCreateManyUserInputEnvelope
    set?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    disconnect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    delete?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    connect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    update?: InteractionUpdateWithWhereUniqueWithoutUserInput | InteractionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InteractionUpdateManyWithWhereWithoutUserInput | InteractionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InteractionScalarWhereInput | InteractionScalarWhereInput[]
  }

  export type RecommendationProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<RecommendationProfileCreateWithoutUserInput, RecommendationProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: RecommendationProfileCreateOrConnectWithoutUserInput
    upsert?: RecommendationProfileUpsertWithoutUserInput
    disconnect?: RecommendationProfileWhereInput | boolean
    delete?: RecommendationProfileWhereInput | boolean
    connect?: RecommendationProfileWhereUniqueInput
    update?: XOR<XOR<RecommendationProfileUpdateToOneWithWhereWithoutUserInput, RecommendationProfileUpdateWithoutUserInput>, RecommendationProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserRecommendationUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRecommendationCreateWithoutUserInput, UserRecommendationUncheckedCreateWithoutUserInput> | UserRecommendationCreateWithoutUserInput[] | UserRecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRecommendationCreateOrConnectWithoutUserInput | UserRecommendationCreateOrConnectWithoutUserInput[]
    upsert?: UserRecommendationUpsertWithWhereUniqueWithoutUserInput | UserRecommendationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRecommendationCreateManyUserInputEnvelope
    set?: UserRecommendationWhereUniqueInput | UserRecommendationWhereUniqueInput[]
    disconnect?: UserRecommendationWhereUniqueInput | UserRecommendationWhereUniqueInput[]
    delete?: UserRecommendationWhereUniqueInput | UserRecommendationWhereUniqueInput[]
    connect?: UserRecommendationWhereUniqueInput | UserRecommendationWhereUniqueInput[]
    update?: UserRecommendationUpdateWithWhereUniqueWithoutUserInput | UserRecommendationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRecommendationUpdateManyWithWhereWithoutUserInput | UserRecommendationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRecommendationScalarWhereInput | UserRecommendationScalarWhereInput[]
  }

  export type RecommendationEventUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecommendationEventCreateWithoutUserInput, RecommendationEventUncheckedCreateWithoutUserInput> | RecommendationEventCreateWithoutUserInput[] | RecommendationEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationEventCreateOrConnectWithoutUserInput | RecommendationEventCreateOrConnectWithoutUserInput[]
    upsert?: RecommendationEventUpsertWithWhereUniqueWithoutUserInput | RecommendationEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecommendationEventCreateManyUserInputEnvelope
    set?: RecommendationEventWhereUniqueInput | RecommendationEventWhereUniqueInput[]
    disconnect?: RecommendationEventWhereUniqueInput | RecommendationEventWhereUniqueInput[]
    delete?: RecommendationEventWhereUniqueInput | RecommendationEventWhereUniqueInput[]
    connect?: RecommendationEventWhereUniqueInput | RecommendationEventWhereUniqueInput[]
    update?: RecommendationEventUpdateWithWhereUniqueWithoutUserInput | RecommendationEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecommendationEventUpdateManyWithWhereWithoutUserInput | RecommendationEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecommendationEventScalarWhereInput | RecommendationEventScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserAssetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAssetCreateWithoutUserInput, UserAssetUncheckedCreateWithoutUserInput> | UserAssetCreateWithoutUserInput[] | UserAssetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAssetCreateOrConnectWithoutUserInput | UserAssetCreateOrConnectWithoutUserInput[]
    upsert?: UserAssetUpsertWithWhereUniqueWithoutUserInput | UserAssetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAssetCreateManyUserInputEnvelope
    set?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    disconnect?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    delete?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    connect?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    update?: UserAssetUpdateWithWhereUniqueWithoutUserInput | UserAssetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAssetUpdateManyWithWhereWithoutUserInput | UserAssetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAssetScalarWhereInput | UserAssetScalarWhereInput[]
  }

  export type UserContentTypeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserContentTypeCreateWithoutUserInput, UserContentTypeUncheckedCreateWithoutUserInput> | UserContentTypeCreateWithoutUserInput[] | UserContentTypeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserContentTypeCreateOrConnectWithoutUserInput | UserContentTypeCreateOrConnectWithoutUserInput[]
    upsert?: UserContentTypeUpsertWithWhereUniqueWithoutUserInput | UserContentTypeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserContentTypeCreateManyUserInputEnvelope
    set?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    disconnect?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    delete?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    connect?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    update?: UserContentTypeUpdateWithWhereUniqueWithoutUserInput | UserContentTypeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserContentTypeUpdateManyWithWhereWithoutUserInput | UserContentTypeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserContentTypeScalarWhereInput | UserContentTypeScalarWhereInput[]
  }

  export type UserInvestorProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserInvestorProfileCreateWithoutUserInput, UserInvestorProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserInvestorProfileCreateOrConnectWithoutUserInput
    upsert?: UserInvestorProfileUpsertWithoutUserInput
    disconnect?: UserInvestorProfileWhereInput | boolean
    delete?: UserInvestorProfileWhereInput | boolean
    connect?: UserInvestorProfileWhereUniqueInput
    update?: XOR<XOR<UserInvestorProfileUpdateToOneWithWhereWithoutUserInput, UserInvestorProfileUpdateWithoutUserInput>, UserInvestorProfileUncheckedUpdateWithoutUserInput>
  }

  export type VoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VoteCreateWithoutUserInput, VoteUncheckedCreateWithoutUserInput> | VoteCreateWithoutUserInput[] | VoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutUserInput | VoteCreateOrConnectWithoutUserInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutUserInput | VoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VoteCreateManyUserInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutUserInput | VoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutUserInput | VoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type InteractionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InteractionCreateWithoutUserInput, InteractionUncheckedCreateWithoutUserInput> | InteractionCreateWithoutUserInput[] | InteractionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InteractionCreateOrConnectWithoutUserInput | InteractionCreateOrConnectWithoutUserInput[]
    upsert?: InteractionUpsertWithWhereUniqueWithoutUserInput | InteractionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InteractionCreateManyUserInputEnvelope
    set?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    disconnect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    delete?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    connect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    update?: InteractionUpdateWithWhereUniqueWithoutUserInput | InteractionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InteractionUpdateManyWithWhereWithoutUserInput | InteractionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InteractionScalarWhereInput | InteractionScalarWhereInput[]
  }

  export type RecommendationProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<RecommendationProfileCreateWithoutUserInput, RecommendationProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: RecommendationProfileCreateOrConnectWithoutUserInput
    upsert?: RecommendationProfileUpsertWithoutUserInput
    disconnect?: RecommendationProfileWhereInput | boolean
    delete?: RecommendationProfileWhereInput | boolean
    connect?: RecommendationProfileWhereUniqueInput
    update?: XOR<XOR<RecommendationProfileUpdateToOneWithWhereWithoutUserInput, RecommendationProfileUpdateWithoutUserInput>, RecommendationProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserRecommendationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRecommendationCreateWithoutUserInput, UserRecommendationUncheckedCreateWithoutUserInput> | UserRecommendationCreateWithoutUserInput[] | UserRecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRecommendationCreateOrConnectWithoutUserInput | UserRecommendationCreateOrConnectWithoutUserInput[]
    upsert?: UserRecommendationUpsertWithWhereUniqueWithoutUserInput | UserRecommendationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRecommendationCreateManyUserInputEnvelope
    set?: UserRecommendationWhereUniqueInput | UserRecommendationWhereUniqueInput[]
    disconnect?: UserRecommendationWhereUniqueInput | UserRecommendationWhereUniqueInput[]
    delete?: UserRecommendationWhereUniqueInput | UserRecommendationWhereUniqueInput[]
    connect?: UserRecommendationWhereUniqueInput | UserRecommendationWhereUniqueInput[]
    update?: UserRecommendationUpdateWithWhereUniqueWithoutUserInput | UserRecommendationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRecommendationUpdateManyWithWhereWithoutUserInput | UserRecommendationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRecommendationScalarWhereInput | UserRecommendationScalarWhereInput[]
  }

  export type RecommendationEventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecommendationEventCreateWithoutUserInput, RecommendationEventUncheckedCreateWithoutUserInput> | RecommendationEventCreateWithoutUserInput[] | RecommendationEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationEventCreateOrConnectWithoutUserInput | RecommendationEventCreateOrConnectWithoutUserInput[]
    upsert?: RecommendationEventUpsertWithWhereUniqueWithoutUserInput | RecommendationEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecommendationEventCreateManyUserInputEnvelope
    set?: RecommendationEventWhereUniqueInput | RecommendationEventWhereUniqueInput[]
    disconnect?: RecommendationEventWhereUniqueInput | RecommendationEventWhereUniqueInput[]
    delete?: RecommendationEventWhereUniqueInput | RecommendationEventWhereUniqueInput[]
    connect?: RecommendationEventWhereUniqueInput | RecommendationEventWhereUniqueInput[]
    update?: RecommendationEventUpdateWithWhereUniqueWithoutUserInput | RecommendationEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecommendationEventUpdateManyWithWhereWithoutUserInput | RecommendationEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecommendationEventScalarWhereInput | RecommendationEventScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserAssetCreateNestedManyWithoutAssetInput = {
    create?: XOR<UserAssetCreateWithoutAssetInput, UserAssetUncheckedCreateWithoutAssetInput> | UserAssetCreateWithoutAssetInput[] | UserAssetUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: UserAssetCreateOrConnectWithoutAssetInput | UserAssetCreateOrConnectWithoutAssetInput[]
    createMany?: UserAssetCreateManyAssetInputEnvelope
    connect?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
  }

  export type PriceSnapshotCreateNestedManyWithoutAssetInput = {
    create?: XOR<PriceSnapshotCreateWithoutAssetInput, PriceSnapshotUncheckedCreateWithoutAssetInput> | PriceSnapshotCreateWithoutAssetInput[] | PriceSnapshotUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: PriceSnapshotCreateOrConnectWithoutAssetInput | PriceSnapshotCreateOrConnectWithoutAssetInput[]
    createMany?: PriceSnapshotCreateManyAssetInputEnvelope
    connect?: PriceSnapshotWhereUniqueInput | PriceSnapshotWhereUniqueInput[]
  }

  export type UserAssetUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<UserAssetCreateWithoutAssetInput, UserAssetUncheckedCreateWithoutAssetInput> | UserAssetCreateWithoutAssetInput[] | UserAssetUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: UserAssetCreateOrConnectWithoutAssetInput | UserAssetCreateOrConnectWithoutAssetInput[]
    createMany?: UserAssetCreateManyAssetInputEnvelope
    connect?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
  }

  export type PriceSnapshotUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<PriceSnapshotCreateWithoutAssetInput, PriceSnapshotUncheckedCreateWithoutAssetInput> | PriceSnapshotCreateWithoutAssetInput[] | PriceSnapshotUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: PriceSnapshotCreateOrConnectWithoutAssetInput | PriceSnapshotCreateOrConnectWithoutAssetInput[]
    createMany?: PriceSnapshotCreateManyAssetInputEnvelope
    connect?: PriceSnapshotWhereUniqueInput | PriceSnapshotWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserAssetUpdateManyWithoutAssetNestedInput = {
    create?: XOR<UserAssetCreateWithoutAssetInput, UserAssetUncheckedCreateWithoutAssetInput> | UserAssetCreateWithoutAssetInput[] | UserAssetUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: UserAssetCreateOrConnectWithoutAssetInput | UserAssetCreateOrConnectWithoutAssetInput[]
    upsert?: UserAssetUpsertWithWhereUniqueWithoutAssetInput | UserAssetUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: UserAssetCreateManyAssetInputEnvelope
    set?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    disconnect?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    delete?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    connect?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    update?: UserAssetUpdateWithWhereUniqueWithoutAssetInput | UserAssetUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: UserAssetUpdateManyWithWhereWithoutAssetInput | UserAssetUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: UserAssetScalarWhereInput | UserAssetScalarWhereInput[]
  }

  export type PriceSnapshotUpdateManyWithoutAssetNestedInput = {
    create?: XOR<PriceSnapshotCreateWithoutAssetInput, PriceSnapshotUncheckedCreateWithoutAssetInput> | PriceSnapshotCreateWithoutAssetInput[] | PriceSnapshotUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: PriceSnapshotCreateOrConnectWithoutAssetInput | PriceSnapshotCreateOrConnectWithoutAssetInput[]
    upsert?: PriceSnapshotUpsertWithWhereUniqueWithoutAssetInput | PriceSnapshotUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: PriceSnapshotCreateManyAssetInputEnvelope
    set?: PriceSnapshotWhereUniqueInput | PriceSnapshotWhereUniqueInput[]
    disconnect?: PriceSnapshotWhereUniqueInput | PriceSnapshotWhereUniqueInput[]
    delete?: PriceSnapshotWhereUniqueInput | PriceSnapshotWhereUniqueInput[]
    connect?: PriceSnapshotWhereUniqueInput | PriceSnapshotWhereUniqueInput[]
    update?: PriceSnapshotUpdateWithWhereUniqueWithoutAssetInput | PriceSnapshotUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: PriceSnapshotUpdateManyWithWhereWithoutAssetInput | PriceSnapshotUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: PriceSnapshotScalarWhereInput | PriceSnapshotScalarWhereInput[]
  }

  export type UserAssetUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<UserAssetCreateWithoutAssetInput, UserAssetUncheckedCreateWithoutAssetInput> | UserAssetCreateWithoutAssetInput[] | UserAssetUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: UserAssetCreateOrConnectWithoutAssetInput | UserAssetCreateOrConnectWithoutAssetInput[]
    upsert?: UserAssetUpsertWithWhereUniqueWithoutAssetInput | UserAssetUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: UserAssetCreateManyAssetInputEnvelope
    set?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    disconnect?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    delete?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    connect?: UserAssetWhereUniqueInput | UserAssetWhereUniqueInput[]
    update?: UserAssetUpdateWithWhereUniqueWithoutAssetInput | UserAssetUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: UserAssetUpdateManyWithWhereWithoutAssetInput | UserAssetUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: UserAssetScalarWhereInput | UserAssetScalarWhereInput[]
  }

  export type PriceSnapshotUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<PriceSnapshotCreateWithoutAssetInput, PriceSnapshotUncheckedCreateWithoutAssetInput> | PriceSnapshotCreateWithoutAssetInput[] | PriceSnapshotUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: PriceSnapshotCreateOrConnectWithoutAssetInput | PriceSnapshotCreateOrConnectWithoutAssetInput[]
    upsert?: PriceSnapshotUpsertWithWhereUniqueWithoutAssetInput | PriceSnapshotUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: PriceSnapshotCreateManyAssetInputEnvelope
    set?: PriceSnapshotWhereUniqueInput | PriceSnapshotWhereUniqueInput[]
    disconnect?: PriceSnapshotWhereUniqueInput | PriceSnapshotWhereUniqueInput[]
    delete?: PriceSnapshotWhereUniqueInput | PriceSnapshotWhereUniqueInput[]
    connect?: PriceSnapshotWhereUniqueInput | PriceSnapshotWhereUniqueInput[]
    update?: PriceSnapshotUpdateWithWhereUniqueWithoutAssetInput | PriceSnapshotUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: PriceSnapshotUpdateManyWithWhereWithoutAssetInput | PriceSnapshotUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: PriceSnapshotScalarWhereInput | PriceSnapshotScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserAssetsInput = {
    create?: XOR<UserCreateWithoutUserAssetsInput, UserUncheckedCreateWithoutUserAssetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAssetsInput
    connect?: UserWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutUserAssetsInput = {
    create?: XOR<AssetCreateWithoutUserAssetsInput, AssetUncheckedCreateWithoutUserAssetsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutUserAssetsInput
    connect?: AssetWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserAssetsNestedInput = {
    create?: XOR<UserCreateWithoutUserAssetsInput, UserUncheckedCreateWithoutUserAssetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAssetsInput
    upsert?: UserUpsertWithoutUserAssetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserAssetsInput, UserUpdateWithoutUserAssetsInput>, UserUncheckedUpdateWithoutUserAssetsInput>
  }

  export type AssetUpdateOneRequiredWithoutUserAssetsNestedInput = {
    create?: XOR<AssetCreateWithoutUserAssetsInput, AssetUncheckedCreateWithoutUserAssetsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutUserAssetsInput
    upsert?: AssetUpsertWithoutUserAssetsInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutUserAssetsInput, AssetUpdateWithoutUserAssetsInput>, AssetUncheckedUpdateWithoutUserAssetsInput>
  }

  export type UserContentTypeCreateNestedManyWithoutContentTypeInput = {
    create?: XOR<UserContentTypeCreateWithoutContentTypeInput, UserContentTypeUncheckedCreateWithoutContentTypeInput> | UserContentTypeCreateWithoutContentTypeInput[] | UserContentTypeUncheckedCreateWithoutContentTypeInput[]
    connectOrCreate?: UserContentTypeCreateOrConnectWithoutContentTypeInput | UserContentTypeCreateOrConnectWithoutContentTypeInput[]
    createMany?: UserContentTypeCreateManyContentTypeInputEnvelope
    connect?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
  }

  export type UserContentTypeUncheckedCreateNestedManyWithoutContentTypeInput = {
    create?: XOR<UserContentTypeCreateWithoutContentTypeInput, UserContentTypeUncheckedCreateWithoutContentTypeInput> | UserContentTypeCreateWithoutContentTypeInput[] | UserContentTypeUncheckedCreateWithoutContentTypeInput[]
    connectOrCreate?: UserContentTypeCreateOrConnectWithoutContentTypeInput | UserContentTypeCreateOrConnectWithoutContentTypeInput[]
    createMany?: UserContentTypeCreateManyContentTypeInputEnvelope
    connect?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
  }

  export type UserContentTypeUpdateManyWithoutContentTypeNestedInput = {
    create?: XOR<UserContentTypeCreateWithoutContentTypeInput, UserContentTypeUncheckedCreateWithoutContentTypeInput> | UserContentTypeCreateWithoutContentTypeInput[] | UserContentTypeUncheckedCreateWithoutContentTypeInput[]
    connectOrCreate?: UserContentTypeCreateOrConnectWithoutContentTypeInput | UserContentTypeCreateOrConnectWithoutContentTypeInput[]
    upsert?: UserContentTypeUpsertWithWhereUniqueWithoutContentTypeInput | UserContentTypeUpsertWithWhereUniqueWithoutContentTypeInput[]
    createMany?: UserContentTypeCreateManyContentTypeInputEnvelope
    set?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    disconnect?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    delete?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    connect?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    update?: UserContentTypeUpdateWithWhereUniqueWithoutContentTypeInput | UserContentTypeUpdateWithWhereUniqueWithoutContentTypeInput[]
    updateMany?: UserContentTypeUpdateManyWithWhereWithoutContentTypeInput | UserContentTypeUpdateManyWithWhereWithoutContentTypeInput[]
    deleteMany?: UserContentTypeScalarWhereInput | UserContentTypeScalarWhereInput[]
  }

  export type UserContentTypeUncheckedUpdateManyWithoutContentTypeNestedInput = {
    create?: XOR<UserContentTypeCreateWithoutContentTypeInput, UserContentTypeUncheckedCreateWithoutContentTypeInput> | UserContentTypeCreateWithoutContentTypeInput[] | UserContentTypeUncheckedCreateWithoutContentTypeInput[]
    connectOrCreate?: UserContentTypeCreateOrConnectWithoutContentTypeInput | UserContentTypeCreateOrConnectWithoutContentTypeInput[]
    upsert?: UserContentTypeUpsertWithWhereUniqueWithoutContentTypeInput | UserContentTypeUpsertWithWhereUniqueWithoutContentTypeInput[]
    createMany?: UserContentTypeCreateManyContentTypeInputEnvelope
    set?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    disconnect?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    delete?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    connect?: UserContentTypeWhereUniqueInput | UserContentTypeWhereUniqueInput[]
    update?: UserContentTypeUpdateWithWhereUniqueWithoutContentTypeInput | UserContentTypeUpdateWithWhereUniqueWithoutContentTypeInput[]
    updateMany?: UserContentTypeUpdateManyWithWhereWithoutContentTypeInput | UserContentTypeUpdateManyWithWhereWithoutContentTypeInput[]
    deleteMany?: UserContentTypeScalarWhereInput | UserContentTypeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserContentTypesInput = {
    create?: XOR<UserCreateWithoutUserContentTypesInput, UserUncheckedCreateWithoutUserContentTypesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserContentTypesInput
    connect?: UserWhereUniqueInput
  }

  export type ContentTypeCreateNestedOneWithoutUserContentTypesInput = {
    create?: XOR<ContentTypeCreateWithoutUserContentTypesInput, ContentTypeUncheckedCreateWithoutUserContentTypesInput>
    connectOrCreate?: ContentTypeCreateOrConnectWithoutUserContentTypesInput
    connect?: ContentTypeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserContentTypesNestedInput = {
    create?: XOR<UserCreateWithoutUserContentTypesInput, UserUncheckedCreateWithoutUserContentTypesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserContentTypesInput
    upsert?: UserUpsertWithoutUserContentTypesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserContentTypesInput, UserUpdateWithoutUserContentTypesInput>, UserUncheckedUpdateWithoutUserContentTypesInput>
  }

  export type ContentTypeUpdateOneRequiredWithoutUserContentTypesNestedInput = {
    create?: XOR<ContentTypeCreateWithoutUserContentTypesInput, ContentTypeUncheckedCreateWithoutUserContentTypesInput>
    connectOrCreate?: ContentTypeCreateOrConnectWithoutUserContentTypesInput
    upsert?: ContentTypeUpsertWithoutUserContentTypesInput
    connect?: ContentTypeWhereUniqueInput
    update?: XOR<XOR<ContentTypeUpdateToOneWithWhereWithoutUserContentTypesInput, ContentTypeUpdateWithoutUserContentTypesInput>, ContentTypeUncheckedUpdateWithoutUserContentTypesInput>
  }

  export type UserCreateNestedOneWithoutInvestorProfileInput = {
    create?: XOR<UserCreateWithoutInvestorProfileInput, UserUncheckedCreateWithoutInvestorProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvestorProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutInvestorProfileNestedInput = {
    create?: XOR<UserCreateWithoutInvestorProfileInput, UserUncheckedCreateWithoutInvestorProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvestorProfileInput
    upsert?: UserUpsertWithoutInvestorProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvestorProfileInput, UserUpdateWithoutInvestorProfileInput>, UserUncheckedUpdateWithoutInvestorProfileInput>
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MemeCreatetagsInput = {
    set: string[]
  }

  export type MemeUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PriceSnapshotCreatesparklineInput = {
    set: number[]
  }

  export type AssetCreateNestedOneWithoutPriceSnapshotsInput = {
    create?: XOR<AssetCreateWithoutPriceSnapshotsInput, AssetUncheckedCreateWithoutPriceSnapshotsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutPriceSnapshotsInput
    connect?: AssetWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PriceSnapshotUpdatesparklineInput = {
    set?: number[]
    push?: number | number[]
  }

  export type AssetUpdateOneRequiredWithoutPriceSnapshotsNestedInput = {
    create?: XOR<AssetCreateWithoutPriceSnapshotsInput, AssetUncheckedCreateWithoutPriceSnapshotsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutPriceSnapshotsInput
    upsert?: AssetUpsertWithoutPriceSnapshotsInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutPriceSnapshotsInput, AssetUpdateWithoutPriceSnapshotsInput>, AssetUncheckedUpdateWithoutPriceSnapshotsInput>
  }

  export type AIInsightCreatetargetAssetsInput = {
    set: string[]
  }

  export type AIInsightUpdatetargetAssetsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserCreateNestedOneWithoutVotesInput = {
    create?: XOR<UserCreateWithoutVotesInput, UserUncheckedCreateWithoutVotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutVotesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutVotesNestedInput = {
    create?: XOR<UserCreateWithoutVotesInput, UserUncheckedCreateWithoutVotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutVotesInput
    upsert?: UserUpsertWithoutVotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVotesInput, UserUpdateWithoutVotesInput>, UserUncheckedUpdateWithoutVotesInput>
  }

  export type UserCreateNestedOneWithoutInteractionsInput = {
    create?: XOR<UserCreateWithoutInteractionsInput, UserUncheckedCreateWithoutInteractionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInteractionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutInteractionsNestedInput = {
    create?: XOR<UserCreateWithoutInteractionsInput, UserUncheckedCreateWithoutInteractionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInteractionsInput
    upsert?: UserUpsertWithoutInteractionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInteractionsInput, UserUpdateWithoutInteractionsInput>, UserUncheckedUpdateWithoutInteractionsInput>
  }

  export type UserCreateNestedOneWithoutRecommendationProfileInput = {
    create?: XOR<UserCreateWithoutRecommendationProfileInput, UserUncheckedCreateWithoutRecommendationProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecommendationProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRecommendationProfileNestedInput = {
    create?: XOR<UserCreateWithoutRecommendationProfileInput, UserUncheckedCreateWithoutRecommendationProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecommendationProfileInput
    upsert?: UserUpsertWithoutRecommendationProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecommendationProfileInput, UserUpdateWithoutRecommendationProfileInput>, UserUncheckedUpdateWithoutRecommendationProfileInput>
  }

  export type UserCreateNestedOneWithoutUserRecommendationsInput = {
    create?: XOR<UserCreateWithoutUserRecommendationsInput, UserUncheckedCreateWithoutUserRecommendationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRecommendationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserRecommendationsNestedInput = {
    create?: XOR<UserCreateWithoutUserRecommendationsInput, UserUncheckedCreateWithoutUserRecommendationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRecommendationsInput
    upsert?: UserUpsertWithoutUserRecommendationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserRecommendationsInput, UserUpdateWithoutUserRecommendationsInput>, UserUncheckedUpdateWithoutUserRecommendationsInput>
  }

  export type UserCreateNestedOneWithoutRecommendationEventsInput = {
    create?: XOR<UserCreateWithoutRecommendationEventsInput, UserUncheckedCreateWithoutRecommendationEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecommendationEventsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRecommendationEventsNestedInput = {
    create?: XOR<UserCreateWithoutRecommendationEventsInput, UserUncheckedCreateWithoutRecommendationEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecommendationEventsInput
    upsert?: UserUpsertWithoutRecommendationEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecommendationEventsInput, UserUpdateWithoutRecommendationEventsInput>, UserUncheckedUpdateWithoutRecommendationEventsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    tokenHash: string
    expiresAt: Date | string
    isActive?: boolean
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    tokenHash: string
    expiresAt: Date | string
    isActive?: boolean
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserAssetCreateWithoutUserInput = {
    id?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutUserAssetsInput
  }

  export type UserAssetUncheckedCreateWithoutUserInput = {
    id?: string
    assetId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAssetCreateOrConnectWithoutUserInput = {
    where: UserAssetWhereUniqueInput
    create: XOR<UserAssetCreateWithoutUserInput, UserAssetUncheckedCreateWithoutUserInput>
  }

  export type UserAssetCreateManyUserInputEnvelope = {
    data: UserAssetCreateManyUserInput | UserAssetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserContentTypeCreateWithoutUserInput = {
    id?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    contentType: ContentTypeCreateNestedOneWithoutUserContentTypesInput
  }

  export type UserContentTypeUncheckedCreateWithoutUserInput = {
    id?: string
    contentTypeId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserContentTypeCreateOrConnectWithoutUserInput = {
    where: UserContentTypeWhereUniqueInput
    create: XOR<UserContentTypeCreateWithoutUserInput, UserContentTypeUncheckedCreateWithoutUserInput>
  }

  export type UserContentTypeCreateManyUserInputEnvelope = {
    data: UserContentTypeCreateManyUserInput | UserContentTypeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserInvestorProfileCreateWithoutUserInput = {
    id?: string
    investorType: string
    riskTolerance?: string | null
    investmentHorizon?: string | null
    experienceLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserInvestorProfileUncheckedCreateWithoutUserInput = {
    id?: string
    investorType: string
    riskTolerance?: string | null
    investmentHorizon?: string | null
    experienceLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserInvestorProfileCreateOrConnectWithoutUserInput = {
    where: UserInvestorProfileWhereUniqueInput
    create: XOR<UserInvestorProfileCreateWithoutUserInput, UserInvestorProfileUncheckedCreateWithoutUserInput>
  }

  export type VoteCreateWithoutUserInput = {
    id?: string
    section: string
    itemId: string
    vote: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteUncheckedCreateWithoutUserInput = {
    id?: string
    section: string
    itemId: string
    vote: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteCreateOrConnectWithoutUserInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutUserInput, VoteUncheckedCreateWithoutUserInput>
  }

  export type VoteCreateManyUserInputEnvelope = {
    data: VoteCreateManyUserInput | VoteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InteractionCreateWithoutUserInput = {
    id?: string
    type: string
    section: string
    itemId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type InteractionUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    section: string
    itemId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type InteractionCreateOrConnectWithoutUserInput = {
    where: InteractionWhereUniqueInput
    create: XOR<InteractionCreateWithoutUserInput, InteractionUncheckedCreateWithoutUserInput>
  }

  export type InteractionCreateManyUserInputEnvelope = {
    data: InteractionCreateManyUserInput | InteractionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RecommendationProfileCreateWithoutUserInput = {
    id?: string
    algorithm: string
    preferences: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTrainedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecommendationProfileUncheckedCreateWithoutUserInput = {
    id?: string
    algorithm: string
    preferences: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTrainedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecommendationProfileCreateOrConnectWithoutUserInput = {
    where: RecommendationProfileWhereUniqueInput
    create: XOR<RecommendationProfileCreateWithoutUserInput, RecommendationProfileUncheckedCreateWithoutUserInput>
  }

  export type UserRecommendationCreateWithoutUserInput = {
    id?: string
    type: string
    itemId: string
    title: string
    description?: string | null
    relevanceScore: number
    reason?: string | null
    priority: string
    isRead?: boolean
    isDismissed?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRecommendationUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    itemId: string
    title: string
    description?: string | null
    relevanceScore: number
    reason?: string | null
    priority: string
    isRead?: boolean
    isDismissed?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRecommendationCreateOrConnectWithoutUserInput = {
    where: UserRecommendationWhereUniqueInput
    create: XOR<UserRecommendationCreateWithoutUserInput, UserRecommendationUncheckedCreateWithoutUserInput>
  }

  export type UserRecommendationCreateManyUserInputEnvelope = {
    data: UserRecommendationCreateManyUserInput | UserRecommendationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RecommendationEventCreateWithoutUserInput = {
    id?: string
    recommendationId: string
    eventType: string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RecommendationEventUncheckedCreateWithoutUserInput = {
    id?: string
    recommendationId: string
    eventType: string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RecommendationEventCreateOrConnectWithoutUserInput = {
    where: RecommendationEventWhereUniqueInput
    create: XOR<RecommendationEventCreateWithoutUserInput, RecommendationEventUncheckedCreateWithoutUserInput>
  }

  export type RecommendationEventCreateManyUserInputEnvelope = {
    data: RecommendationEventCreateManyUserInput | RecommendationEventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    tokenHash?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    isActive?: BoolFilter<"Session"> | boolean
    userAgent?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    lastUsedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
  }

  export type UserAssetUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAssetWhereUniqueInput
    update: XOR<UserAssetUpdateWithoutUserInput, UserAssetUncheckedUpdateWithoutUserInput>
    create: XOR<UserAssetCreateWithoutUserInput, UserAssetUncheckedCreateWithoutUserInput>
  }

  export type UserAssetUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAssetWhereUniqueInput
    data: XOR<UserAssetUpdateWithoutUserInput, UserAssetUncheckedUpdateWithoutUserInput>
  }

  export type UserAssetUpdateManyWithWhereWithoutUserInput = {
    where: UserAssetScalarWhereInput
    data: XOR<UserAssetUpdateManyMutationInput, UserAssetUncheckedUpdateManyWithoutUserInput>
  }

  export type UserAssetScalarWhereInput = {
    AND?: UserAssetScalarWhereInput | UserAssetScalarWhereInput[]
    OR?: UserAssetScalarWhereInput[]
    NOT?: UserAssetScalarWhereInput | UserAssetScalarWhereInput[]
    id?: StringFilter<"UserAsset"> | string
    userId?: StringFilter<"UserAsset"> | string
    assetId?: StringFilter<"UserAsset"> | string
    isActive?: BoolFilter<"UserAsset"> | boolean
    createdAt?: DateTimeFilter<"UserAsset"> | Date | string
    updatedAt?: DateTimeFilter<"UserAsset"> | Date | string
  }

  export type UserContentTypeUpsertWithWhereUniqueWithoutUserInput = {
    where: UserContentTypeWhereUniqueInput
    update: XOR<UserContentTypeUpdateWithoutUserInput, UserContentTypeUncheckedUpdateWithoutUserInput>
    create: XOR<UserContentTypeCreateWithoutUserInput, UserContentTypeUncheckedCreateWithoutUserInput>
  }

  export type UserContentTypeUpdateWithWhereUniqueWithoutUserInput = {
    where: UserContentTypeWhereUniqueInput
    data: XOR<UserContentTypeUpdateWithoutUserInput, UserContentTypeUncheckedUpdateWithoutUserInput>
  }

  export type UserContentTypeUpdateManyWithWhereWithoutUserInput = {
    where: UserContentTypeScalarWhereInput
    data: XOR<UserContentTypeUpdateManyMutationInput, UserContentTypeUncheckedUpdateManyWithoutUserInput>
  }

  export type UserContentTypeScalarWhereInput = {
    AND?: UserContentTypeScalarWhereInput | UserContentTypeScalarWhereInput[]
    OR?: UserContentTypeScalarWhereInput[]
    NOT?: UserContentTypeScalarWhereInput | UserContentTypeScalarWhereInput[]
    id?: StringFilter<"UserContentType"> | string
    userId?: StringFilter<"UserContentType"> | string
    contentTypeId?: StringFilter<"UserContentType"> | string
    isActive?: BoolFilter<"UserContentType"> | boolean
    createdAt?: DateTimeFilter<"UserContentType"> | Date | string
    updatedAt?: DateTimeFilter<"UserContentType"> | Date | string
  }

  export type UserInvestorProfileUpsertWithoutUserInput = {
    update: XOR<UserInvestorProfileUpdateWithoutUserInput, UserInvestorProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserInvestorProfileCreateWithoutUserInput, UserInvestorProfileUncheckedCreateWithoutUserInput>
    where?: UserInvestorProfileWhereInput
  }

  export type UserInvestorProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: UserInvestorProfileWhereInput
    data: XOR<UserInvestorProfileUpdateWithoutUserInput, UserInvestorProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserInvestorProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    investorType?: StringFieldUpdateOperationsInput | string
    riskTolerance?: NullableStringFieldUpdateOperationsInput | string | null
    investmentHorizon?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvestorProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    investorType?: StringFieldUpdateOperationsInput | string
    riskTolerance?: NullableStringFieldUpdateOperationsInput | string | null
    investmentHorizon?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUpsertWithWhereUniqueWithoutUserInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutUserInput, VoteUncheckedUpdateWithoutUserInput>
    create: XOR<VoteCreateWithoutUserInput, VoteUncheckedCreateWithoutUserInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutUserInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutUserInput, VoteUncheckedUpdateWithoutUserInput>
  }

  export type VoteUpdateManyWithWhereWithoutUserInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutUserInput>
  }

  export type VoteScalarWhereInput = {
    AND?: VoteScalarWhereInput | VoteScalarWhereInput[]
    OR?: VoteScalarWhereInput[]
    NOT?: VoteScalarWhereInput | VoteScalarWhereInput[]
    id?: StringFilter<"Vote"> | string
    userId?: StringFilter<"Vote"> | string
    section?: StringFilter<"Vote"> | string
    itemId?: StringFilter<"Vote"> | string
    vote?: StringFilter<"Vote"> | string
    isActive?: BoolFilter<"Vote"> | boolean
    createdAt?: DateTimeFilter<"Vote"> | Date | string
    updatedAt?: DateTimeFilter<"Vote"> | Date | string
  }

  export type InteractionUpsertWithWhereUniqueWithoutUserInput = {
    where: InteractionWhereUniqueInput
    update: XOR<InteractionUpdateWithoutUserInput, InteractionUncheckedUpdateWithoutUserInput>
    create: XOR<InteractionCreateWithoutUserInput, InteractionUncheckedCreateWithoutUserInput>
  }

  export type InteractionUpdateWithWhereUniqueWithoutUserInput = {
    where: InteractionWhereUniqueInput
    data: XOR<InteractionUpdateWithoutUserInput, InteractionUncheckedUpdateWithoutUserInput>
  }

  export type InteractionUpdateManyWithWhereWithoutUserInput = {
    where: InteractionScalarWhereInput
    data: XOR<InteractionUpdateManyMutationInput, InteractionUncheckedUpdateManyWithoutUserInput>
  }

  export type InteractionScalarWhereInput = {
    AND?: InteractionScalarWhereInput | InteractionScalarWhereInput[]
    OR?: InteractionScalarWhereInput[]
    NOT?: InteractionScalarWhereInput | InteractionScalarWhereInput[]
    id?: StringFilter<"Interaction"> | string
    userId?: StringFilter<"Interaction"> | string
    type?: StringFilter<"Interaction"> | string
    section?: StringFilter<"Interaction"> | string
    itemId?: StringNullableFilter<"Interaction"> | string | null
    metadata?: JsonNullableFilter<"Interaction">
    userAgent?: StringNullableFilter<"Interaction"> | string | null
    ipAddress?: StringNullableFilter<"Interaction"> | string | null
    createdAt?: DateTimeFilter<"Interaction"> | Date | string
  }

  export type RecommendationProfileUpsertWithoutUserInput = {
    update: XOR<RecommendationProfileUpdateWithoutUserInput, RecommendationProfileUncheckedUpdateWithoutUserInput>
    create: XOR<RecommendationProfileCreateWithoutUserInput, RecommendationProfileUncheckedCreateWithoutUserInput>
    where?: RecommendationProfileWhereInput
  }

  export type RecommendationProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: RecommendationProfileWhereInput
    data: XOR<RecommendationProfileUpdateWithoutUserInput, RecommendationProfileUncheckedUpdateWithoutUserInput>
  }

  export type RecommendationProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTrainedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTrainedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecommendationUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRecommendationWhereUniqueInput
    update: XOR<UserRecommendationUpdateWithoutUserInput, UserRecommendationUncheckedUpdateWithoutUserInput>
    create: XOR<UserRecommendationCreateWithoutUserInput, UserRecommendationUncheckedCreateWithoutUserInput>
  }

  export type UserRecommendationUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRecommendationWhereUniqueInput
    data: XOR<UserRecommendationUpdateWithoutUserInput, UserRecommendationUncheckedUpdateWithoutUserInput>
  }

  export type UserRecommendationUpdateManyWithWhereWithoutUserInput = {
    where: UserRecommendationScalarWhereInput
    data: XOR<UserRecommendationUpdateManyMutationInput, UserRecommendationUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRecommendationScalarWhereInput = {
    AND?: UserRecommendationScalarWhereInput | UserRecommendationScalarWhereInput[]
    OR?: UserRecommendationScalarWhereInput[]
    NOT?: UserRecommendationScalarWhereInput | UserRecommendationScalarWhereInput[]
    id?: StringFilter<"UserRecommendation"> | string
    userId?: StringFilter<"UserRecommendation"> | string
    type?: StringFilter<"UserRecommendation"> | string
    itemId?: StringFilter<"UserRecommendation"> | string
    title?: StringFilter<"UserRecommendation"> | string
    description?: StringNullableFilter<"UserRecommendation"> | string | null
    relevanceScore?: FloatFilter<"UserRecommendation"> | number
    reason?: StringNullableFilter<"UserRecommendation"> | string | null
    priority?: StringFilter<"UserRecommendation"> | string
    isRead?: BoolFilter<"UserRecommendation"> | boolean
    isDismissed?: BoolFilter<"UserRecommendation"> | boolean
    expiresAt?: DateTimeNullableFilter<"UserRecommendation"> | Date | string | null
    createdAt?: DateTimeFilter<"UserRecommendation"> | Date | string
    updatedAt?: DateTimeFilter<"UserRecommendation"> | Date | string
  }

  export type RecommendationEventUpsertWithWhereUniqueWithoutUserInput = {
    where: RecommendationEventWhereUniqueInput
    update: XOR<RecommendationEventUpdateWithoutUserInput, RecommendationEventUncheckedUpdateWithoutUserInput>
    create: XOR<RecommendationEventCreateWithoutUserInput, RecommendationEventUncheckedCreateWithoutUserInput>
  }

  export type RecommendationEventUpdateWithWhereUniqueWithoutUserInput = {
    where: RecommendationEventWhereUniqueInput
    data: XOR<RecommendationEventUpdateWithoutUserInput, RecommendationEventUncheckedUpdateWithoutUserInput>
  }

  export type RecommendationEventUpdateManyWithWhereWithoutUserInput = {
    where: RecommendationEventScalarWhereInput
    data: XOR<RecommendationEventUpdateManyMutationInput, RecommendationEventUncheckedUpdateManyWithoutUserInput>
  }

  export type RecommendationEventScalarWhereInput = {
    AND?: RecommendationEventScalarWhereInput | RecommendationEventScalarWhereInput[]
    OR?: RecommendationEventScalarWhereInput[]
    NOT?: RecommendationEventScalarWhereInput | RecommendationEventScalarWhereInput[]
    id?: StringFilter<"RecommendationEvent"> | string
    userId?: StringFilter<"RecommendationEvent"> | string
    recommendationId?: StringFilter<"RecommendationEvent"> | string
    eventType?: StringFilter<"RecommendationEvent"> | string
    context?: JsonNullableFilter<"RecommendationEvent">
    feedback?: JsonNullableFilter<"RecommendationEvent">
    createdAt?: DateTimeFilter<"RecommendationEvent"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    userAssets?: UserAssetCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileCreateNestedOneWithoutUserInput
    votes?: VoteCreateNestedManyWithoutUserInput
    interactions?: InteractionCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    userAssets?: UserAssetUncheckedCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeUncheckedCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileUncheckedCreateNestedOneWithoutUserInput
    votes?: VoteUncheckedCreateNestedManyWithoutUserInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileUncheckedCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationUncheckedCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userAssets?: UserAssetUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUpdateOneWithoutUserNestedInput
    votes?: VoteUpdateManyWithoutUserNestedInput
    interactions?: InteractionUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userAssets?: UserAssetUncheckedUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUncheckedUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUncheckedUpdateOneWithoutUserNestedInput
    votes?: VoteUncheckedUpdateManyWithoutUserNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUncheckedUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUncheckedUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserAssetCreateWithoutAssetInput = {
    id?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserAssetsInput
  }

  export type UserAssetUncheckedCreateWithoutAssetInput = {
    id?: string
    userId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAssetCreateOrConnectWithoutAssetInput = {
    where: UserAssetWhereUniqueInput
    create: XOR<UserAssetCreateWithoutAssetInput, UserAssetUncheckedCreateWithoutAssetInput>
  }

  export type UserAssetCreateManyAssetInputEnvelope = {
    data: UserAssetCreateManyAssetInput | UserAssetCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type PriceSnapshotCreateWithoutAssetInput = {
    id?: string
    symbol: string
    currentPrice: number
    priceChange24h: number
    priceChangePercentage24h: number
    volume24h?: number | null
    marketCap?: number | null
    sparkline?: PriceSnapshotCreatesparklineInput | number[]
    snapshotAt: Date | string
    createdAt?: Date | string
  }

  export type PriceSnapshotUncheckedCreateWithoutAssetInput = {
    id?: string
    symbol: string
    currentPrice: number
    priceChange24h: number
    priceChangePercentage24h: number
    volume24h?: number | null
    marketCap?: number | null
    sparkline?: PriceSnapshotCreatesparklineInput | number[]
    snapshotAt: Date | string
    createdAt?: Date | string
  }

  export type PriceSnapshotCreateOrConnectWithoutAssetInput = {
    where: PriceSnapshotWhereUniqueInput
    create: XOR<PriceSnapshotCreateWithoutAssetInput, PriceSnapshotUncheckedCreateWithoutAssetInput>
  }

  export type PriceSnapshotCreateManyAssetInputEnvelope = {
    data: PriceSnapshotCreateManyAssetInput | PriceSnapshotCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type UserAssetUpsertWithWhereUniqueWithoutAssetInput = {
    where: UserAssetWhereUniqueInput
    update: XOR<UserAssetUpdateWithoutAssetInput, UserAssetUncheckedUpdateWithoutAssetInput>
    create: XOR<UserAssetCreateWithoutAssetInput, UserAssetUncheckedCreateWithoutAssetInput>
  }

  export type UserAssetUpdateWithWhereUniqueWithoutAssetInput = {
    where: UserAssetWhereUniqueInput
    data: XOR<UserAssetUpdateWithoutAssetInput, UserAssetUncheckedUpdateWithoutAssetInput>
  }

  export type UserAssetUpdateManyWithWhereWithoutAssetInput = {
    where: UserAssetScalarWhereInput
    data: XOR<UserAssetUpdateManyMutationInput, UserAssetUncheckedUpdateManyWithoutAssetInput>
  }

  export type PriceSnapshotUpsertWithWhereUniqueWithoutAssetInput = {
    where: PriceSnapshotWhereUniqueInput
    update: XOR<PriceSnapshotUpdateWithoutAssetInput, PriceSnapshotUncheckedUpdateWithoutAssetInput>
    create: XOR<PriceSnapshotCreateWithoutAssetInput, PriceSnapshotUncheckedCreateWithoutAssetInput>
  }

  export type PriceSnapshotUpdateWithWhereUniqueWithoutAssetInput = {
    where: PriceSnapshotWhereUniqueInput
    data: XOR<PriceSnapshotUpdateWithoutAssetInput, PriceSnapshotUncheckedUpdateWithoutAssetInput>
  }

  export type PriceSnapshotUpdateManyWithWhereWithoutAssetInput = {
    where: PriceSnapshotScalarWhereInput
    data: XOR<PriceSnapshotUpdateManyMutationInput, PriceSnapshotUncheckedUpdateManyWithoutAssetInput>
  }

  export type PriceSnapshotScalarWhereInput = {
    AND?: PriceSnapshotScalarWhereInput | PriceSnapshotScalarWhereInput[]
    OR?: PriceSnapshotScalarWhereInput[]
    NOT?: PriceSnapshotScalarWhereInput | PriceSnapshotScalarWhereInput[]
    id?: StringFilter<"PriceSnapshot"> | string
    assetId?: StringFilter<"PriceSnapshot"> | string
    symbol?: StringFilter<"PriceSnapshot"> | string
    currentPrice?: FloatFilter<"PriceSnapshot"> | number
    priceChange24h?: FloatFilter<"PriceSnapshot"> | number
    priceChangePercentage24h?: FloatFilter<"PriceSnapshot"> | number
    volume24h?: FloatNullableFilter<"PriceSnapshot"> | number | null
    marketCap?: FloatNullableFilter<"PriceSnapshot"> | number | null
    sparkline?: FloatNullableListFilter<"PriceSnapshot">
    snapshotAt?: DateTimeFilter<"PriceSnapshot"> | Date | string
    createdAt?: DateTimeFilter<"PriceSnapshot"> | Date | string
  }

  export type UserCreateWithoutUserAssetsInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileCreateNestedOneWithoutUserInput
    votes?: VoteCreateNestedManyWithoutUserInput
    interactions?: InteractionCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserAssetsInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeUncheckedCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileUncheckedCreateNestedOneWithoutUserInput
    votes?: VoteUncheckedCreateNestedManyWithoutUserInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileUncheckedCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationUncheckedCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserAssetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserAssetsInput, UserUncheckedCreateWithoutUserAssetsInput>
  }

  export type AssetCreateWithoutUserAssetsInput = {
    id?: string
    symbol: string
    name: string
    icon?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    priceSnapshots?: PriceSnapshotCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutUserAssetsInput = {
    id?: string
    symbol: string
    name: string
    icon?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    priceSnapshots?: PriceSnapshotUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutUserAssetsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutUserAssetsInput, AssetUncheckedCreateWithoutUserAssetsInput>
  }

  export type UserUpsertWithoutUserAssetsInput = {
    update: XOR<UserUpdateWithoutUserAssetsInput, UserUncheckedUpdateWithoutUserAssetsInput>
    create: XOR<UserCreateWithoutUserAssetsInput, UserUncheckedCreateWithoutUserAssetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserAssetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserAssetsInput, UserUncheckedUpdateWithoutUserAssetsInput>
  }

  export type UserUpdateWithoutUserAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUpdateOneWithoutUserNestedInput
    votes?: VoteUpdateManyWithoutUserNestedInput
    interactions?: InteractionUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUncheckedUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUncheckedUpdateOneWithoutUserNestedInput
    votes?: VoteUncheckedUpdateManyWithoutUserNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUncheckedUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUncheckedUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AssetUpsertWithoutUserAssetsInput = {
    update: XOR<AssetUpdateWithoutUserAssetsInput, AssetUncheckedUpdateWithoutUserAssetsInput>
    create: XOR<AssetCreateWithoutUserAssetsInput, AssetUncheckedCreateWithoutUserAssetsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutUserAssetsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutUserAssetsInput, AssetUncheckedUpdateWithoutUserAssetsInput>
  }

  export type AssetUpdateWithoutUserAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceSnapshots?: PriceSnapshotUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutUserAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceSnapshots?: PriceSnapshotUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type UserContentTypeCreateWithoutContentTypeInput = {
    id?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserContentTypesInput
  }

  export type UserContentTypeUncheckedCreateWithoutContentTypeInput = {
    id?: string
    userId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserContentTypeCreateOrConnectWithoutContentTypeInput = {
    where: UserContentTypeWhereUniqueInput
    create: XOR<UserContentTypeCreateWithoutContentTypeInput, UserContentTypeUncheckedCreateWithoutContentTypeInput>
  }

  export type UserContentTypeCreateManyContentTypeInputEnvelope = {
    data: UserContentTypeCreateManyContentTypeInput | UserContentTypeCreateManyContentTypeInput[]
    skipDuplicates?: boolean
  }

  export type UserContentTypeUpsertWithWhereUniqueWithoutContentTypeInput = {
    where: UserContentTypeWhereUniqueInput
    update: XOR<UserContentTypeUpdateWithoutContentTypeInput, UserContentTypeUncheckedUpdateWithoutContentTypeInput>
    create: XOR<UserContentTypeCreateWithoutContentTypeInput, UserContentTypeUncheckedCreateWithoutContentTypeInput>
  }

  export type UserContentTypeUpdateWithWhereUniqueWithoutContentTypeInput = {
    where: UserContentTypeWhereUniqueInput
    data: XOR<UserContentTypeUpdateWithoutContentTypeInput, UserContentTypeUncheckedUpdateWithoutContentTypeInput>
  }

  export type UserContentTypeUpdateManyWithWhereWithoutContentTypeInput = {
    where: UserContentTypeScalarWhereInput
    data: XOR<UserContentTypeUpdateManyMutationInput, UserContentTypeUncheckedUpdateManyWithoutContentTypeInput>
  }

  export type UserCreateWithoutUserContentTypesInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    userAssets?: UserAssetCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileCreateNestedOneWithoutUserInput
    votes?: VoteCreateNestedManyWithoutUserInput
    interactions?: InteractionCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserContentTypesInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userAssets?: UserAssetUncheckedCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileUncheckedCreateNestedOneWithoutUserInput
    votes?: VoteUncheckedCreateNestedManyWithoutUserInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileUncheckedCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationUncheckedCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserContentTypesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserContentTypesInput, UserUncheckedCreateWithoutUserContentTypesInput>
  }

  export type ContentTypeCreateWithoutUserContentTypesInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContentTypeUncheckedCreateWithoutUserContentTypesInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContentTypeCreateOrConnectWithoutUserContentTypesInput = {
    where: ContentTypeWhereUniqueInput
    create: XOR<ContentTypeCreateWithoutUserContentTypesInput, ContentTypeUncheckedCreateWithoutUserContentTypesInput>
  }

  export type UserUpsertWithoutUserContentTypesInput = {
    update: XOR<UserUpdateWithoutUserContentTypesInput, UserUncheckedUpdateWithoutUserContentTypesInput>
    create: XOR<UserCreateWithoutUserContentTypesInput, UserUncheckedCreateWithoutUserContentTypesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserContentTypesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserContentTypesInput, UserUncheckedUpdateWithoutUserContentTypesInput>
  }

  export type UserUpdateWithoutUserContentTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUpdateOneWithoutUserNestedInput
    votes?: VoteUpdateManyWithoutUserNestedInput
    interactions?: InteractionUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserContentTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUncheckedUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUncheckedUpdateOneWithoutUserNestedInput
    votes?: VoteUncheckedUpdateManyWithoutUserNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUncheckedUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUncheckedUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ContentTypeUpsertWithoutUserContentTypesInput = {
    update: XOR<ContentTypeUpdateWithoutUserContentTypesInput, ContentTypeUncheckedUpdateWithoutUserContentTypesInput>
    create: XOR<ContentTypeCreateWithoutUserContentTypesInput, ContentTypeUncheckedCreateWithoutUserContentTypesInput>
    where?: ContentTypeWhereInput
  }

  export type ContentTypeUpdateToOneWithWhereWithoutUserContentTypesInput = {
    where?: ContentTypeWhereInput
    data: XOR<ContentTypeUpdateWithoutUserContentTypesInput, ContentTypeUncheckedUpdateWithoutUserContentTypesInput>
  }

  export type ContentTypeUpdateWithoutUserContentTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentTypeUncheckedUpdateWithoutUserContentTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutInvestorProfileInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    userAssets?: UserAssetCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeCreateNestedManyWithoutUserInput
    votes?: VoteCreateNestedManyWithoutUserInput
    interactions?: InteractionCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvestorProfileInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userAssets?: UserAssetUncheckedCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeUncheckedCreateNestedManyWithoutUserInput
    votes?: VoteUncheckedCreateNestedManyWithoutUserInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileUncheckedCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationUncheckedCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvestorProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvestorProfileInput, UserUncheckedCreateWithoutInvestorProfileInput>
  }

  export type UserUpsertWithoutInvestorProfileInput = {
    update: XOR<UserUpdateWithoutInvestorProfileInput, UserUncheckedUpdateWithoutInvestorProfileInput>
    create: XOR<UserCreateWithoutInvestorProfileInput, UserUncheckedCreateWithoutInvestorProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvestorProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvestorProfileInput, UserUncheckedUpdateWithoutInvestorProfileInput>
  }

  export type UserUpdateWithoutInvestorProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUpdateManyWithoutUserNestedInput
    votes?: VoteUpdateManyWithoutUserNestedInput
    interactions?: InteractionUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvestorProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUncheckedUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUncheckedUpdateManyWithoutUserNestedInput
    votes?: VoteUncheckedUpdateManyWithoutUserNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUncheckedUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUncheckedUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AssetCreateWithoutPriceSnapshotsInput = {
    id?: string
    symbol: string
    name: string
    icon?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userAssets?: UserAssetCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutPriceSnapshotsInput = {
    id?: string
    symbol: string
    name: string
    icon?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userAssets?: UserAssetUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutPriceSnapshotsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutPriceSnapshotsInput, AssetUncheckedCreateWithoutPriceSnapshotsInput>
  }

  export type AssetUpsertWithoutPriceSnapshotsInput = {
    update: XOR<AssetUpdateWithoutPriceSnapshotsInput, AssetUncheckedUpdateWithoutPriceSnapshotsInput>
    create: XOR<AssetCreateWithoutPriceSnapshotsInput, AssetUncheckedCreateWithoutPriceSnapshotsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutPriceSnapshotsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutPriceSnapshotsInput, AssetUncheckedUpdateWithoutPriceSnapshotsInput>
  }

  export type AssetUpdateWithoutPriceSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAssets?: UserAssetUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutPriceSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAssets?: UserAssetUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type UserCreateWithoutVotesInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    userAssets?: UserAssetCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileCreateNestedOneWithoutUserInput
    interactions?: InteractionCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVotesInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userAssets?: UserAssetUncheckedCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeUncheckedCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileUncheckedCreateNestedOneWithoutUserInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileUncheckedCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationUncheckedCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVotesInput, UserUncheckedCreateWithoutVotesInput>
  }

  export type UserUpsertWithoutVotesInput = {
    update: XOR<UserUpdateWithoutVotesInput, UserUncheckedUpdateWithoutVotesInput>
    create: XOR<UserCreateWithoutVotesInput, UserUncheckedCreateWithoutVotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVotesInput, UserUncheckedUpdateWithoutVotesInput>
  }

  export type UserUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUpdateOneWithoutUserNestedInput
    interactions?: InteractionUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUncheckedUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUncheckedUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUncheckedUpdateOneWithoutUserNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUncheckedUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUncheckedUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutInteractionsInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    userAssets?: UserAssetCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileCreateNestedOneWithoutUserInput
    votes?: VoteCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInteractionsInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userAssets?: UserAssetUncheckedCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeUncheckedCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileUncheckedCreateNestedOneWithoutUserInput
    votes?: VoteUncheckedCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileUncheckedCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationUncheckedCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInteractionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInteractionsInput, UserUncheckedCreateWithoutInteractionsInput>
  }

  export type UserUpsertWithoutInteractionsInput = {
    update: XOR<UserUpdateWithoutInteractionsInput, UserUncheckedUpdateWithoutInteractionsInput>
    create: XOR<UserCreateWithoutInteractionsInput, UserUncheckedCreateWithoutInteractionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInteractionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInteractionsInput, UserUncheckedUpdateWithoutInteractionsInput>
  }

  export type UserUpdateWithoutInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUpdateOneWithoutUserNestedInput
    votes?: VoteUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUncheckedUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUncheckedUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUncheckedUpdateOneWithoutUserNestedInput
    votes?: VoteUncheckedUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUncheckedUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUncheckedUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRecommendationProfileInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    userAssets?: UserAssetCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileCreateNestedOneWithoutUserInput
    votes?: VoteCreateNestedManyWithoutUserInput
    interactions?: InteractionCreateNestedManyWithoutUserInput
    userRecommendations?: UserRecommendationCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRecommendationProfileInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userAssets?: UserAssetUncheckedCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeUncheckedCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileUncheckedCreateNestedOneWithoutUserInput
    votes?: VoteUncheckedCreateNestedManyWithoutUserInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutUserInput
    userRecommendations?: UserRecommendationUncheckedCreateNestedManyWithoutUserInput
    recommendationEvents?: RecommendationEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRecommendationProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecommendationProfileInput, UserUncheckedCreateWithoutRecommendationProfileInput>
  }

  export type UserUpsertWithoutRecommendationProfileInput = {
    update: XOR<UserUpdateWithoutRecommendationProfileInput, UserUncheckedUpdateWithoutRecommendationProfileInput>
    create: XOR<UserCreateWithoutRecommendationProfileInput, UserUncheckedCreateWithoutRecommendationProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecommendationProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecommendationProfileInput, UserUncheckedUpdateWithoutRecommendationProfileInput>
  }

  export type UserUpdateWithoutRecommendationProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUpdateOneWithoutUserNestedInput
    votes?: VoteUpdateManyWithoutUserNestedInput
    interactions?: InteractionUpdateManyWithoutUserNestedInput
    userRecommendations?: UserRecommendationUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRecommendationProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUncheckedUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUncheckedUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUncheckedUpdateOneWithoutUserNestedInput
    votes?: VoteUncheckedUpdateManyWithoutUserNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutUserNestedInput
    userRecommendations?: UserRecommendationUncheckedUpdateManyWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUserRecommendationsInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    userAssets?: UserAssetCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileCreateNestedOneWithoutUserInput
    votes?: VoteCreateNestedManyWithoutUserInput
    interactions?: InteractionCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileCreateNestedOneWithoutUserInput
    recommendationEvents?: RecommendationEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserRecommendationsInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userAssets?: UserAssetUncheckedCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeUncheckedCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileUncheckedCreateNestedOneWithoutUserInput
    votes?: VoteUncheckedCreateNestedManyWithoutUserInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileUncheckedCreateNestedOneWithoutUserInput
    recommendationEvents?: RecommendationEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserRecommendationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRecommendationsInput, UserUncheckedCreateWithoutUserRecommendationsInput>
  }

  export type UserUpsertWithoutUserRecommendationsInput = {
    update: XOR<UserUpdateWithoutUserRecommendationsInput, UserUncheckedUpdateWithoutUserRecommendationsInput>
    create: XOR<UserCreateWithoutUserRecommendationsInput, UserUncheckedCreateWithoutUserRecommendationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserRecommendationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserRecommendationsInput, UserUncheckedUpdateWithoutUserRecommendationsInput>
  }

  export type UserUpdateWithoutUserRecommendationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUpdateOneWithoutUserNestedInput
    votes?: VoteUpdateManyWithoutUserNestedInput
    interactions?: InteractionUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUpdateOneWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRecommendationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUncheckedUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUncheckedUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUncheckedUpdateOneWithoutUserNestedInput
    votes?: VoteUncheckedUpdateManyWithoutUserNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUncheckedUpdateOneWithoutUserNestedInput
    recommendationEvents?: RecommendationEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRecommendationEventsInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    userAssets?: UserAssetCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileCreateNestedOneWithoutUserInput
    votes?: VoteCreateNestedManyWithoutUserInput
    interactions?: InteractionCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRecommendationEventsInput = {
    id?: string
    email: string
    name: string
    passwordHash: string
    hasCompletedOnboarding?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userAssets?: UserAssetUncheckedCreateNestedManyWithoutUserInput
    userContentTypes?: UserContentTypeUncheckedCreateNestedManyWithoutUserInput
    investorProfile?: UserInvestorProfileUncheckedCreateNestedOneWithoutUserInput
    votes?: VoteUncheckedCreateNestedManyWithoutUserInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutUserInput
    recommendationProfile?: RecommendationProfileUncheckedCreateNestedOneWithoutUserInput
    userRecommendations?: UserRecommendationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRecommendationEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecommendationEventsInput, UserUncheckedCreateWithoutRecommendationEventsInput>
  }

  export type UserUpsertWithoutRecommendationEventsInput = {
    update: XOR<UserUpdateWithoutRecommendationEventsInput, UserUncheckedUpdateWithoutRecommendationEventsInput>
    create: XOR<UserCreateWithoutRecommendationEventsInput, UserUncheckedCreateWithoutRecommendationEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecommendationEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecommendationEventsInput, UserUncheckedUpdateWithoutRecommendationEventsInput>
  }

  export type UserUpdateWithoutRecommendationEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUpdateOneWithoutUserNestedInput
    votes?: VoteUpdateManyWithoutUserNestedInput
    interactions?: InteractionUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRecommendationEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    hasCompletedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userAssets?: UserAssetUncheckedUpdateManyWithoutUserNestedInput
    userContentTypes?: UserContentTypeUncheckedUpdateManyWithoutUserNestedInput
    investorProfile?: UserInvestorProfileUncheckedUpdateOneWithoutUserNestedInput
    votes?: VoteUncheckedUpdateManyWithoutUserNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutUserNestedInput
    recommendationProfile?: RecommendationProfileUncheckedUpdateOneWithoutUserNestedInput
    userRecommendations?: UserRecommendationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SessionCreateManyUserInput = {
    id?: string
    tokenHash: string
    expiresAt: Date | string
    isActive?: boolean
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string | null
  }

  export type UserAssetCreateManyUserInput = {
    id?: string
    assetId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserContentTypeCreateManyUserInput = {
    id?: string
    contentTypeId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteCreateManyUserInput = {
    id?: string
    section: string
    itemId: string
    vote: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InteractionCreateManyUserInput = {
    id?: string
    type: string
    section: string
    itemId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type UserRecommendationCreateManyUserInput = {
    id?: string
    type: string
    itemId: string
    title: string
    description?: string | null
    relevanceScore: number
    reason?: string | null
    priority: string
    isRead?: boolean
    isDismissed?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecommendationEventCreateManyUserInput = {
    id?: string
    recommendationId: string
    eventType: string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserAssetUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutUserAssetsNestedInput
  }

  export type UserAssetUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssetUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserContentTypeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contentType?: ContentTypeUpdateOneRequiredWithoutUserContentTypesNestedInput
  }

  export type UserContentTypeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    contentTypeId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserContentTypeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    contentTypeId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    vote?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    vote?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    vote?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecommendationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relevanceScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isDismissed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecommendationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relevanceScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isDismissed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecommendationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relevanceScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isDismissed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationEventUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recommendationId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationEventUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recommendationId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationEventUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recommendationId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    context?: NullableJsonNullValueInput | InputJsonValue
    feedback?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssetCreateManyAssetInput = {
    id?: string
    userId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PriceSnapshotCreateManyAssetInput = {
    id?: string
    symbol: string
    currentPrice: number
    priceChange24h: number
    priceChangePercentage24h: number
    volume24h?: number | null
    marketCap?: number | null
    sparkline?: PriceSnapshotCreatesparklineInput | number[]
    snapshotAt: Date | string
    createdAt?: Date | string
  }

  export type UserAssetUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserAssetsNestedInput
  }

  export type UserAssetUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssetUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceSnapshotUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    currentPrice?: FloatFieldUpdateOperationsInput | number
    priceChange24h?: FloatFieldUpdateOperationsInput | number
    priceChangePercentage24h?: FloatFieldUpdateOperationsInput | number
    volume24h?: NullableFloatFieldUpdateOperationsInput | number | null
    marketCap?: NullableFloatFieldUpdateOperationsInput | number | null
    sparkline?: PriceSnapshotUpdatesparklineInput | number[]
    snapshotAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceSnapshotUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    currentPrice?: FloatFieldUpdateOperationsInput | number
    priceChange24h?: FloatFieldUpdateOperationsInput | number
    priceChangePercentage24h?: FloatFieldUpdateOperationsInput | number
    volume24h?: NullableFloatFieldUpdateOperationsInput | number | null
    marketCap?: NullableFloatFieldUpdateOperationsInput | number | null
    sparkline?: PriceSnapshotUpdatesparklineInput | number[]
    snapshotAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceSnapshotUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    currentPrice?: FloatFieldUpdateOperationsInput | number
    priceChange24h?: FloatFieldUpdateOperationsInput | number
    priceChangePercentage24h?: FloatFieldUpdateOperationsInput | number
    volume24h?: NullableFloatFieldUpdateOperationsInput | number | null
    marketCap?: NullableFloatFieldUpdateOperationsInput | number | null
    sparkline?: PriceSnapshotUpdatesparklineInput | number[]
    snapshotAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserContentTypeCreateManyContentTypeInput = {
    id?: string
    userId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserContentTypeUpdateWithoutContentTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserContentTypesNestedInput
  }

  export type UserContentTypeUncheckedUpdateWithoutContentTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserContentTypeUncheckedUpdateManyWithoutContentTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssetCountOutputTypeDefaultArgs instead
     */
    export type AssetCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssetCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContentTypeCountOutputTypeDefaultArgs instead
     */
    export type ContentTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContentTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssetDefaultArgs instead
     */
    export type AssetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserAssetDefaultArgs instead
     */
    export type UserAssetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserAssetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContentTypeDefaultArgs instead
     */
    export type ContentTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContentTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserContentTypeDefaultArgs instead
     */
    export type UserContentTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserContentTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserInvestorProfileDefaultArgs instead
     */
    export type UserInvestorProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserInvestorProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewsItemDefaultArgs instead
     */
    export type NewsItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NewsItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemeDefaultArgs instead
     */
    export type MemeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PriceSnapshotDefaultArgs instead
     */
    export type PriceSnapshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PriceSnapshotDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AIInsightDefaultArgs instead
     */
    export type AIInsightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AIInsightDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VoteDefaultArgs instead
     */
    export type VoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InteractionDefaultArgs instead
     */
    export type InteractionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InteractionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecommendationProfileDefaultArgs instead
     */
    export type RecommendationProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecommendationProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRecommendationDefaultArgs instead
     */
    export type UserRecommendationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRecommendationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecommendationEventDefaultArgs instead
     */
    export type RecommendationEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecommendationEventDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}